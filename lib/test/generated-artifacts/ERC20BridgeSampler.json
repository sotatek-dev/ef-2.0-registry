{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "router",
                                "type": "address"
                            },
                            {
                                "internalType": "address[]",
                                "name": "path",
                                "type": "address[]"
                            },
                            {
                                "internalType": "string[]",
                                "name": "poolType",
                                "type": "string[]"
                            },
                            {
                                "internalType": "address[]",
                                "name": "dmmPoolAddresses",
                                "type": "address[]"
                            },
                            {
                                "internalType": "uint256[]",
                                "name": "amountTokens",
                                "type": "uint256[]"
                            }
                        ],
                        "internalType": "struct AutoRouteSampler.ExtraParams",
                        "name": "params",
                        "type": "tuple"
                    }
                ],
                "name": "sampleBuysFromAutoRoute",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "router",
                                "type": "address"
                            },
                            {
                                "internalType": "address[]",
                                "name": "path",
                                "type": "address[]"
                            },
                            {
                                "internalType": "string[]",
                                "name": "poolType",
                                "type": "string[]"
                            },
                            {
                                "internalType": "address[]",
                                "name": "dmmPoolAddresses",
                                "type": "address[]"
                            },
                            {
                                "internalType": "uint256[]",
                                "name": "amountTokens",
                                "type": "uint256[]"
                            }
                        ],
                        "internalType": "struct AutoRouteSampler.ExtraParams",
                        "name": "params",
                        "type": "tuple"
                    }
                ],
                "name": "sampleSellsFromAutoRoute",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "_0": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "_0": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60a06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003557600080fd5b5060805160601c61a9706200005e600039806130c15280614ce9528061583a525061a9706000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c80638b6d7b44116101b8578063bd71ecf611610104578063ddd5aa28116100a2578063f1ed7fa41161007c578063f1ed7fa4146107ad578063f3868e9c1461048d578063f5a4994d146107c0578063fc9fe41b146107d357610342565b8063ddd5aa2814610774578063e78ac04514610787578063e8e4af091461079a57610342565b8063c8c74a37116100de578063c8c74a3714610728578063c94706d81461073b578063cc1621c91461074e578063d9bca3721461076157610342565b8063bd71ecf6146106ef578063c25c413814610702578063c83190841461071557610342565b80639ea0ff1311610171578063a75e744b1161014b578063a75e744b14610695578063ab000276146106a8578063adc636bf146106bb578063b90cd2fb146106dc57610342565b80639ea0ff131461065c578063a0295b8b1461066f578063a46984171461068257610342565b80638b6d7b44146105bf5780638e5a0e07146105d25780639209483b146105f457806398777748146106075780639bf3ee351461061a5780639e3f05c31461063a57610342565b806336052391116102925780635aae4e531161023057806368be3cf21161020a57806368be3cf214610566578063706e2f9b1461058657806374c9d255146105995780637f7f4f13146105ac57610342565b80635aae4e531461052d5780635d5b674f1461054057806366a1ac6b1461055357610342565b8063494569db1161026c578063494569db146104c65780634edfb5b2146104d95780635505000a146104f957806357494b1d1461051a57610342565b8063360523911461048d5780633c883dba146104a057806340bc03ae146104b357610342565b8063252322b3116102ff5780632aa64319116102d95780632aa64319146104325780632d753aa41461045457806330d6570d146104675780633105fec11461047a57610342565b8063252322b3146103f9578063281e34321461040c57806329fa4aa01461041f57610342565b806301cb0ef7146103475780630496d5dc146103705780631022742b14610391578063149dab0e146103a457806316279055146103c65780632339078f146103e6575b600080fd5b61035a61035536600461980b565b6107e6565b604051610367919061a2dd565b60405180910390f35b61038361037e36600461901a565b610997565b60405161036792919061a1b9565b61035a61039f36600461944d565b610b3d565b6103b76103b23660046196ca565b610cb0565b6040516103679392919061a085565b6103d96103d4366004618cf4565b610e10565b604051610367919061a2f0565b61035a6103f436600461964b565b610e1a565b61035a610407366004618f58565b611041565b61035a61041a366004619a45565b611217565b61035a61042d366004619783565b61146c565b6104456104403660046197dc565b6114db565b6040516103679392919061a2fb565b61035a610462366004618ed3565b6117b8565b61035a610475366004618f58565b611941565b61035a61048836600461901a565b611ab5565b61035a61049b3660046197dc565b611c39565b61035a6104ae36600461980b565b611ccb565b61035a6104c1366004619783565b611e61565b6103836104d436600461901a565b611fe2565b6104ec6104e73660046199a7565b61216e565b604051610367919061a349565b61050c6105073660046195b4565b6123eb565b60405161036792919061a200565b61035a610528366004618f58565b612636565b61050c61053b3660046195b4565b612bad565b61035a61054e366004618f58565b612df2565b61035a61056136600461944d565b612e58565b610579610574366004619227565b612f0d565b604051610367919061a268565b61035a6105943660046192fe565b61306e565b6103b76105a73660046196ca565b613160565b61035a6105ba366004619a45565b61316f565b61035a6105cd366004619783565b6133bc565b6105e56105e0366004619295565b61371f565b6040516103679392919061a60f565b61035a610602366004619783565b613938565b61035a610615366004618f58565b613b38565b61062d610628366004619a05565b614071565b604051610367919061a327565b61064d6106483660046198f0565b6141b8565b6040516103679392919061a330565b61062d61066a366004618fca565b6142de565b61035a61067d36600461964b565b6144f4565b61035a610690366004618f58565b6146f0565b6104456106a336600461908c565b614845565b61035a6106b6366004618f58565b614982565b6106ce6106c9366004618f58565b614ae0565b60405161036792919061a397565b61035a6106ea366004618f58565b614c30565b61035a6106fd366004619330565b614c96565b61035a610710366004618f58565b614d92565b61035a610723366004618f58565b614df8565b61035a61073636600461901a565b614fb5565b61035a610749366004618f58565b615121565b61064d61075c3660046198f0565b61527f565b61044561076f36600461908c565b615465565b6104456107823660046197dc565b615554565b61035a610795366004619374565b6157e7565b61035a6107a8366004618f58565b6158dc565b61062d6107bb366004619960565b615a0f565b6106ce6107ce366004618f58565b615bae565b6105e56107e1366004619295565b615c9a565b608081015151606090806001600160401b038111801561080557600080fd5b5060405190808252806020026020018201604052801561082f578160200160208202803683370190505b50915060005b818110156109905783600001516001600160a01b031663846ee14b8560800151838151811061086057fe5b60200260200101518660200151876040015188606001516040518563ffffffff1660e01b8152600401610896949392919061a74c565b60006040518083038186803b1580156108ae57600080fd5b505afa9250505080156108e357506040513d6000823e601f3d908101601f191682016040526108e0919081019061951c565b60015b610938573d808015610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b5060405162461bcd60e51b815260040161092f9061a57c565b60405180910390fd5b8060008151811061094557fe5b602002602001015184838151811061095957fe5b60200260200101818152505083828151811061097157fe5b6020026020010151600014156109875750610990565b50600101610835565b5050919050565b80516060908190806001600160401b03811180156109b457600080fd5b506040519080825280602002602001820160405280156109de578160200160208202803683370190505b5091506109eb8686615eaf565b92508251600014156109fd5750610b35565b60005b81811015610b3257866001600160a01b031663a8312b1d620249f0878481518110610a2757fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401610a4f9392919061a721565b60006040518083038187803b158015610a6757600080fd5b5086fa93505050508015610a9d57506040513d6000823e601f3d908101601f19168201604052610a9a919081019061951c565b60015b610ad7573d808015610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b5050610b32565b80600188510381518110610ae757fe5b6020026020010151848381518110610afb57fe5b602002602001018181525050838281518110610b1357fe5b602002602001015160001415610b295750610b32565b50600101610a00565b50505b935093915050565b606083516001600160401b0381118015610b5657600080fd5b50604051908082528060200260200182016040528015610b80578160200160208202803683370190505b50905060005b84518114610ca857306001600160a01b0316639bf3ee3562030d40878481518110610bad57fe5b6020026020010151878581518110610bc157fe5b6020026020010151876040518563ffffffff1660e01b8152600401610be89392919061a6d1565b60206040518083038187803b158015610c0057600080fd5b5086fa93505050508015610c31575060408051601f3d908101601f19168201909252610c2e9181019061956a565b60015b610c85573d808015610c5f576040519150601f19603f3d011682016040523d82523d6000602084013e610c64565b606091505b506000838381518110610c7357fe5b60200260200101818152505050610ca0565b80838381518110610c9257fe5b602002602001018181525050505b600101610b86565b509392505050565b600060608086602001515160001415610cc857610e06565b610cd487878787616195565b855191945092506001600160401b0381118015610cf057600080fd5b50604051908082528060200260200182016040528015610d1a578160200160208202803683370190505b50905060005b8151811015610e0457836001600160a01b0316637f9c0ecd620493e085888581518110610d4957fe5b60200260200101516040518463ffffffff1660e01b8152600401610d6e92919061a1de565b60206040518083038187803b158015610d8657600080fd5b5086fa93505050508015610db7575060408051601f3d908101601f19168201909252610db49181019061956a565b60015b610dc057610e04565b80838381518110610dcd57fe5b602002602001018181525050828281518110610de557fe5b602002602001015160001415610dfb5750610e04565b50600101610d20565b505b9450945094915050565b803b15155b919050565b6060610e2683856163c7565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610e5c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610e8a57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610eba57600080fd5b50604051908082528060200260200182016040528015610ee4578160200160208202803683370190505b509350610eef618538565b610ef76163fd565b905060005b82811015611034576060610f238b898481518110610f1657fe5b602002602001015161642c565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610f599060009085908a90899060040161a3ea565b600060405180830381600087803b158015610f7357600080fd5b505af1925050508015610fa857506040513d6000823e601f3d908101601f19168201604052610fa591908101906193ca565b60015b610fe3573d808015610fd6576040519150601f19603f3d011682016040523d82523d6000602084013e610fdb565b606091505b505050611034565b600081600181518110610ff257fe5b60200260200101516000190290506000811361101057505050611034565b8089858151811061101d57fe5b602002602001018181525050505050600101610efc565b5050505050949350505050565b606061104d83856163c7565b8151806001600160401b038111801561106557600080fd5b5060405190808252806020026020018201604052801561108f578160200160208202803683370190505b50915060006001600160a01b038616156110b2576110ad87876164be565b6110b5565b60005b905060006001600160a01b038616156110d7576110d288876164be565b6110da565b60005b905060005b8381101561120b5760016001600160a01b03881661113d5761111c84632640f62c60e01b89858151811061110f57fe5b602002602001015161653d565b87848151811061112857fe5b602002602001018193508281525050506111d7565b6001600160a01b0389166111635761111c836359e9486260e01b89858151811061110f57fe5b600061117d846359e9486260e01b8a868151811061110f57fe5b9250905080156111ba57611199856309903d8b60e21b8361653d565b8885815181106111a557fe5b602002602001018194508281525050506111d5565b60008784815181106111c857fe5b6020026020010181815250505b505b8015806111f757508582815181106111eb57fe5b60200260200101516000145b15611202575061120b565b506001016110df565b50505050949350505050565b606061122383856163c7565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190618d10565b8451909150806001600160401b03811180156112ba57600080fd5b506040519080825280602002602001820160405280156112e4578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132057600080fd5b505afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190618d10565b6001600160a01b0316866001600160a01b0316141580156113fb5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ad57600080fd5b505afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190618d10565b6001600160a01b0316876001600160a01b031614155b1561140857505050611464565b60005b8181101561120b5760006114368a898b8a868151811061142757fe5b60200260200101518989616620565b905080611443575061120b565b8086838151811061145057fe5b60209081029190910101525060010161140b565b949350505050565b6040805160608181019092526114d2908061148b86896080840161a496565b604051602081830303815290604052815260200186886040516020016114b292919061a496565b60405160208183030381529060405281526020016168e181525083616a14565b95945050505050565b60008060606114ea85876163c7565b8351806001600160401b038111801561150257600080fd5b5060405190808252806020026020018201604052801561152c578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c69061155f908a908a90600401619f21565b60206040518083038186803b15801561157757600080fd5b505afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190618d10565b925060006001600160a01b038416156115cd5750600193508661166c565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906115fe908a908c90600401619f21565b60206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190618d10565b93506001600160a01b038416611665575050610e06565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd919061954e565b6116e8575050610e06565b60005b828110156117ab5760006117658a87858e602001516040516020016117139493929190619f3b565b6040516020818303038152906040528a88868f6020015160405160200161173d9493929190619f3b565b6040516020818303038152906040528a858151811061175857fe5b6020026020010151616c11565b90508085838151811061177457fe5b60200260200101818152505084828151811061178c57fe5b6020026020010151600014156117a257506117ab565b506001016116eb565b5050509450945094915050565b8051606090806001600160401b03811180156117d357600080fd5b506040519080825280602002602001820160405280156117fd578160200160208202803683370190505b5091506001600160a01b03871661181457506114d2565b60005b818110156119365760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061184857fe5b60200260200101516040516024016118639493929190619f9a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118a19190619ed8565b6000604051808303818686fa925050503d80600081146118dd576040519150601f19603f3d011682016040523d82523d6000602084013e6118e2565b606091505b5091509150600082156119065781806020019051810190611903919061956a565b90505b8061191357505050611936565b8086858151811061192057fe5b6020908102919091010152505050600101611817565b505095945050505050565b606061194d83856163c7565b8151806001600160401b038111801561196557600080fd5b5060405190808252806020026020018201604052801561198f578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b03166372ea9076620c350088888886815181106119be57fe5b60200260200101516040518563ffffffff1660e01b81526004016119e49392919061a01c565b60206040518083038187803b1580156119fc57600080fd5b5086fa93505050508015611a2d575060408051601f3d908101601f19168201909252611a2a9181019061956a565b60015b611a67573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b5050611aab565b80848381518110611a7457fe5b602002602001018181525050838281518110611a8c57fe5b602002602001015160001415611aa25750611aab565b50600101611995565b5050949350505050565b8051606090806001600160401b0381118015611ad057600080fd5b50604051908082528060200260200182016040528015611afa578160200160208202803683370190505b50915060005b81811015611c3057856001600160a01b031663d06ca61f620249f0868481518110611b2757fe5b6020026020010151886040518463ffffffff1660e01b8152600401611b4d92919061a708565b60006040518083038187803b158015611b6557600080fd5b5086fa93505050508015611b9b57506040513d6000823e601f3d908101601f19168201604052611b98919081019061951c565b60015b611bd5573d808015611bc9576040519150601f19603f3d011682016040523d82523d6000602084013e611bce565b606091505b5050611c30565b80600187510381518110611be557fe5b6020026020010151848381518110611bf957fe5b602002602001018181525050838281518110611c1157fe5b602002602001015160001415611c275750611c30565b50600101611b00565b50509392505050565b6060611c4583856163c7565b84602001516001600160a01b0316846001600160a01b0316141580611c77575084516001600160a01b03848116911614155b15610ca85781516060816001600160401b0381118015611c9657600080fd5b50604051908082528060200260200182016040528015611cc0578160200160208202803683370190505b509250611464915050565b608081015151606090806001600160401b0381118015611cea57600080fd5b50604051908082528060200260200182016040528015611d14578160200160208202803683370190505b50915060005b818110156109905783600001516001600160a01b0316633bbc8a1e85608001518381518110611d4557fe5b60200260200101518660200151876040015188606001516040518563ffffffff1660e01b8152600401611d7b949392919061a74c565b60006040518083038186803b158015611d9357600080fd5b505afa925050508015611dc857506040513d6000823e601f3d908101601f19168201604052611dc5919081019061951c565b60015b611e02573d808015611df6576040519150601f19603f3d011682016040523d82523d6000602084013e611dfb565b606091505b5050610990565b8060018660200151510381518110611e1657fe5b6020026020010151848381518110611e2a57fe5b602002602001018181525050838281518110611e4257fe5b602002602001015160001415611e585750610990565b50600101611d1a565b8051606090806001600160401b0381118015611e7c57600080fd5b50604051908082528060200260200182016040528015611ea6578160200160208202803683370190505b50915060005b81811015611aab576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611edd57fe5b6020026020010151604051602401611ef79392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f359190619ed8565b6000604051808303818686fa925050503d8060008114611f71576040519150601f19603f3d011682016040523d82523d6000602084013e611f76565b606091505b509150915060008215611f9a5781806020019051810190611f97919061956a565b90505b80868581518110611fa757fe5b602002602001018181525050858481518110611fbf57fe5b602002602001015160001415611fd757505050611aab565b505050600101611eac565b80516060908190806001600160401b0381118015611fff57600080fd5b50604051908082528060200260200182016040528015612029578160200160208202803683370190505b5091506120368686615eaf565b92508251600014156120485750610b35565b60005b81811015610b3257866001600160a01b0316639e269b68620249f087848151811061207257fe5b6020026020010151878a6040518563ffffffff1660e01b815260040161209a9392919061a721565b60006040518083038187803b1580156120b257600080fd5b5086fa935050505080156120e857506040513d6000823e601f3d908101601f191682016040526120e5919081019061951c565b60015b612116573d808015610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b8060008151811061212357fe5b602002602001015184838151811061213757fe5b60200260200101818152505083828151811061214f57fe5b6020026020010151600014156121655750610b32565b5060010161204b565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106121a557fe5b6020908102919091010152606060006040519080825280602002602001820160405280156121dd578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156122ce576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a120906122369089906001908890889060040161a0bb565b60006040518083038187803b15801561224e57600080fd5b5086fa9350505050801561228457506040513d6000823e601f3d908101601f191682016040526122819190810190619582565b60015b6122be573d8080156122b2576040519150601f19603f3d011682016040523d82523d6000602084013e6122b7565b606091505b50506122c9565b935061146492505050565b6123e0565b87606001516001600160a01b0316856001600160a01b03161415612324576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090612236908a906001908890889060040161a0bb565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090612364908a90600190889088908d9084908490849060040161a0fe565b60006040518083038187803b15801561237c57600080fd5b5086fa935050505080156123b257506040513d6000823e601f3d908101601f191682016040526123af9190810190619582565b60015b6122be573d808015611034576040519150601f19603f3d011682016040523d82523d6000602084013e611034565b505050949350505050565b606080606061246c866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124649190618d10565b866000616d4a565b905083516001600160401b038111801561248557600080fd5b506040519080825280602002602001820160405280156124af578160200160208202803683370190505b50915083516001600160401b03811180156124c957600080fd5b506040519080825280602002602001820160405280156124fd57816020015b60608152602001906001900390816124e85790505b50925060005b8451811015610b325760606000805b84518110156125ee57606061253a8a87848151811061252d57fe5b60200260200101516171e0565b90508a6001600160a01b031663cdca1753620493e0838c898151811061255c57fe5b60200260200101516040518463ffffffff1660e01b815260040161258192919061a35c565b602060405180830381600088803b15801561259b57600080fd5b5087f1935050505080156125cc575060408051601f3d908101601f191682019092526125c99181019061956a565b60015b6125d5576125e5565b8084116125e3578093508194505b505b50600101612512565b50806125fb575050610b32565b8085848151811061260857fe5b6020026020010181815250508186848151811061262157fe5b60209081029190910101525050600101612503565b80516060908590806001600160401b038111801561265357600080fd5b5060405190808252806020026020018201604052801561267d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906126ad908990600401619ef4565b60206040518083038186803b1580156126c557600080fd5b505afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd919061954e565b15806127825750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612730908890600401619ef4565b60206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061954e565b155b1561278e575050611464565b61279661855f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906127c2908a90600401619ef4565b60206040518083038186803b1580156127da57600080fd5b505afa1580156127ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612812919061956a565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612840908990600401619ef4565b60206040518083038186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612890919061956a565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906128c1908a90600401619ef4565b60206040518083038186803b1580156128d957600080fd5b505afa1580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612911919061956a565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690612944908990600401619ef4565b60206040518083038186803b15801561295c57600080fd5b505afa158015612970573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612994919061956a565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061956a565b608082015260005b8281101561120b57612a4182602001516003670de0b6b3a764000081612a3857fe5b0460010161733b565b868281518110612a4d57fe5b60200260200101511115612a605761120b565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c8881518110612a9357fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401612ac19695949392919061a7c5565b60206040518083038187803b158015612ad957600080fd5b5086fa93505050508015612b0a575060408051601f3d908101601f19168201909252612b079181019061956a565b60015b612b44573d808015612b38576040519150601f19603f3d011682016040523d82523d6000602084013e612b3d565b606091505b505061120b565b8251612b5c906002670de0b6b3a76400005b0461733b565b811115612b69575061120b565b80868381518110612b7657fe5b602002602001018181525050858281518110612b8e57fe5b602002602001015160001415612ba4575061120b565b50600101612a16565b6060806060612bee866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561242c57600080fd5b90506060612bfb86617398565b905084516001600160401b0381118015612c1457600080fd5b50604051908082528060200260200182016040528015612c3e578160200160208202803683370190505b50925084516001600160401b0381118015612c5857600080fd5b50604051908082528060200260200182016040528015612c8c57816020015b6060815260200190600190039081612c775790505b50935060005b8551811015612de75760606000805b8551811015612d9f576060612cd186612ccc898581518110612cbf57fe5b6020026020010151617430565b6171e0565b90508b6001600160a01b0316632f80bb1d620493e0838d8981518110612cf357fe5b60200260200101516040518463ffffffff1660e01b8152600401612d1892919061a35c565b602060405180830381600088803b158015612d3257600080fd5b5087f193505050508015612d63575060408051601f3d908101601f19168201909252612d609181019061956a565b60015b612d6c57612d96565b831580612d795750808410155b15612d9457809350612d918c89858151811061252d57fe5b94505b505b50600101612ca1565b5080612dac575050612de7565b80868481518110612db957fe5b60200260200101818152505081878481518110612dd257fe5b60209081029190910101525050600101612c92565b505050935093915050565b6040805160608181019092526114d29080612e11868960808401619f21565b60405160208183030381529060405281526020018688604051602001612e38929190619f21565b60405160208183030381529060405281526020016174c881525083616a14565b6060612e65848484610b3d565b905060005b8451811015610ca857818181518110612e7f57fe5b6020026020010151600014612f0557612eec828281518110612e9d57fe5b6020026020010151868381518110612eb157fe5b6020026020010151606001516001600160801b0316878481518110612ed257fe5b6020026020010151604001516001600160801b03166175dc565b828281518110612ef857fe5b6020026020010181815250505b600101612e6a565b6060816001600160401b0381118015612f2557600080fd5b50604051908082528060200260200182016040528015612f5f57816020015b612f4c61858e565b815260200190600190039081612f445790505b50905060005b808314613067576001828281518110612f7a57fe5b602090810291909101810151911515910152838382818110612f9857fe5b9050602002810190612faa919061a7ed565b15159050612fb75761305f565b30848483818110612fc457fe5b9050602002810190612fd6919061a7ed565b604051612fe4929190619ec8565b6000604051808303816000865af19150503d8060008114613021576040519150601f19603f3d011682016040523d82523d6000602084013e613026565b606091505b5083838151811061303357fe5b602002602001015160200184848151811061304a57fe5b60209081029190910101519190915290151590525b600101612f65565b5092915050565b606081516001600160401b038111801561308757600080fd5b506040519080825280602002602001820160405280156130b1578160200160208202803683370190505b50905060005b8251811461315a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106130f557fe5b60200260200101516001600160a01b0316146131355761313083828151811061311a57fe5b60200260200101516001600160a01b0316617600565b613138565b60125b60ff1682828151811061314757fe5b60209081029190910101526001016130b7565b50919050565b60006060809450945094915050565b606061317b83856163c7565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156131bf57600080fd5b505afa1580156131d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f79190618d10565b8451909150806001600160401b038111801561321257600080fd5b5060405190808252806020026020018201604052801561323c578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561327857600080fd5b505afa15801561328c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b09190618d10565b6001600160a01b0316866001600160a01b0316141580156133535750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333d9190618d10565b6001600160a01b0316876001600160a01b031614155b1561336057505050611464565b60005b8181101561120b57600061338e8a898b8a868151811061337f57fe5b602002602001015189896176a2565b90508061339b575061120b565b808683815181106133a857fe5b602090810291909101015250600101613363565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b81526004016133f3919061a327565b60206040518083038186803b15801561340b57600080fd5b505afa15801561341f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613443919061956a565b8651604051631e01043960e01b81526001600160a01b0390911690631e0104399061347690600f89900b9060040161a327565b60206040518083038186803b15801561348e57600080fd5b505afa1580156134a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c6919061956a565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b81526004016134fe919061a327565b60806040518083038186803b15801561351657600080fd5b505afa15801561352a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354e9190619b7f565b935050505080601203600a0a828161356257fe5b85519190049250806001600160401b038111801561357f57600080fd5b506040519080825280602002602001820160405280156135a9578160200160208202803683370190505b50935060005b8181101561120b57600060608a600001516001600160a01b0316620927c08c602001518c8c8c88815181106135e057fe5b60200260200101516040516024016135fa9392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516136389190619ed8565b6000604051808303818686fa925050503d8060008114613674576040519150601f19603f3d011682016040523d82523d6000602084013e613679565b606091505b50915091506000821561369d578180602001905181019061369a919061956a565b90505b8681106136d757835b858110156136ce57878982815181106136bb57fe5b60209081029190910101526001016136a6565b5050505061120b565b808885815181106136e457fe5b6020026020010181815250508784815181106136fc57fe5b6020026020010151600014156137145750505061120b565b5050506001016135af565b6137276185a6565b61372f6185a6565b600080805b875181146138345761377b602089838151811061374d57fe5b60200260200101515103878a848151811061376457fe5b60200260200101516179349092919063ffffffff16565b60006060306001600160a01b03168a848151811061379557fe5b60200260200101516040516137aa9190619ed8565b6000604051808303816000865af19150503d80600081146137e7576040519150601f19603f3d011682016040523d82523d6000602084013e6137ec565b606091505b5091509150811561382a57600061381060208351038361794490919063ffffffff16565b90508481111561382857838852602088018290529350835b505b5050600101613734565b5080613840575061392f565b60005b8651811461392c57613873602088838151811061385c57fe5b602002602001015151038389848151811061376457fe5b60006060306001600160a01b031689848151811061388d57fe5b60200260200101516040516138a29190619ed8565b6000604051808303816000865af19150503d80600081146138df576040519150601f19603f3d011682016040523d82523d6000602084013e6138e4565b606091505b5091509150811561392257600061390860208351038361794490919063ffffffff16565b90508581111561392057838752602087018290529450845b505b5050600101613843565b50505b93509350939050565b60408401516060906001600160e01b0319166139ba5760408051606081019091526139b3908061396c86896080840161a496565b6040516020818303038152906040528152602001868860405160200161399392919061a496565b604051602081830303815290604052815260200161795081525083616a14565b9050611464565b8151806001600160401b03811180156139d257600080fd5b506040519080825280602002602001820160405280156139fc578160200160208202803683370190505b50915060005b81811015611aab576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110613a3357fe5b6020026020010151604051602401613a4d9392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613a8b9190619ed8565b6000604051808303818686fa925050503d8060008114613ac7576040519150601f19603f3d011682016040523d82523d6000602084013e613acc565b606091505b509150915060008215613af05781806020019051810190613aed919061956a565b90505b80868581518110613afd57fe5b602002602001018181525050858481518110613b1557fe5b602002602001015160001415613b2d57505050611aab565b505050600101613a02565b80516060908590806001600160401b0381118015613b5557600080fd5b50604051908082528060200260200182016040528015613b7f578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490613baf908990600401619ef4565b60206040518083038186803b158015613bc757600080fd5b505afa158015613bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bff919061954e565b1580613c845750604051630bcded8960e21b81526001600160a01b03831690632f37b62490613c32908890600401619ef4565b60206040518083038186803b158015613c4a57600080fd5b505afa158015613c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c82919061954e565b155b15613c90575050611464565b613c9861855f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90613cc4908a90600401619ef4565b60206040518083038186803b158015613cdc57600080fd5b505afa158015613cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d14919061956a565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90613d42908990600401619ef4565b60206040518083038186803b158015613d5a57600080fd5b505afa158015613d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d92919061956a565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690613dc3908a90600401619ef4565b60206040518083038186803b158015613ddb57600080fd5b505afa158015613def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e13919061956a565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613e46908990600401619ef4565b60206040518083038186803b158015613e5e57600080fd5b505afa158015613e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e96919061956a565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015613ed857600080fd5b505afa158015613eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f10919061956a565b608082015260005b8281101561120b578151613f36906002670de0b6b3a7640000612b56565b868281518110613f4257fe5b60200260200101511115613f555761120b565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110613f8857fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401613fb69695949392919061a7c5565b60206040518083038187803b158015613fce57600080fd5b5086fa93505050508015613fff575060408051601f3d908101601f19168201909252613ffc9181019061956a565b60015b61402d573d808015612b38576040519150601f19603f3d011682016040523d82523d6000602084013e612b3d565b8086838151811061403a57fe5b60200260200101818152505085828151811061405257fe5b602002602001015160001415614068575061120b565b50600101613f18565b6000808351600381111561408157fe5b1480614099575060018351600381111561409757fe5b145b806140af575060408401516001600160801b0316155b806140c5575060608401516001600160801b0316155b156140d2575060006141b1565b6140da6185c0565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b815260040161410b92919061a6b4565b60a06040518083038186803b15801561412357600080fd5b505afa158015614137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415b9190619abd565b9194509250905060018360200151600481111561417457fe5b14158061417f575080155b80614192575086516001600160a01b0316155b156141a357600093505050506141b1565b506001600160801b03169150505b9392505050565b60006060806141c785876163c7565b6141d28787876179a4565b9250826141de57610e06565b60405163276fdad960e11b81523090634edfb5b290614207908a9087908b908b9060040161a67b565b60006040518083038186803b15801561421f57600080fd5b505afa158015614233573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261425b9190810190619582565b8760800181905250866080015191506142d26040518060600160405280878a60405160200161428b92919061a195565b6040516020818303038152906040528152602001888a6040516020016142b292919061a195565b6040516020818303038152906040528152602001617b0b81525085616a14565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b815260040161430f929190619f21565b60206040518083038186803b15801561432757600080fd5b505afa15801561433b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435f9190618d10565b90506001600160a01b038116614379576000915050611464565b60006001600160a01b0386161561440b576040516370a0823160e01b81526001600160a01b038716906370a08231906143b6908590600401619ef4565b60206040518083038186803b1580156143ce57600080fd5b505afa1580156143e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614406919061956a565b614417565b816001600160a01b0316315b90508381101561442c57600092505050611464565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090614461908a908a908a9060040161a01c565b60206040518083038187803b15801561447957600080fd5b5086fa935050505080156144aa575060408051601f3d908101601f191682019092526144a79181019061956a565b60015b6144ea573d8080156144d8576040519150601f19603f3d011682016040523d82523d6000602084013e6144dd565b606091505b5060009350505050611464565b9250611464915050565b606061450083856163c7565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061453657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061456457fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561459457600080fd5b506040519080825280602002602001820160405280156145be578160200160208202803683370190505b5093506145c9618538565b6145d16163fd565b905060005b828110156110345760606145f08b898481518110610f1657fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906146269060019085908a90899060040161a3ea565b600060405180830381600087803b15801561464057600080fd5b505af192505050801561467557506040513d6000823e601f3d908101601f1916820160405261467291908101906193ca565b60015b6146a3573d808015610fd6576040519150601f19603f3d011682016040523d82523d6000602084013e610fdb565b6000816000815181106146b257fe5b60200260200101519050600081136146cc57505050611034565b808985815181106146d957fe5b6020026020010181815250505050506001016145d6565b8051606090806001600160401b038111801561470b57600080fd5b50604051908082528060200260200182016040528015614735578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663343fbcdd62061a80888888868151811061476457fe5b60200260200101516040518563ffffffff1660e01b815260040161478a9392919061a01c565b60206040518083038187803b1580156147a257600080fd5b5086fa935050505080156147d3575060408051601f3d908101601f191682019092526147d09181019061956a565b60015b614801573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b8084838151811061480e57fe5b60200260200101818152505083828151811061482657fe5b60200260200101516000141561483c5750611aab565b5060010161473b565b600080606061485485876163c7565b8351806001600160401b038111801561486c57600080fd5b50604051908082528060200260200182016040528015614896578160200160208202803683370190505b5091506148a589898989617bf2565b945092506001600160a01b0383166148bd5750614977565b60005b8181101561497457600061492e8986886040516020016148e293929190619fc4565b60405160208183030381529060405289878960405160200161490693929190619fc4565b60405160208183030381529060405289858151811061492157fe5b6020026020010151617d47565b90508084838151811061493d57fe5b60200260200101818152505083828151811061495557fe5b60200260200101516000141561496b5750614974565b506001016148c0565b50505b955095509592505050565b606061498e83856163c7565b8151806001600160401b03811180156149a657600080fd5b506040519080825280602002602001820160405280156149d0578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663144a2752620f424087898886815181106149ff57fe5b60200260200101516040518563ffffffff1660e01b8152600401614a259392919061a01c565b60206040518083038187803b158015614a3d57600080fd5b5086fa93505050508015614a6e575060408051601f3d908101601f19168201909252614a6b9181019061956a565b60015b614a9c573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b80848381518110614aa957fe5b602002602001018181525050838281518110614ac157fe5b602002602001015160001415614ad75750611aab565b506001016149d6565b60006060614aee84866163c7565b8251806001600160401b0381118015614b0657600080fd5b50604051908082528060200260200182016040528015614b30578160200160208202803683370190505b50915060005b81811015614ba5576000614b5f898989898681518110614b5257fe5b60200260200101516142de565b905080848381518110614b6e57fe5b602002602001018181525050838281518110614b8657fe5b602002602001015160001415614b9c5750614ba5565b50600101614b36565b5060405163901754d760e01b81526001600160a01b0388169063901754d790614bd49089908990600401619f21565b60206040518083038186803b158015614bec57600080fd5b505afa158015614c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c249190618d10565b92505094509492505050565b6040805160608181019092526114d29080614c4f868960808401619f21565b60405160208183030381529060405281526020018688604051602001614c76929190619f21565b6040516020818303038152906040528152602001617e3981525083616a14565b606082516001600160401b0381118015614caf57600080fd5b50604051908082528060200260200182016040528015614cd9578160200160208202803683370190505b50905060005b83518114613067577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110614d1d57fe5b60200260200101516001600160a01b031614614d6757614d6283858381518110614d4357fe5b60200260200101516001600160a01b0316617e8090919063ffffffff16565b614d73565b826001600160a01b0316315b828281518110614d7f57fe5b6020908102919091010152600101614cdf565b6040805160608181019092526114d29080614db1868960808401619f21565b60405160208183030381529060405281526020018688604051602001614dd8929190619f21565b6040516020818303038152906040528152602001617f4a81525083616a14565b6060614e0483856163c7565b8151806001600160401b0381118015614e1c57600080fd5b50604051908082528060200260200182016040528015614e46578160200160208202803683370190505b50915060006001600160a01b03861615614e6957614e6487876164be565b614e6c565b60005b905060006001600160a01b03861615614e8e57614e8988876164be565b614e91565b60005b905060005b8381101561120b5760016001600160a01b038816614ee757614ec6846395b68fe760e01b89858151811061110f57fe5b878481518110614ed257fe5b60200260200101819350828152505050614f81565b6001600160a01b038916614f0d57614ec68363cd7724c360e01b89858151811061110f57fe5b6000614f27856395b68fe760e01b8a868151811061110f57fe5b925090508015614f6457614f438463cd7724c360e01b8361653d565b888581518110614f4f57fe5b60200260200101819450828152505050614f7f565b6000878481518110614f7257fe5b6020026020010181815250505b505b801580614fa15750858281518110614f9557fe5b60200260200101516000145b15614fac575061120b565b50600101614e96565b8051606090806001600160401b0381118015614fd057600080fd5b50604051908082528060200260200182016040528015614ffa578160200160208202803683370190505b50915060005b81811015611c3057856001600160a01b0316631f00ca74620249f086848151811061502757fe5b6020026020010151886040518463ffffffff1660e01b815260040161504d92919061a708565b60006040518083038187803b15801561506557600080fd5b5086fa9350505050801561509b57506040513d6000823e601f3d908101601f19168201604052615098919081019061951c565b60015b6150c9573d808015611bc9576040519150601f19603f3d011682016040523d82523d6000602084013e611bce565b806000815181106150d657fe5b60200260200101518483815181106150ea57fe5b60200260200101818152505083828151811061510257fe5b6020026020010151600014156151185750611c30565b50600101615000565b606061512d83856163c7565b8151806001600160401b038111801561514557600080fd5b5060405190808252806020026020018201604052801561516f578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663ff1fd974620f4240888888868151811061519e57fe5b60200260200101516040518563ffffffff1660e01b81526004016151c49392919061a01c565b60206040518083038187803b1580156151dc57600080fd5b5086fa9350505050801561520d575060408051601f3d908101601f1916820190925261520a9181019061956a565b60015b61523b573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b8084838151811061524857fe5b60200260200101818152505083828151811061526057fe5b6020026020010151600014156152765750611aab565b50600101615175565b600060608061528e85876163c7565b6152998787876179a4565b9250826152a557610e06565b60405163276fdad960e11b81523090634edfb5b2906152ce908a9087908b908b9060040161a67b565b60006040518083038186803b1580156152e657600080fd5b505afa1580156152fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526153229190810190619582565b608088018190528451909250806001600160401b038111801561534457600080fd5b5060405190808252806020026020018201604052801561536e578160200160208202803683370190505b50915060005b81811015615459576000306001600160a01b031663f1ed7fa48b8b8b8b878151811061539c57fe5b60200260200101516040518563ffffffff1660e01b81526004016153c3949392919061a645565b60206040518083038186803b1580156153db57600080fd5b505afa1580156153ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615413919061956a565b90508084838151811061542257fe5b60200260200101818152505083828151811061543a57fe5b6020026020010151600014156154505750615459565b50600101615374565b50509450945094915050565b600080606061547485876163c7565b61548088888888617bf2565b935091506001600160a01b03821661549757614977565b8351806001600160401b03811180156154af57600080fd5b506040519080825280602002602001820160405280156154d9578160200160208202803683370190505b50604080516060810190915290925061554690806154fd8987891560808501619fc4565b604051602081830303815290604052815260200189868860405160200161552693929190619fc4565b6040516020818303038152906040528152602001617d4781525086616a14565b915050955095509592505050565b600080606061556385876163c7565b8351806001600160401b038111801561557b57600080fd5b506040519080825280602002602001820160405280156155a5578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906155d8908a908a90600401619f21565b60206040518083038186803b1580156155f057600080fd5b505afa158015615604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156289190618d10565b925060006001600160a01b03841615615646575060019350866156e5565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690615677908a908c90600401619f21565b60206040518083038186803b15801561568f57600080fd5b505afa1580156156a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156c79190618d10565b93506001600160a01b0384166156de575050610e06565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561571e57600080fd5b505afa158015615732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615756919061954e565b615761575050610e06565b6157d960405180606001604052808987858e6020015160405160200161578a9493929190619f3b565b60405160208183030381529060405281526020018a87858e602001516040516020016157b99493929190619f3b565b6040516020818303038152906040528152602001616c1181525087616a14565b925050509450945094915050565b606083516001600160401b038111801561580057600080fd5b5060405190808252806020026020018201604052801561582a578160200160208202803683370190505b50905060005b84518114610ca8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061586e57fe5b60200260200101516001600160a01b0316146158ba576158b5848487848151811061589557fe5b60200260200101516001600160a01b0316617fff9092919063ffffffff16565b6158bd565b60005b8282815181106158c957fe5b6020908102919091010152600101615830565b8051606090806001600160401b03811180156158f757600080fd5b50604051908082528060200260200182016040528015615921578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663838e6a22620493e0888888868151811061595057fe5b60200260200101516040518563ffffffff1660e01b81526004016159769392919061a01c565b60206040518083038187803b15801561598e57600080fd5b5086fa935050505080156159bf575060408051601f3d908101601f191682019092526159bc9181019061956a565b60015b6159ed573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b808483815181106159fa57fe5b60200260200101818152505050600101615927565b600084608001515160001415615a2757506000611464565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b031614615a615786615a77565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615a9a5786615ab0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b8152600401615ad895949392919061a040565b60206040518083038187803b158015615af057600080fd5b5086fa93505050508015615b21575060408051601f3d908101601f19168201909252615b1e9181019061956a565b60015b615b5f573d808015615b4f576040519150601f19603f3d011682016040523d82523d6000602084013e615b54565b606091505b506000915050611464565b6000615b6a856180cb565b60ff1690506000615b7a876180cb565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281615b9b57fe5b0481615ba357fe5b049350505050611464565b60006060615bbc84866163c7565b8251806001600160401b0381118015615bd457600080fd5b50604051908082528060200260200182016040528015615bfe578160200160208202803683370190505b509150615c6960405180606001604052808988604051602001615c22929190619f21565b60405160208183030381529060405281526020018989604051602001615c49929190619f21565b60405160208183030381529060405281526020016180d681525085616a14565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790614bd49089908990600401619f21565b615ca26185a6565b615caa6185a6565b6000198060005b86518114615da657615ce16020888381518110615cca57fe5b602002602001015151038789848151811061376457fe5b60006060306001600160a01b0316898481518110615cfb57fe5b6020026020010151604051615d109190619ed8565b6000604051808303816000865af19150503d8060008114615d4d576040519150601f19603f3d011682016040523d82523d6000602084013e615d52565b606091505b50915091508115615d9c576000615d7660208351038361794490919063ffffffff16565b9050600081118015615d8757508481105b15615d9a57838752602087018290529350835b505b5050600101615cb1565b50600019811415615db7575061392f565b60005b8751811461392c57615dea6020898381518110615dd357fe5b60200260200101515103838a848151811061376457fe5b60006060306001600160a01b03168a8481518110615e0457fe5b6020026020010151604051615e199190619ed8565b6000604051808303816000865af19150503d8060008114615e56576040519150601f19603f3d011682016040523d82523d6000602084013e615e5b565b606091505b50915091508115615ea5576000615e7f60208351038361794490919063ffffffff16565b9050600081118015615e9057508581105b15615ea357838852602088018290529450845b505b5050600101615dba565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015615eec57600080fd5b505afa158015615f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615f249190618d10565b905060018351036001600160401b0381118015615f4057600080fd5b50604051908082528060200260200182016040528015615f6a578160200160208202803683370190505b50915060005b825181101561618c576060826001600160a01b0316635b1dc86f620249f0878581518110615f9a57fe5b6020026020010151888660010181518110615fb157fe5b60200260200101516040518463ffffffff1660e01b8152600401615fd6929190619f21565b60006040518083038187803b158015615fee57600080fd5b5086fa9350505050801561602457506040513d6000823e601f3d908101601f1916820160405261602191908101906190c5565b60015b616073573d808015616052576040519150601f19603f3d011682016040523d82523d6000602084013e616057565b606091505b5050604080516000815260208101909152935061618f92505050565b60006001825110156160975760405162461bcd60e51b815260040161092f9061a5a6565b60005b82518110156161805760008382815181106160b157fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156160f157600080fd5b505afa158015616105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616129919061956a565b9050828111156161775780925083828151811061614257fe5b602002602001015188878151811061615657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161609a565b50505050600101615f70565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156161e957600080fd5b505afa1580156161fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616221919061956a565b6040518263ffffffff1660e01b815260040161623d919061a327565b60206040518083038186803b15801561625557600080fd5b505afa158015616269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061628d9190618d10565b9150856020015151600014156162a2576163be565b6000805b8760200151518110156163bb576002886020015182815181106162c557fe5b60200260200101515110156162d9576163b3565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106162fc57fe5b60200260200101518860018a51038151811061631457fe5b60200260200101516040518463ffffffff1660e01b815260040161633992919061a1de565b60206040518083038187803b15801561635157600080fd5b5086fa93505050508015616382575060408051601f3d908101601f1916820190925261637f9181019061956a565b60015b61638b576163b3565b828111156163b157809250886020015182815181106163a657fe5b602002602001015193505b505b6001016162a6565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156163f95760405162461bcd60e51b815260040161092f9061a4f2565b5050565b616405618538565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61644e6185e2565b8152602001906001900390816164465790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106164ac57fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906164ed908590600401619ef4565b60206040518083038186803b15801561650557600080fd5b505afa158015616519573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b19190618d10565b6000806001600160a01b03851661655357610b35565b6060856001600160a01b0316620249f08686604051602401616575919061a327565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516165b39190619ed8565b6000604051808303818686fa925050503d80600081146165ef576040519150601f19603f3d011682016040523d82523d6000602084013e6165f4565b606091505b50909250905081156166175780806020019051810190616614919061956a565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401616656919061a327565b60a06040518083038186803b15801561666e57600080fd5b505afa158015616682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906166a69190619bb4565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b031614156167ce5760006166e58964e8d4a51000618126565b905060006167096b033b2e3c9fd0803ce8000000616703888561815c565b90618126565b905084811061672157600096505050505050506168d7565b60006167b0670de0b6b3a76400006167aa8c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561676b57600080fd5b505afa15801561677f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906167a3919061956a565b8690618126565b90618178565b905060006167be84836181a2565b98506168d7975050505050505050565b8a604001516001600160a01b03168a6001600160a01b031614156168ce578784811115616803576000955050505050506168d7565b600061681f6b033b2e3c9fd0803ce800000061670388856181a2565b905083811161683757600096505050505050506168d7565b60006168bc8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561687557600080fd5b505afa158015616889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906168ad919061956a565b670de0b6b3a76400009061815c565b905060006167be826167aa8688618126565b60009450505050505b9695505050505050565b6000806168ec618614565b858060200190518101906169009190619616565b9150915060008580602001905181019061691a91906195fa565b905060006060306322db5ed160e21b8587866169358c6181c1565b604051602401616948949392919061a5dd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516169869190619ed8565b600060405180830381855afa9150503d80600081146169c1576040519150601f19603f3d011682016040523d82523d6000602084013e6169c6565b606091505b5091509150816169de576000955050505050506141b1565b808060200190518101906169f2919061951c565b6000815181106169fe57fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015616a2d57600080fd5b50604051908082528060200260200182016040528015616a57578160200160208202803683370190505b509050815160001415616a695761618f565b6000616a9a8460000151856020015185600081518110616a8557fe5b6020026020010151876040015163ffffffff16565b905080616aa7575061618f565b6000616ac48560200151866000015184886040015163ffffffff16565b905080616ad257505061618f565b60005b8451811015616c085760005b6005811015616bca57616b08868381518110616af957fe5b60200260200101518486618202565b935083616b1457616bca565b616b2361271561271086618202565b935083616b2f57616bca565b6000616b4c88602001518960000151878b6040015163ffffffff16565b905080616b595750616bca565b809350868381518110616b6857fe5b60200260200101518410616bc1576000878481518110616b8457fe5b6020026020010151612710898681518110616b9b57fe5b602002602001015187030281616bad57fe5b04905060058111616bbf575050616bca565b505b50600101616ae1565b50616be9858281518110616bda57fe5b60200260200101518385618202565b848281518110616bf557fe5b6020908102919091010152600101616ad5565b50505092915050565b600080600080600087806020019051810190616c2d9190618d65565b9350935093509350816001600160a01b0316846001600160a01b03161415616d17576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090616c80908a9060040161a327565b60206040518083038187803b158015616c9857600080fd5b5086fa93505050508015616cc9575060408051601f3d908101601f19168201909252616cc69181019061956a565b60015b616d0b573d808015616cf7576040519150601f19603f3d011682016040523d82523d6000602084013e616cfc565b606091505b506000955050505050506141b1565b94506141b19350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090616c809087908b90600401619f08565b60606002828451031015616d705760405162461bcd60e51b815260040161092f9061a4ae565b616d78618634565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110616dcc57fe5b602002602001015190506000878760010181518110616de757fe5b6020026020010151905060005b6003811015616edc5760008a6001600160a01b0316631698ee8285858a8660038110616e1c57fe5b60200201516040518463ffffffff1660e01b8152600401616e3f9392919061a36f565b60206040518083038186803b158015616e5757600080fd5b505afa158015616e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e8f9190618d10565b9050616e9a8161825a565b15616ed35780868680600101975081518110616eb257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101616df4565b50505080616eec575050506141b1565b8551856002011415616fe257806001600160401b0381118015616f0e57600080fd5b50604051908082528060200260200182016040528015616f4257816020015b6060815260200190600190039081616f2d5790505b50935060005b81811015616fd957604080516001808252818301909252906020808301908036833701905050858281518110616f7a57fe5b6020026020010181905250828181518110616f9157fe5b6020026020010151858281518110616fa557fe5b6020026020010151600081518110616fb957fe5b6001600160a01b0390921660209283029190910190910152600101616f48565b505050506141b1565b6060616ff2888888600101616d4a565b905080516000141561700757505050506141b1565b805182026001600160401b038111801561702057600080fd5b5060405190808252806020026020018201604052801561705457816020015b606081526020019060019003908161703f5790505b50945060005b828110156171d45760005b82518110156171cb57825182810282019084908390811061708257fe5b6020026020010151516001016001600160401b03811180156170a357600080fd5b506040519080825280602002602001820160405280156170cd578160200160208202803683370190505b508882815181106170da57fe5b60200260200101819052508583815181106170f157fe5b602002602001015188828151811061710557fe5b602002602001015160008151811061711957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061714857fe5b6020026020010151518110156171c15784838151811061716457fe5b6020026020010151818151811061717757fe5b602002602001015189838151811061718b57fe5b602002602001015182600101815181106171a157fe5b6001600160a01b039092166020928302919091019091015260010161713c565b5050600101617065565b5060010161705a565b50505050509392505050565b606060028351101580156171f8575081516001018351145b6172145760405162461bcd60e51b815260040161092f9061a537565b81516003028351601402016001600160401b038111801561723457600080fd5b506040519080825280601f01601f19166020018201604052801561725f576020820181803683370190505b5090506020810160005b845181101561618c57801561730e57600084600183038151811061728957fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156172c957600080fd5b505afa1580156172dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173019190619b39565b60e81b8352506003909101905b600085828151811061731c57fe5b602090810291909101015160601b835250601490910190600101617269565b6000828202831580159061735857508284828161735457fe5b0414155b1561736757600091505061618f565b6706f05b59d3b200008101818110156173855760009250505061618f565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156173b157600080fd5b506040519080825280602002602001820160405280156173db578160200160208202803683370190505b50905060005b825181101561315a578260018285510303815181106173fc57fe5b602002602001015182828151811061741057fe5b6001600160a01b03909216602092830291909101909101526001016173e1565b606081516001600160401b038111801561744957600080fd5b50604051908082528060200260200182016040528015617473578160200160208202803683370190505b50905060005b825181101561315a5782600182855103038151811061749457fe5b60200260200101518282815181106174a857fe5b6001600160a01b0390921660209283029190910190910152600101617479565b6000806000858060200190518101906174e19190618d2c565b915091506000858060200190518101906174fb9190618d10565b90503063e8e4af0983858461750f8a6181c1565b6040518563ffffffff1660e01b815260040161752e9493929190619f66565b60006040518083038186803b15801561754657600080fd5b505afa92505050801561757b57506040513d6000823e601f3d908101601f19168201604052617578919081019061951c565b60015b6175bc573d8080156175a9576040519150601f19603f3d011682016040523d82523d6000602084013e6175ae565b606091505b5060009450505050506141b1565b806000815181106175c957fe5b60200260200101519450505050506141b1565b6000611464836167aa6175f08260016181a2565b6175fa8887618126565b9061815c565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b81525060405161763e9190619ed8565b600060405180830381855afa9150503d8060008114617679576040519150601f19603f3d011682016040523d82523d6000602084013e61767e565b606091505b509150915081801561769257506020815110155b1561099057611464816000617944565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016176d8919061a327565b60a06040518083038186803b1580156176f057600080fd5b505afa158015617704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177289190619bb4565b945094505050925089604001516001600160a01b0316886001600160a01b0316141561783f57600087905060006177d8886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561779157600080fd5b505afa1580156177a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177c9919061956a565b670de0b6b3a7640000906181a2565b905060006177f2826167aa85670de0b6b3a7640000618126565b905060006178106b033b2e3c9fd0803ce8000000616703898561815c565b90508581106178295760009750505050505050506168d7565b60006167be60016175fa8564e8d4a51000618178565b89604001516001600160a01b0316896001600160a01b0316141561792457600061786e8864e8d4a51000618126565b905060006178ae886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561687557600080fd5b905060006178c8670de0b6b3a76400006167aa8585618126565b9050858111156178e157600096505050505050506168d7565b60006178fd6b033b2e3c9fd0803ce800000061670389856181a2565b90508481116179165760009750505050505050506168d7565b5095506168d7945050505050565b5060009998505050505050505050565b61793f838383618466565b505050565b60006141b1838361848d565b60008061795b618614565b8580602001905181019061796f9190619616565b9150915060008580602001905181019061798991906195fa565b9050600060603063205e01d760e11b8587866169358c6181c1565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b0316146179e257866179f8565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614617a1b5786617a31565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152617a6592919060019060248101619fe8565b60006040518083038186803b158015617a7d57600080fd5b505afa158015617a91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617ab9919081019061915d565b505090508051866000015110617ad55750600091506141b19050565b80866000015181518110617ae557fe5b6020026020010151925060f883901c60001c60bb1415611c305750600091506141b19050565b600080617b16618652565b84806020019051810190617b2a9190618e13565b91509150600086806020019051810190617b449190618e13565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490617b71908590859088908b9060040161a645565b60206040518083038186803b158015617b8957600080fd5b505afa925050508015617bb9575060408051601f3d908101601f19168201909252617bb69181019061956a565b60015b617be7573d8080156175a9576040519150601f19603f3d011682016040523d82523d6000602084013e6175ae565b93506141b192505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401617c25929190619f21565b60006040518083038186803b158015617c3d57600080fd5b505afa158015617c51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617c7991908101906190c5565b905060019150805160001415617d12576040516315e8a07760e21b81526001600160a01b038816906357a281dc90617cb79087908990600401619f21565b60006040518083038186803b158015617ccf57600080fd5b505afa158015617ce3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617d0b91908101906190c5565b9050600091505b80518610617d275760008092509250506163be565b808681518110617d3357fe5b602002602001015192505094509492505050565b60008060008086806020019051810190617d619190618dc3565b9250925092508015617e0557604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e090617da1906000908a90600401619f08565b604080518083038187803b158015617db857600080fd5b5086fa93505050508015617de9575060408051601f3d908101601f19168201909252617de691810190619b5c565b60015b617df957600093505050506141b1565b5093506141b192505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e090617da1906000908a90600401619f08565b600080600085806020019051810190617e529190618d2c565b91509150600085806020019051810190617e6c9190618d10565b9050306330d6570d83858461750f8a6181c1565b6000806060846001600160a01b03166370a0823160e01b85604051602401617ea89190619ef4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617ee69190619ed8565b600060405180830381855afa9150503d8060008114617f21576040519150601f19603f3d011682016040523d82523d6000602084013e617f26565b606091505b5091509150818015617f3a57506020815110155b1561618c576114d2816000617944565b600080600085806020019051810190617f639190618d2c565b91509150600085806020019051810190617f7d9190618d10565b90503063a469841762061a80848685617f958b6181c1565b6040518663ffffffff1660e01b8152600401617fb49493929190619f66565b60006040518083038187803b158015617fcc57600080fd5b5086fa9350505050801561757b57506040513d6000823e601f3d908101601f19168201604052617578919081019061951c565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401618029929190619f21565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516180679190619ed8565b600060405180830381855afa9150503d80600081146180a2576040519150601f19603f3d011682016040523d82523d6000602084013e6180a7565b606091505b50915091508180156180bb57506020815110155b15611c30576168d7816000617944565b600061618f82617600565b6000806000858060200190518101906180ef9190618d2c565b915091506000808680602001905181019061810a9190618d2c565b9150915061811a848483896142de565b98975050505050505050565b6000826181355750600061618f565b8282028284828161814257fe5b04146141b1576141b1618157600186866184b7565b618511565b6000828201838110156141b1576141b1618157600086866184b7565b60008161818e5761818e618157600385856184b7565b600082848161819957fe5b04949350505050565b6000828211156181bb576181bb618157600285856184b7565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106181f157fe5b602002602001018181525050919050565b600083158061820f575081155b80618218575082155b15618225575060006141b1565b8382028285828161823257fe5b04146182425760009150506141b1565b836001850382018161825057fe5b0495945050505050565b6000813b8061826d576000915050610e15565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156182a757600080fd5b505afa1580156182bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906182df9190618d10565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161830a9190619ef4565b60206040518083038186803b15801561832257600080fd5b505afa158015618336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061835a919061956a565b61836657506000610e15565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561839f57600080fd5b505afa1580156183b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906183d79190618d10565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016184029190619ef4565b60206040518083038186803b15801561841a57600080fd5b505afa15801561842e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618452919061956a565b61845e57506000610e15565b506001919050565b8160200183511015618485576184856181576005855185602001618519565b910160200152565b600081602001835110156184ae576184ae6181576005855185602001618519565b50016020015190565b606063e946c1bb60e01b8484846040516024016184d69392919061a3bb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b8484846040516024016184d69392919061a3dc565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b803561618f8161a8dd565b805161618f8161a8dd565b600082601f8301126186c2578081fd5b81356186d56186d08261a85e565b61a838565b8181529150602080830190848101818402860182018710156186f657600080fd5b60005b8481101561871e57813561870c8161a8dd565b845292820192908201906001016186f9565b505050505092915050565b600082601f830112618739578081fd5b81356187476186d08261a85e565b818152915060208083019084810160005b8481101561871e5761876f888484358a01016186b2565b84529282019290820190600101618758565b600082601f830112618791578081fd5b813561879f6186d08261a85e565b818152915060208083019084810160005b8481101561871e576187c7888484358a0101618970565b845292820192908201906001016187b0565b600082601f8301126187e9578081fd5b81356187f76186d08261a85e565b81815291506020808301908481018184028601820187101561881857600080fd5b60005b8481101561871e57813561882e8161a8dd565b8452928201929082019060010161881b565b600082601f830112618850578081fd5b813561885e6186d08261a85e565b818152915060208083019084810160808085028701830188101561888157600080fd5b60005b858110156188a8576188968984618c6f565b85529383019391810191600101618884565b50505050505092915050565b600082601f8301126188c4578081fd5b81356188d26186d08261a85e565b8181529150602080830190848101818402860182018710156188f357600080fd5b60005b8481101561871e578135845292820192908201906001016188f6565b600082601f830112618922578081fd5b81516189306186d08261a85e565b81815291506020808301908481018184028601820187101561895157600080fd5b60005b8481101561871e57815184529282019290820190600101618954565b600082601f830112618980578081fd5b813561898e6186d08261a87d565b91508082528360208285010111156189a557600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126189ce578081fd5b81516189dc6186d08261a87d565b91508082528360208285010111156189f357600080fd5b61306781602084016020860161a8a0565b80516002811061618f57600080fd5b600060608284031215618a24578081fd5b618a2e606061a838565b90508135618a3b8161a8dd565b81526020820135618a4b8161a900565b60208201526040820135618a5e8161a900565b604082015292915050565b600060608284031215618a7a578081fd5b618a84606061a838565b90508151618a918161a8dd565b81526020820151618aa18161a900565b60208201526040820151618a5e8161a900565b600060408284031215618ac5578081fd5b618acf604061a838565b90508135618adc8161a8dd565b81526020820135618aec8161a8dd565b602082015292915050565b600060a08284031215618b08578081fd5b618b1260a061a838565b9050813581526020820135618b268161a8dd565b60208201526040820135618b398161a8dd565b60408201526060820135618b4c8161a8dd565b606082015260808201356001600160401b03811115618b6a57600080fd5b618b7684828501618970565b60808301525092915050565b6000610180808385031215618b95578182fd5b618b9e8161a838565b915050618bab838361869c565b8152618bba836020840161869c565b6020820152618bcc8360408401618cd2565b6040820152618bde8360608401618cd2565b6060820152618bf08360808401618cd2565b6080820152618c028360a0840161869c565b60a0820152618c148360c0840161869c565b60c0820152618c268360e0840161869c565b60e0820152610100618c3a8482850161869c565b908201526101208281013590820152610140618c5884828501618cdd565b818301525061016080830135818301525092915050565b600060808284031215618c80578081fd5b618c8a608061a838565b9050813560048110618c9b57600080fd5b8152602082013560ff81168114618cb157600080fd5b80602083015250604082013560408201526060820135606082015292915050565b803561618f8161a925565b80356001600160401b038116811461618f57600080fd5b600060208284031215618d05578081fd5b81356141b18161a8dd565b600060208284031215618d21578081fd5b81516141b18161a8dd565b60008060408385031215618d3e578081fd5b8251618d498161a8dd565b6020840151909250618d5a8161a8dd565b809150509250929050565b60008060008060808587031215618d7a578182fd5b8451618d858161a8dd565b6020860151909450618d968161a8dd565b6040860151909350618da78161a8dd565b6060860151909250618db88161a8dd565b939692955090935050565b600080600060608486031215618dd7578081fd5b8351618de28161a8dd565b6020850151909350618df38161a8dd565b60408501519092508015158114618e08578182fd5b809150509250925092565b60008060408385031215618e25578182fd5b8251618e308161a8dd565b60208401519092506001600160401b0380821115618e4c578283fd5b9084019060a08287031215618e5f578283fd5b618e6960a061a838565b82518152618e7a87602085016186a7565b6020820152618e8c87604085016186a7565b6040820152618e9e87606085016186a7565b6060820152608083015182811115618eb4578485fd5b618ec0888286016189be565b6080830152508093505050509250929050565b600080600080600060a08688031215618eea578283fd5b8535618ef58161a8dd565b94506020860135618f058161a8dd565b93506040860135618f158161a8dd565b92506060860135618f258161a8dd565b915060808601356001600160401b03811115618f3f578182fd5b618f4b888289016188b4565b9150509295509295909350565b60008060008060808587031215618f6d578182fd5b8435618f788161a8dd565b93506020850135618f888161a8dd565b92506040850135618f988161a8dd565b915060608501356001600160401b03811115618fb2578182fd5b618fbe878288016188b4565b91505092959194509250565b60008060008060808587031215618fdf578182fd5b8435618fea8161a8dd565b93506020850135618ffa8161a8dd565b9250604085013561900a8161a8dd565b9396929550929360600135925050565b60008060006060848603121561902e578081fd5b83356190398161a8dd565b925060208401356001600160401b0380821115619054578283fd5b619060878388016186b2565b93506040860135915080821115619075578283fd5b50619082868287016188b4565b9150509250925092565b600080600080600060a086880312156190a3578283fd5b85356190ae8161a8dd565b9450602086013593506040860135618f158161a8dd565b600060208083850312156190d7578182fd5b82516001600160401b038111156190ec578283fd5b8301601f810185136190fc578283fd5b805161910a6186d08261a85e565b8181528381019083850185840285018601891015619126578687fd5b8694505b8385101561915157805161913d8161a8dd565b83526001949094019391850191850161912a565b50979650505050505050565b600080600060608486031215619171578081fd5b83516001600160401b0380821115619187578283fd5b818601915086601f83011261919a578283fd5b81516191a86186d08261a85e565b80828252602080830192508086018b8283870289010111156191c8578788fd5b8796505b848710156191ea5780518452600196909601959281019281016191cc565b508901519097509350505080821115619201578283fd5b5061920e86828701618912565b92505061921e8560408601618a04565b90509250925092565b60008060208385031215619239578182fd5b82356001600160401b038082111561924f578384fd5b818501915085601f830112619262578384fd5b813581811115619270578485fd5b8660208083028501011115619283578485fd5b60209290920196919550909350505050565b6000806000606084860312156192a9578081fd5b83356001600160401b03808211156192bf578283fd5b6192cb87838801618781565b945060208601359150808211156192e0578283fd5b506192ed86828701618781565b925050604084013590509250925092565b60006020828403121561930f578081fd5b81356001600160401b03811115619324578182fd5b611464848285016187d9565b60008060408385031215619342578182fd5b82356001600160401b03811115619357578283fd5b619363858286016187d9565b9250506020830135618d5a8161a8dd565b600080600060608486031215619388578081fd5b83356001600160401b0381111561939d578182fd5b6193a9868287016187d9565b93505060208401356193ba8161a8dd565b91506040840135618e088161a8dd565b600060208083850312156193dc578182fd5b82516001600160401b038111156193f1578283fd5b8301601f81018513619401578283fd5b805161940f6186d08261a85e565b818152838101908385018584028501860189101561942b578687fd5b8694505b8385101561915157805183526001949094019391850191850161942f565b600080600060608486031215619461578081fd5b83356001600160401b0380821115619477578283fd5b818601915086601f83011261948a578283fd5b81356194986186d08261a85e565b80828252602080830192508086016101808c838288028a010111156194bb578889fd5b8897505b858810156194e7576194d18d83618b82565b85526001979097019693820193908101906194bf565b509198508901359450505050808211156194ff578283fd5b5061950c86828701618840565b92505061921e856040860161869c565b60006020828403121561952d578081fd5b81516001600160401b03811115619542578182fd5b61146484828501618912565b60006020828403121561955f578081fd5b81516141b18161a8f2565b60006020828403121561957b578081fd5b5051919050565b600060208284031215619593578081fd5b81516001600160401b038111156195a8578182fd5b611464848285016189be565b6000806000606084860312156195c8578081fd5b83356195d38161a8dd565b925060208401356001600160401b03808211156195ee578283fd5b619060878388016187d9565b60006020828403121561960b578081fd5b81516141b18161a916565b60008060808385031215619628578182fd5b82516196338161a916565b91506196428460208501618a69565b90509250929050565b60008060008084860360a0811215619661578283fd5b604081121561966e578283fd5b50619679604061a838565b85358152602086013561968b8161a8dd565b6020820152935060408501356196a08161a8dd565b925060608501356196b08161a8dd565b915060808501356001600160401b03811115618fb2578182fd5b600080600080608085870312156196df578182fd5b84356001600160401b03808211156196f5578384fd5b9086019060408289031215619708578384fd5b619712604061a838565b61971c898461869c565b815260208301358281111561972f578586fd5b61973b8a828601618729565b60208301525080965050619752886020890161869c565b9450619761886040890161869c565b93506060870135915080821115619776578283fd5b50618fbe878288016188b4565b60008060008060c08587031215619798578182fd5b6197a28686618a13565b935060608501356197b28161a916565b925060808501356197c28161a916565b915060a08501356001600160401b03811115618fb2578182fd5b60008060008060a085870312156197f1578182fd5b6197fb8686618ab4565b935060408501356196a08161a8dd565b60006020828403121561981c578081fd5b81356001600160401b0380821115619832578283fd5b9083019060a08286031215619845578283fd5b61984f60a061a838565b619859868461869c565b815260208301358281111561986c578485fd5b619878878286016186b2565b60208301525060408301358281111561988f578485fd5b61989b87828601618781565b6040830152506060830135828111156198b2578485fd5b6198be878286016186b2565b6060830152506080830135828111156198d5578485fd5b6198e1878286016188b4565b60808301525095945050505050565b60008060008060808587031215619905578182fd5b84356001600160401b038082111561991b578384fd5b61992788838901618af7565b9550602087013591506199398261a8dd565b90935060408601359061994b8261a8dd565b90925060608601359080821115619776578283fd5b60008060008060808587031215619975578182fd5b84356001600160401b0381111561998a578283fd5b61999687828801618af7565b9450506020850135618ffa8161a8dd565b600080600080608085870312156199bc578182fd5b84356001600160401b038111156199d1578283fd5b6199dd87828801618af7565b9450506020850135925060408501356199f58161a8dd565b91506060850135618db88161a8dd565b60008060006102208486031215619a1a578081fd5b619a248585618b82565b9250619a34856101808601618c6f565b9150610200840135618e088161a8dd565b60008060008084860360c0811215619a5b578283fd5b6060811215619a68578283fd5b50619a73606061a838565b8535619a7e8161a8dd565b8152602086810135908201526040860135619a988161a8dd565b604082015293506060850135619aad8161a8dd565b925060808501356197c28161a8dd565b600080600083850360a0811215619ad2578182fd5b6060811215619adf578182fd5b50619aea606061a838565b84518152602085015160058110619aff578283fd5b60208201526040850151619b128161a925565b60408201526060850151909350619b288161a925565b6080850151909250618e088161a8f2565b600060208284031215619b4a578081fd5b815162ffffff811681146141b1578182fd5b60008060408385031215619b6e578182fd5b505080516020909101519092909150565b60008060008060808587031215619b94578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619bcb578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015619c385781516001600160a01b031687529582019590820190600101619c13565b509495945050505050565b6000815180845260208085019450808401835b83811015619c3857815187529582019590820190600101619c56565b60008151808452619c8a81602086016020860161a8a0565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261146460a0850182619c72565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b6000815183526020820151604060208501526114646040850182619c72565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261146460a0850182619c72565b619db9828251619bf3565b6020810151619dcb6020840182619bf3565b506040810151619dde6040840182619eae565b506060810151619df16060840182619eae565b506080810151619e046080840182619eae565b5060a0810151619e1760a0840182619bf3565b5060c0810151619e2a60c0840182619bf3565b5060e0810151619e3d60e0840182619bf3565b5061010080820151619e5182850182619bf3565b5050610120818101519083015261014080820151619e7182850182619ebb565b505061016090810151910152565b8051619e8a8161a8d0565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619eea81846020870161a8a0565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906168d790830184619c43565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b0385811682528416602082015282151560408201526080606082018190526000906168d790830184619c72565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061a07a90830184619c72565b979650505050505050565b6001600160a01b038416815260606020820181905260009061a0a990830185619c00565b82810360408401526168d78185619c43565b6001600160a01b0385168152600061a0d28561a8d0565b8460208301526080604083015261a0ec6080830185619c43565b828103606084015261a07a8185619c43565b6001600160a01b0389811682526000906101009061a11b8b61a8d0565b8a602085015281604085015261a1338285018b619c43565b9150838203606085015261a147828a619c43565b9088166080850152905061a15a8661a8d0565b8560a084015282810360c084015261a1728186619c43565b905082810360e084015261a1868185619c43565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061146490830184619d61565b60006040825261a1cc6040830185619c00565b82810360208401526114d28185619c43565b60006040825261a1f16040830185619c00565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561a25557605f1988840301855261a243838351619c72565b9486019492509085019060010161a227565b50508581038487015261811a8188619c43565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561a2cf57888303603f190185528151805187855261a2b088860182619c72565b918901511515948901949094529487019492509086019060010161a28c565b509098975050505050505050565b6000602082526141b16020830184619c43565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906114d290830184619c43565b90815260200190565b60008482526060602083015261a0a96060830185619c72565b6000602082526141b16020830184619c72565b60006040825261a1f16040830185619c72565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b038316815260406020820181905260009061146490830184619c43565b6060810161a3c88561a8d0565b938152602081019290925260409091015290565b606081016008851061a3c857fe5b600060e082016002871061a3fa57fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b8281101561a4515760ff1988870301845261a43f868351619c9e565b9550928401929084019060010161a423565b5050505050828103604084015261a4688186619c00565b9150506114d26060830184619d0d565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016141b16020830184619cdb565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b60208082526010908201526f3139393939393939393939393939393960801b604082015260600190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b600061a5e98287619cdb565b84600f0b606083015283600f0b608083015260c060a08301526168d760c0830184619c43565b60006060825261a6226060830186619d42565b828103602084015261a6348186619d42565b915050826040830152949350505050565b60006080825261a6586080830187619d61565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261a68e6080830187619d61565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161a6c38285619dae565b6141b1610180830184619e7f565b610220810161a6e08286619dae565b61a6ee610180830185619e7f565b6001600160a01b0392909216610200919091015292915050565b6000838252604060208301526114646040830184619c00565b60008482526060602083015261a73a6060830185619c00565b82810360408401526168d78185619c00565b6000858252602060808184015261a7666080840187619c00565b838103604085015285518082528282019083810283018401848901865b8381101561a7b157601f1986840301855261a79f838351619c72565b9487019492509086019060010161a783565b5050868103606088015261a1868189619c00565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261a803578283fd5b8301803591506001600160401b0382111561a81c578283fd5b60200191503681900382131561a83157600080fd5b9250929050565b6040518181016001600160401b038111828210171561a85657600080fd5b604052919050565b60006001600160401b0382111561a873578081fd5b5060209081020190565b60006001600160401b0382111561a892578081fd5b50601f01601f191660200190565b60005b8381101561a8bb57818101518382015260200161a8a3565b8381111561a8ca576000848401525b50505050565b6004811061a8da57fe5b50565b6001600160a01b038116811461a8da57600080fd5b801515811461a8da57600080fd5b6001600160e01b03198116811461a8da57600080fd5b80600f0b811461a8da57600080fd5b6001600160801b038116811461a8da57600080fdfea2646970667358221220478adf9da06236608e1d5e0f677e447d647e8bdfe95a67ceb12a1f5bfcf0181564736f6c634300060c0033",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xA970 PUSH3 0x5E PUSH1 0x0 CODECOPY DUP1 PUSH2 0x30C1 MSTORE DUP1 PUSH2 0x4CE9 MSTORE DUP1 PUSH2 0x583A MSTORE POP PUSH2 0xA970 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x342 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8B6D7B44 GT PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xBD71ECF6 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x7C0 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x7D3 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x787 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x79A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xC8C74A37 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x728 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x73B JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x74E JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x761 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x6EF JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x702 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x715 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0xA75E744B GT PUSH2 0x14B JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x695 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x6BB JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x6DC JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x682 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x5F4 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x63A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x36052391 GT PUSH2 0x292 JUMPI DUP1 PUSH4 0x5AAE4E53 GT PUSH2 0x230 JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x20A JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x5AC JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x553 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x494569DB GT PUSH2 0x26C JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x51A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x36052391 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0x3C883DBA EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x4B3 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x252322B3 GT PUSH2 0x2FF JUMPI DUP1 PUSH4 0x2AA64319 GT PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x467 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x47A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x252322B3 EQ PUSH2 0x3F9 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x41F JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x1CB0EF7 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x3E6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35A PUSH2 0x355 CALLDATASIZE PUSH1 0x4 PUSH2 0x980B JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x383 PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x997 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA1B9 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x944D JUMP JUMPDEST PUSH2 0xB3D JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x96CA JUMP JUMPDEST PUSH2 0xCB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA085 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF4 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA2F0 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x3F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x964B JUMP JUMPDEST PUSH2 0xE1A JUMP JUMPDEST PUSH2 0x35A PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x1041 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x9A45 JUMP JUMPDEST PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST PUSH2 0x445 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2FB JUMP JUMPDEST PUSH2 0x35A PUSH2 0x462 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED3 JUMP JUMPDEST PUSH2 0x17B8 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x475 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x1941 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x488 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x1AB5 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x49B CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x980B JUMP JUMPDEST PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x35A PUSH2 0x4C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x1E61 JUMP JUMPDEST PUSH2 0x383 PUSH2 0x4D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x4EC PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x99A7 JUMP JUMPDEST PUSH2 0x216E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA349 JUMP JUMPDEST PUSH2 0x50C PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x95B4 JUMP JUMPDEST PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA200 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x2636 JUMP JUMPDEST PUSH2 0x50C PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x95B4 JUMP JUMPDEST PUSH2 0x2BAD JUMP JUMPDEST PUSH2 0x35A PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x944D JUMP JUMPDEST PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x579 PUSH2 0x574 CALLDATASIZE PUSH1 0x4 PUSH2 0x9227 JUMP JUMPDEST PUSH2 0x2F0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA268 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x92FE JUMP JUMPDEST PUSH2 0x306E JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96CA JUMP JUMPDEST PUSH2 0x3160 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A45 JUMP JUMPDEST PUSH2 0x316F JUMP JUMPDEST PUSH2 0x35A PUSH2 0x5CD CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x5E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9295 JUMP JUMPDEST PUSH2 0x371F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA60F JUMP JUMPDEST PUSH2 0x35A PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x3B38 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A05 JUMP JUMPDEST PUSH2 0x4071 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH2 0x64D PUSH2 0x648 CALLDATASIZE PUSH1 0x4 PUSH2 0x98F0 JUMP JUMPDEST PUSH2 0x41B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x66A CALLDATASIZE PUSH1 0x4 PUSH2 0x8FCA JUMP JUMPDEST PUSH2 0x42DE JUMP JUMPDEST PUSH2 0x35A PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x964B JUMP JUMPDEST PUSH2 0x44F4 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x690 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x46F0 JUMP JUMPDEST PUSH2 0x445 PUSH2 0x6A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x908C JUMP JUMPDEST PUSH2 0x4845 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4982 JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x6C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4AE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA397 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4C30 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0x9330 JUMP JUMPDEST PUSH2 0x4C96 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x710 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4D92 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4DF8 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x4FB5 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x749 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x5121 JUMP JUMPDEST PUSH2 0x64D PUSH2 0x75C CALLDATASIZE PUSH1 0x4 PUSH2 0x98F0 JUMP JUMPDEST PUSH2 0x527F JUMP JUMPDEST PUSH2 0x445 PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x908C JUMP JUMPDEST PUSH2 0x5465 JUMP JUMPDEST PUSH2 0x445 PUSH2 0x782 CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x5554 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x795 CALLDATASIZE PUSH1 0x4 PUSH2 0x9374 JUMP JUMPDEST PUSH2 0x57E7 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x7A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x58DC JUMP JUMPDEST PUSH2 0x62D PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x9960 JUMP JUMPDEST PUSH2 0x5A0F JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x7CE CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x5BAE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x7E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9295 JUMP JUMPDEST PUSH2 0x5C9A JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x805 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x82F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x990 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x846EE14B DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x860 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x896 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA74C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8E3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x938 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x916 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA57C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x959 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x971 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x987 JUMPI POP PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x835 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9DE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x9EB DUP7 DUP7 PUSH2 0x5EAF JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x9FD JUMPI POP PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB32 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA721 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA9D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA9A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAD7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xB32 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xAE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB29 JUMPI POP PUSH2 0xB32 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA00 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB80 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xCA8 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBAD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA6D1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xC31 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC2E SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC85 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xC5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC73 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xCA0 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB86 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH2 0xCD4 DUP8 DUP8 DUP8 DUP8 PUSH2 0x6195 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xCF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD1A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xE04 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD49 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD6E SWAP3 SWAP2 SWAP1 PUSH2 0xA1DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xDB7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDB4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDC0 JUMPI PUSH2 0xE04 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xDE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDFB JUMPI POP PUSH2 0xE04 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xD20 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE26 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xE8A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xEEF PUSH2 0x8538 JUMP JUMPDEST PUSH2 0xEF7 PUSH2 0x63FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x60 PUSH2 0xF23 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x642C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xF59 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFA8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x93CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFE3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x1034 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xFF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x1010 JUMPI POP POP POP PUSH2 0x1034 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x101D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xEFC JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x104D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x108F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x10B2 JUMPI PUSH2 0x10AD DUP8 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x10D7 JUMPI PUSH2 0x10D2 DUP9 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x113D JUMPI PUSH2 0x111C DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x653D JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1128 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x11D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x1163 JUMPI PUSH2 0x111C DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x11BA JUMPI PUSH2 0x1199 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x653D JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x11A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x11C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x11F7 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1202 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x10DF JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1223 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12E4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1334 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1358 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x13FB JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13E5 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1408 JUMPI POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH2 0x1436 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1427 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x6620 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1443 JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1450 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x140B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x148B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14B2 SWAP3 SWAP2 SWAP1 PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x68E1 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x14EA DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x152C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x155F SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x158B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15AF SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x15CD JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x166C JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x15FE SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1665 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16DD SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST PUSH2 0x16E8 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x17AB JUMPI PUSH1 0x0 PUSH2 0x1765 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1713 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x173D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1758 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6C11 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x178C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17A2 JUMPI POP PUSH2 0x17AB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x16EB JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1814 JUMPI POP PUSH2 0x14D2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1936 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1848 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1863 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18A1 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1906 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1903 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1913 JUMPI POP POP POP PUSH2 0x1936 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1920 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1817 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x194D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x198F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x19BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19E4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A2D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A2A SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A67 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1AAB JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1AA2 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1995 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C30 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1B27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B4D SWAP3 SWAP2 SWAP1 PUSH2 0xA708 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B98 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1BD5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1C30 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1BE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C27 JUMPI POP PUSH2 0x1C30 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1B00 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C45 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1C77 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCA8 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CC0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x1464 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1CEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x990 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3BBC8A1E DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA74C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1DC8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1DC5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E02 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1DF6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DFB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x990 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1E16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E58 JUMPI POP PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1D1A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1EA6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1EDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EF7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F35 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1F9A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F97 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1FA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1FD7 JUMPI POP POP POP PUSH2 0x1AAB JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1EAC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2029 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2036 DUP7 DUP7 PUSH2 0x5EAF JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2048 JUMPI POP PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB32 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2072 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x209A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA721 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x20E8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20E5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2116 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAD0 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2123 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x214F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2165 JUMPI POP PUSH2 0xB32 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x204B JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21A5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x22CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2236 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x224E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2284 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2281 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22BE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x22B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x22C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1464 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x23E0 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2324 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2236 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2364 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x237C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x23B2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x23AF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22BE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1034 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x246C DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2464 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6D4A JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24AF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24FD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x24E8 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB32 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x25EE JUMPI PUSH1 0x60 PUSH2 0x253A DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x252D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x71E0 JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x255C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2581 SWAP3 SWAP2 SWAP1 PUSH2 0xA35C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x25CC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x25C9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D5 JUMPI PUSH2 0x25E5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x25E3 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2512 JUMP JUMPDEST POP DUP1 PUSH2 0x25FB JUMPI POP POP PUSH2 0xB32 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2608 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2621 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2503 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x267D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x26AD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26FD SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2782 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2730 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x275C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2780 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x278E JUMPI POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x2796 PUSH2 0x855F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x27C2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2812 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2840 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x286C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2890 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x28C1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2911 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2944 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x295C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2970 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2994 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH2 0x2A41 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2A38 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x733B JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A4D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2A60 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2A93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2AD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2B0A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2B07 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B44 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B3D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x120B JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2B5C SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x733B JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x2B69 JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B8E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2BA4 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2A16 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2BEE DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2BFB DUP7 PUSH2 0x7398 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C3E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2C77 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2DE7 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2D9F JUMPI PUSH1 0x60 PUSH2 0x2CD1 DUP7 PUSH2 0x2CCC DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2CBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7430 JUMP JUMPDEST PUSH2 0x71E0 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2CF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D18 SWAP3 SWAP2 SWAP1 PUSH2 0xA35C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2D63 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2D60 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2D6C JUMPI PUSH2 0x2D96 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x2D79 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x2D94 JUMPI DUP1 SWAP4 POP PUSH2 0x2D91 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x252D JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2CA1 JUMP JUMPDEST POP DUP1 PUSH2 0x2DAC JUMPI POP POP PUSH2 0x2DE7 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DD2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2C92 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x2E11 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E38 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x74C8 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E65 DUP5 DUP5 DUP5 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xCA8 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2E7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2F05 JUMPI PUSH2 0x2EEC DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E9D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2ED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x75DC JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2EF8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2E6A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2F25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F5F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2F4C PUSH2 0x858E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2F44 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x3067 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F7A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2F98 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2FAA SWAP2 SWAP1 PUSH2 0xA7ED JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2FB7 JUMPI PUSH2 0x305F JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2FC4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2FD6 SWAP2 SWAP1 PUSH2 0xA7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FE4 SWAP3 SWAP2 SWAP1 PUSH2 0x9EC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3021 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3026 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3033 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x304A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2F65 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x30B1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x315A JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3135 JUMPI PUSH2 0x3130 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x311A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7600 JUMP JUMPDEST PUSH2 0x3138 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3147 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x30B7 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x317B DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31F7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x323C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x328C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B0 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x3353 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3319 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x333D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3360 JUMPI POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH2 0x338E DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x337F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x76A2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x339B JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x33A8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3363 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33F3 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x340B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x341F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3443 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x3476 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x348E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34C6 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34FE SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x352A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x354E SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x3562 JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x357F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x35A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x35E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x35FA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3638 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3674 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3679 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x369D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x369A SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x36D7 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x36CE JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x36BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x36A6 JUMP JUMPDEST POP POP POP POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x36E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x36FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3714 JUMPI POP POP POP PUSH2 0x120B JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x35AF JUMP JUMPDEST PUSH2 0x3727 PUSH2 0x85A6 JUMP JUMPDEST PUSH2 0x372F PUSH2 0x85A6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3834 JUMPI PUSH2 0x377B PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7934 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x37AA SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x37E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x382A JUMPI PUSH1 0x0 PUSH2 0x3810 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3828 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3734 JUMP JUMPDEST POP DUP1 PUSH2 0x3840 JUMPI POP PUSH2 0x392F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x392C JUMPI PUSH2 0x3873 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x385C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x388D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A2 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x38DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x38E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3922 JUMPI PUSH1 0x0 PUSH2 0x3908 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3920 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3843 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x39BA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x39B3 SWAP1 DUP1 PUSH2 0x396C DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3993 SWAP3 SWAP2 SWAP1 PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7950 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST SWAP1 POP PUSH2 0x1464 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39FC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3A33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3A4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3A8B SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AC7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ACC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3AF0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3AED SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3AFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B2D JUMPI POP POP POP PUSH2 0x1AAB JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3A02 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B7F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3BAF SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3BC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BFF SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x3C84 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3C32 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C82 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3C90 JUMPI POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x3C98 PUSH2 0x855F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3CC4 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3CF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D14 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3D42 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D92 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3DC3 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E13 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3E46 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E96 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3ED8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3EEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3F10 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x120B JUMPI DUP2 MLOAD PUSH2 0x3F36 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2B56 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3F55 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3F88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FFF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3FFC SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x402D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B3D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x403A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4052 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4068 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3F18 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4081 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x4099 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4097 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x40AF JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x40C5 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x40D2 JUMPI POP PUSH1 0x0 PUSH2 0x41B1 JUMP JUMPDEST PUSH2 0x40DA PUSH2 0x85C0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410B SWAP3 SWAP2 SWAP1 PUSH2 0xA6B4 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4137 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x415B SWAP2 SWAP1 PUSH2 0x9ABD JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4174 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x417F JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x4192 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x41A3 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x41C7 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x41D2 DUP8 DUP8 DUP8 PUSH2 0x79A4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x41DE JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4207 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA67B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x421F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4233 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x425B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x42D2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x428B SWAP3 SWAP2 SWAP1 PUSH2 0xA195 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42B2 SWAP3 SWAP2 SWAP1 PUSH2 0xA195 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7B0B DUP2 MSTORE POP DUP6 PUSH2 0x6A14 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x430F SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x435F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4379 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x440B JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x43B6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4406 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x4417 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x442C JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x4461 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x44AA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x44A7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x44EA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x44D8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x44DD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1464 JUMP JUMPDEST SWAP3 POP PUSH2 0x1464 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4500 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4536 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4564 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x45BE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x45C9 PUSH2 0x8538 JUMP JUMPDEST PUSH2 0x45D1 PUSH2 0x63FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x60 PUSH2 0x45F0 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF16 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x4626 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4675 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4672 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x93CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x46A3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x46B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x46CC JUMPI POP POP POP PUSH2 0x1034 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x45D6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x470B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4735 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4764 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x478A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x47D3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x47D0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4801 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x480E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4826 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x483C JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x473B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4854 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x486C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4896 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x48A5 DUP10 DUP10 DUP10 DUP10 PUSH2 0x7BF2 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x48BD JUMPI POP PUSH2 0x4977 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4974 JUMPI PUSH1 0x0 PUSH2 0x492E DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x48E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4906 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4921 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7D47 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x493D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4955 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x496B JUMPI POP PUSH2 0x4974 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x48C0 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x498E DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x49A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x49FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A25 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4A6E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4A6B SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A9C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4AA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4AD7 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x49D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4AEE DUP5 DUP7 PUSH2 0x63C7 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B30 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4BA5 JUMPI PUSH1 0x0 PUSH2 0x4B5F DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4B52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x42DE JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B6E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B9C JUMPI POP PUSH2 0x4BA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4B36 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x4BD4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C24 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x4C4F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C76 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E39 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4CD9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x3067 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4D67 JUMPI PUSH2 0x4D62 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E80 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4D73 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D7F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4CDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x4DB1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4DD8 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7F4A DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E04 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E46 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4E69 JUMPI PUSH2 0x4E64 DUP8 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x4E6C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4E8E JUMPI PUSH2 0x4E89 DUP9 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x4E91 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x4EE7 JUMPI PUSH2 0x4EC6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4ED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4F81 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x4F0D JUMPI PUSH2 0x4EC6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4F27 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4F64 JUMPI PUSH2 0x4F43 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x653D JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4F4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4F7F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4F72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x4FA1 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4FAC JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4E96 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C30 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x504D SWAP3 SWAP2 SWAP1 PUSH2 0xA708 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x509B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5098 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x50C9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BCE JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x50D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x50EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5102 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5118 JUMPI POP PUSH2 0x1C30 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5000 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x512D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x516F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x519E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x520D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x520A SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x523B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5248 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5260 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5276 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5175 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x528E DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x5299 DUP8 DUP8 DUP8 PUSH2 0x79A4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x52A5 JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x52CE SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA67B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5322 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x536E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5459 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x539C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53C3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5413 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5422 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x543A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5450 JUMPI POP PUSH2 0x5459 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5374 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5474 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x5480 DUP9 DUP9 DUP9 DUP9 PUSH2 0x7BF2 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5497 JUMPI PUSH2 0x4977 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x54AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x54D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5546 SWAP1 DUP1 PUSH2 0x54FD DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5526 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D47 DUP2 MSTORE POP DUP7 PUSH2 0x6A14 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5563 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x557B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x55A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x55D8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5604 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5628 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x5646 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x56E5 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x5677 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x568F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56C7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x56DE JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x571E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5756 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST PUSH2 0x5761 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH2 0x57D9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x578A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x57B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6C11 DUP2 MSTORE POP DUP8 PUSH2 0x6A14 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x582A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xCA8 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x586E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x58BA JUMPI PUSH2 0x58B5 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5895 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7FFF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x58BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x58C9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5830 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x58F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5921 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5950 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5976 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x598E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x59BF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x59BC SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x59ED JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x5927 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A27 JUMPI POP PUSH1 0x0 PUSH2 0x1464 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A61 JUMPI DUP7 PUSH2 0x5A77 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A9A JUMPI DUP7 PUSH2 0x5AB0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AD8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA040 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5B21 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5B1E SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5B5F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5B4F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5B54 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B6A DUP6 PUSH2 0x80CB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5B7A DUP8 PUSH2 0x80CB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5B9B JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x5BA3 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5BBC DUP5 DUP7 PUSH2 0x63C7 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5BFE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5C69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C22 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C49 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x80D6 DUP2 MSTORE POP DUP6 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x4BD4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH2 0x5CA2 PUSH2 0x85A6 JUMP JUMPDEST PUSH2 0x5CAA PUSH2 0x85A6 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x5DA6 JUMPI PUSH2 0x5CE1 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5CCA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5D10 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D4D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D52 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5D9C JUMPI PUSH1 0x0 PUSH2 0x5D76 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5D87 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5D9A JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5CB1 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x5DB7 JUMPI POP PUSH2 0x392F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x392C JUMPI PUSH2 0x5DEA PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5E04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5E19 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5E56 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E5B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5EA5 JUMPI PUSH1 0x0 PUSH2 0x5E7F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5E90 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5EA3 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5DBA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F24 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F6A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x618C JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5F9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x5FB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FD6 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6024 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6021 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6073 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6052 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6057 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x618F SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x6097 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA5A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6180 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6105 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6129 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x6177 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x6156 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x609A JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5F70 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x61FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6221 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x623D SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6269 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x628D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x62A2 JUMPI PUSH2 0x63BE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x63BB JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x62C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x62D9 JUMPI PUSH2 0x63B3 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x62FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6314 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6339 SWAP3 SWAP2 SWAP1 PUSH2 0xA1DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6382 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x637F SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x638B JUMPI PUSH2 0x63B3 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x63B1 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x62A6 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x63F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA4F2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6405 PUSH2 0x8538 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x644E PUSH2 0x85E2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6446 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x64AC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x64ED SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6519 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41B1 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6553 JUMPI PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6575 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x65B3 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65EF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65F4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6617 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6614 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6656 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x666E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6682 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66A6 SWAP2 SWAP1 PUSH2 0x9BB4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x67CE JUMPI PUSH1 0x0 PUSH2 0x66E5 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6709 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP9 DUP6 PUSH2 0x815C JUMP JUMPDEST SWAP1 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6721 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67B0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x67AA DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x676B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x677F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67A3 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x8126 JUMP JUMPDEST SWAP1 PUSH2 0x8178 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x67BE DUP5 DUP4 PUSH2 0x81A2 JUMP JUMPDEST SWAP9 POP PUSH2 0x68D7 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x68CE JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6803 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x681F PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP9 DUP6 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6837 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68BC DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6889 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68AD SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x815C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x67BE DUP3 PUSH2 0x67AA DUP7 DUP9 PUSH2 0x8126 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68EC PUSH2 0x8614 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6900 SWAP2 SWAP1 PUSH2 0x9616 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x691A SWAP2 SWAP1 PUSH2 0x95FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6935 DUP13 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6948 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA5DD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6986 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x69C1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69C6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x69DE JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69F2 SWAP2 SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x69FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6A57 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6A69 JUMPI PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A9A DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6AA7 JUMPI POP PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6AC4 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6AD2 JUMPI POP POP PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6C08 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6BCA JUMPI PUSH2 0x6B08 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6AF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x8202 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6B14 JUMPI PUSH2 0x6BCA JUMP JUMPDEST PUSH2 0x6B23 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x8202 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6B2F JUMPI PUSH2 0x6BCA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4C DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6B59 JUMPI POP PUSH2 0x6BCA JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6B68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x6BC1 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6B84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6B9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x6BAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x6BBF JUMPI POP POP PUSH2 0x6BCA JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6AE1 JUMP JUMPDEST POP PUSH2 0x6BE9 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x8202 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BF5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6AD5 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C2D SWAP2 SWAP1 PUSH2 0x8D65 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6D17 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6C80 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6CC9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6CC6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6D0B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6CF7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CFC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST SWAP5 POP PUSH2 0x41B1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6C80 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x6D70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA4AE JUMP JUMPDEST PUSH2 0x6D78 PUSH2 0x8634 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6DCC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x6EDC JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x6E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E3F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA36F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E8F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH2 0x6E9A DUP2 PUSH2 0x825A JUMP JUMPDEST ISZERO PUSH2 0x6ED3 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x6EB2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6DF4 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x6EEC JUMPI POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x6FE2 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6F42 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6F2D JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6FD9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6F7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6F91 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6FA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6FB9 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6F48 JUMP JUMPDEST POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6FF2 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6D4A JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7007 JUMPI POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7020 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7054 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x703F JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x71D4 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x71CB JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x7082 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70CD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x70F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7105 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7119 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7148 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x71C1 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7164 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7177 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x718B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x71A1 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x713C JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7065 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x705A JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x71F8 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7214 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA537 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x725F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x618C JUMPI DUP1 ISZERO PUSH2 0x730E JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7289 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x72DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7301 SWAP2 SWAP1 PUSH2 0x9B39 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x731C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7269 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7358 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7354 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7367 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x618F JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x7385 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x618F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x73B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x73DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x315A JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x73FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7410 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x73E1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7473 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x315A JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x7494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x74A8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7479 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x74E1 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x74FB SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x750F DUP11 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x752E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x757B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x75BC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x75C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1464 DUP4 PUSH2 0x67AA PUSH2 0x75F0 DUP3 PUSH1 0x1 PUSH2 0x81A2 JUMP JUMPDEST PUSH2 0x75FA DUP9 DUP8 PUSH2 0x8126 JUMP JUMPDEST SWAP1 PUSH2 0x815C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x763E SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7679 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x767E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7692 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x990 JUMPI PUSH2 0x1464 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76D8 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7728 SWAP2 SWAP1 PUSH2 0x9BB4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x783F JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x77D8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77C9 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x77F2 DUP3 PUSH2 0x67AA DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7810 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP10 DUP6 PUSH2 0x815C JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7829 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67BE PUSH1 0x1 PUSH2 0x75FA DUP6 PUSH5 0xE8D4A51000 PUSH2 0x8178 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7924 JUMPI PUSH1 0x0 PUSH2 0x786E DUP9 PUSH5 0xE8D4A51000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x78AE DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x78C8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x67AA DUP6 DUP6 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x78E1 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x78FD PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP10 DUP6 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x7916 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x68D7 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x793F DUP4 DUP4 DUP4 PUSH2 0x8466 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41B1 DUP4 DUP4 PUSH2 0x848D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x795B PUSH2 0x8614 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x796F SWAP2 SWAP1 PUSH2 0x9616 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7989 SWAP2 SWAP1 PUSH2 0x95FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6935 DUP13 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x79E2 JUMPI DUP7 PUSH2 0x79F8 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7A1B JUMPI DUP7 PUSH2 0x7A31 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x7A65 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7AB9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x7AD5 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x41B1 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x7AE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x1C30 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x41B1 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7B16 PUSH2 0x8652 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7B2A SWAP2 SWAP1 PUSH2 0x8E13 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7B44 SWAP2 SWAP1 PUSH2 0x8E13 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7B71 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7BB9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7BB6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7BE7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75AE JUMP JUMPDEST SWAP4 POP PUSH2 0x41B1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C25 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7C79 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7D12 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7CB7 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7D0B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7D27 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x63BE JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7D33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D61 SWAP2 SWAP1 PUSH2 0x8DC3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7E05 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7DA1 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7DB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7DE9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7DE6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x9B5C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7DF9 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x41B1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7DA1 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E52 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E6C SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x750F DUP11 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7EA8 SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7EE6 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F21 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F26 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7F3A JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x618C JUMPI PUSH2 0x14D2 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F63 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F7D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7F95 DUP12 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7FB4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x757B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8029 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8067 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x80A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x80A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x80BB JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1C30 JUMPI PUSH2 0x68D7 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x618F DUP3 PUSH2 0x7600 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x80EF SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x810A SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x811A DUP5 DUP5 DUP4 DUP10 PUSH2 0x42DE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8135 JUMPI POP PUSH1 0x0 PUSH2 0x618F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x8142 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x41B1 JUMPI PUSH2 0x41B1 PUSH2 0x8157 PUSH1 0x1 DUP7 DUP7 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0x8511 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x41B1 JUMPI PUSH2 0x41B1 PUSH2 0x8157 PUSH1 0x0 DUP7 DUP7 PUSH2 0x84B7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x818E JUMPI PUSH2 0x818E PUSH2 0x8157 PUSH1 0x3 DUP6 DUP6 PUSH2 0x84B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x8199 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x81BB JUMPI PUSH2 0x81BB PUSH2 0x8157 PUSH1 0x2 DUP6 DUP6 PUSH2 0x84B7 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x81F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x820F JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x8218 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x8225 JUMPI POP PUSH1 0x0 PUSH2 0x41B1 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x8232 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8242 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x8250 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x826D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xE15 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x82DF SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x830A SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x835A SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x8366 JUMPI POP PUSH1 0x0 PUSH2 0xE15 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x839F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x83B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x83D7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8402 SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x841A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x842E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8452 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x845E JUMPI POP PUSH1 0x0 PUSH2 0xE15 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8485 JUMPI PUSH2 0x8485 PUSH2 0x8157 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8519 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x84AE JUMPI PUSH2 0x84AE PUSH2 0x8157 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8519 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x84D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA3BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x84D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA3DC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x618F DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x618F DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x86C2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x86D5 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST PUSH2 0xA838 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x86F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD PUSH2 0x870C DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x86F9 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8739 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8747 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI PUSH2 0x876F DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x86B2 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8758 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8791 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x879F PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI PUSH2 0x87C7 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8970 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x87B0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x87E9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x87F7 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD PUSH2 0x882E DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x881B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8850 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x885E PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x8881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x88A8 JUMPI PUSH2 0x8896 DUP10 DUP5 PUSH2 0x8C6F JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8884 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88C4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x88D2 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x88F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x88F6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8922 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8930 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8954 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8980 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x898E PUSH2 0x86D0 DUP3 PUSH2 0xA87D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x89CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x89DC PUSH2 0x86D0 DUP3 PUSH2 0xA87D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3067 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA8A0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x618F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A24 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A2E PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8A3B DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8A4B DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8A5E DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A7A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A84 PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x8A91 DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x8AA1 DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x8A5E DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AC5 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8ACF PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8ADC DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8AEC DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B08 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8B12 PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8B26 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8B39 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x8B4C DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8B76 DUP5 DUP3 DUP6 ADD PUSH2 0x8970 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B95 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8B9E DUP2 PUSH2 0xA838 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8BAB DUP4 DUP4 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8BBA DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8BCC DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8BDE DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x8BF0 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x8C02 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x8C14 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x8C26 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x8C3A DUP5 DUP3 DUP6 ADD PUSH2 0x869C JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8C58 DUP5 DUP3 DUP6 ADD PUSH2 0x8CDD JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C80 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8C8A PUSH1 0x80 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x8C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x8CB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x618F DUP2 PUSH2 0xA925 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x618F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D05 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D21 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D3E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8D49 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8D5A DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x8D85 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x8D96 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8DA7 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8DB8 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8DE2 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8DF3 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8E08 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8E25 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8E30 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8E4C JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x8E5F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8E69 PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x8E7A DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8E8C DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8E9E DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8EB4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8EC0 DUP9 DUP3 DUP7 ADD PUSH2 0x89BE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8EEA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8EF5 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8F05 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8F15 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8F25 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8F4B DUP9 DUP3 DUP10 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8F6D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8F78 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8F88 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8F98 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FBE DUP8 DUP3 DUP9 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8FDF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8FEA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8FFA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x900A DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x902E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9039 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9054 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9060 DUP8 DUP4 DUP9 ADD PUSH2 0x86B2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9075 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9082 DUP7 DUP3 DUP8 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x90A3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x90AE DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8F15 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x90D7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x90EC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x90FC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x910A PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x9126 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x9151 JUMPI DUP1 MLOAD PUSH2 0x913D DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x912A JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9171 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9187 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x919A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x91A8 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x91C8 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x91EA JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x91CC JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x9201 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x920E DUP7 DUP3 DUP8 ADD PUSH2 0x8912 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x921E DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8A04 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9239 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x924F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9262 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9270 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x9283 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x92A9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x92BF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x92CB DUP8 DUP4 DUP9 ADD PUSH2 0x8781 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92E0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x92ED DUP7 DUP3 DUP8 ADD PUSH2 0x8781 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x930F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9324 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x87D9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9342 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9357 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9363 DUP6 DUP3 DUP7 ADD PUSH2 0x87D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8D5A DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9388 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x939D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93A9 DUP7 DUP3 DUP8 ADD PUSH2 0x87D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x93BA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8E08 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x93DC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93F1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9401 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x940F PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x942B JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x9151 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x942F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9461 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9477 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x948A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9498 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x94BB JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x94E7 JUMPI PUSH2 0x94D1 DUP14 DUP4 PUSH2 0x8B82 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x94BF JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x94FF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x950C DUP7 DUP3 DUP8 ADD PUSH2 0x8840 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x921E DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x952D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9542 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x8912 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x955F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x957B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9593 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x95A8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x89BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x95C8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x95D3 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x95EE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9060 DUP8 DUP4 DUP9 ADD PUSH2 0x87D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x960B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA916 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9628 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9633 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP2 POP PUSH2 0x9642 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x8A69 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9661 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x966E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9679 PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x968B DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x96A0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x96B0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x96DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x96F5 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9708 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9712 PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST PUSH2 0x971C DUP10 DUP5 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x972F JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x973B DUP11 DUP3 DUP7 ADD PUSH2 0x8729 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9752 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x869C JUMP JUMPDEST SWAP5 POP PUSH2 0x9761 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x869C JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9776 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8FBE DUP8 DUP3 DUP9 ADD PUSH2 0x88B4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9798 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97A2 DUP7 DUP7 PUSH2 0x8A13 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x97B2 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x97C2 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x97F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97FB DUP7 DUP7 PUSH2 0x8AB4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x96A0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x981C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9832 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x9845 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x984F PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST PUSH2 0x9859 DUP7 DUP5 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x986C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x9878 DUP8 DUP3 DUP7 ADD PUSH2 0x86B2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x988F JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x989B DUP8 DUP3 DUP7 ADD PUSH2 0x8781 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x98B2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x98BE DUP8 DUP3 DUP7 ADD PUSH2 0x86B2 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x98D5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x98E1 DUP8 DUP3 DUP7 ADD PUSH2 0x88B4 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9905 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x991B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9927 DUP9 DUP4 DUP10 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9939 DUP3 PUSH2 0xA8DD JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x994B DUP3 PUSH2 0xA8DD JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x9776 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9975 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x998A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9996 DUP8 DUP3 DUP9 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8FFA DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x99BC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x99D1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x99DD DUP8 DUP3 DUP9 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x99F5 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8DB8 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9A1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9A24 DUP6 DUP6 PUSH2 0x8B82 JUMP JUMPDEST SWAP3 POP PUSH2 0x9A34 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x8C6F JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8E08 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x9A5B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9A68 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9A73 PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9A7E DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9A98 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9AAD DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x97C2 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9AD2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9ADF JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x9AEA PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x9AFF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x9B12 DUP2 PUSH2 0xA925 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9B28 DUP2 PUSH2 0xA925 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8E08 DUP2 PUSH2 0xA8F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B4A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x41B1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B6E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9B94 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9BCB JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C38 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C13 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C38 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C56 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9C8A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA8A0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST PUSH2 0x9DB9 DUP3 DUP3 MLOAD PUSH2 0x9BF3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9DCB PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x9DDE PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x9DF1 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x9E04 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9E17 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9E2A PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9E3D PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x9E51 DUP3 DUP6 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x9E71 DUP3 DUP6 ADD DUP3 PUSH2 0x9EBB JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x9E8A DUP2 PUSH2 0xA8D0 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9EEA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA8A0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x68D7 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x68D7 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA07A SWAP1 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA0A9 SWAP1 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x68D7 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xA0D2 DUP6 PUSH2 0xA8D0 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xA0EC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x9C43 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xA07A DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xA11B DUP12 PUSH2 0xA8D0 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xA133 DUP3 DUP6 ADD DUP12 PUSH2 0x9C43 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xA147 DUP3 DUP11 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA15A DUP7 PUSH2 0xA8D0 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xA172 DUP2 DUP7 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xA186 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1464 SWAP1 DUP4 ADD DUP5 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x14D2 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1F1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA255 JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA243 DUP4 DUP4 MLOAD PUSH2 0x9C72 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA227 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x811A DUP2 DUP9 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA2CF JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xA2B0 DUP9 DUP7 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA28C JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x14D2 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA0A9 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1F1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1464 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xA3C8 DUP6 PUSH2 0xA8D0 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA3C8 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0xA3FA JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA451 JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0xA43F DUP7 DUP4 MLOAD PUSH2 0x9C9E JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA423 JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xA468 DUP2 DUP7 PUSH2 0x9C00 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D2 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9D0D JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9CDB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x31393939393939393939393939393939 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5E9 DUP3 DUP8 PUSH2 0x9CDB JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x68D7 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA622 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x9D42 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA634 DUP2 DUP7 PUSH2 0x9D42 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA658 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA68E PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xA6C3 DUP3 DUP6 PUSH2 0x9DAE JUMP JUMPDEST PUSH2 0x41B1 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x9E7F JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xA6E0 DUP3 DUP7 PUSH2 0x9DAE JUMP JUMPDEST PUSH2 0xA6EE PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9E7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1464 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9C00 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA73A PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x68D7 DUP2 DUP6 PUSH2 0x9C00 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x20 PUSH1 0x80 DUP2 DUP5 ADD MSTORE PUSH2 0xA766 PUSH1 0x80 DUP5 ADD DUP8 PUSH2 0x9C00 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP3 DUP3 ADD SWAP1 DUP4 DUP2 MUL DUP4 ADD DUP5 ADD DUP5 DUP10 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA7B1 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA79F DUP4 DUP4 MLOAD PUSH2 0x9C72 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA783 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x60 DUP9 ADD MSTORE PUSH2 0xA186 DUP2 DUP10 PUSH2 0x9C00 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA803 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA81C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA873 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA892 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA8BB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA8A3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA8CA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA8DA JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE DUP11 0xDF SWAP14 LOG0 PUSH3 0x36608E SAR 0x5E 0xF PUSH8 0x7E447D647E8BDFE9 GAS PUSH8 0xCEB12A1F5BFCF018 ISZERO PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1439:1309:8:-:0;;;826:113:26;;;1439:1309:8;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "8466": [
                        {
                            "length": 32,
                            "start": 12481
                        },
                        {
                            "length": 32,
                            "start": 19689
                        },
                        {
                            "length": 32,
                            "start": 22586
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c80638b6d7b44116101b8578063bd71ecf611610104578063ddd5aa28116100a2578063f1ed7fa41161007c578063f1ed7fa4146107ad578063f3868e9c1461048d578063f5a4994d146107c0578063fc9fe41b146107d357610342565b8063ddd5aa2814610774578063e78ac04514610787578063e8e4af091461079a57610342565b8063c8c74a37116100de578063c8c74a3714610728578063c94706d81461073b578063cc1621c91461074e578063d9bca3721461076157610342565b8063bd71ecf6146106ef578063c25c413814610702578063c83190841461071557610342565b80639ea0ff1311610171578063a75e744b1161014b578063a75e744b14610695578063ab000276146106a8578063adc636bf146106bb578063b90cd2fb146106dc57610342565b80639ea0ff131461065c578063a0295b8b1461066f578063a46984171461068257610342565b80638b6d7b44146105bf5780638e5a0e07146105d25780639209483b146105f457806398777748146106075780639bf3ee351461061a5780639e3f05c31461063a57610342565b806336052391116102925780635aae4e531161023057806368be3cf21161020a57806368be3cf214610566578063706e2f9b1461058657806374c9d255146105995780637f7f4f13146105ac57610342565b80635aae4e531461052d5780635d5b674f1461054057806366a1ac6b1461055357610342565b8063494569db1161026c578063494569db146104c65780634edfb5b2146104d95780635505000a146104f957806357494b1d1461051a57610342565b8063360523911461048d5780633c883dba146104a057806340bc03ae146104b357610342565b8063252322b3116102ff5780632aa64319116102d95780632aa64319146104325780632d753aa41461045457806330d6570d146104675780633105fec11461047a57610342565b8063252322b3146103f9578063281e34321461040c57806329fa4aa01461041f57610342565b806301cb0ef7146103475780630496d5dc146103705780631022742b14610391578063149dab0e146103a457806316279055146103c65780632339078f146103e6575b600080fd5b61035a61035536600461980b565b6107e6565b604051610367919061a2dd565b60405180910390f35b61038361037e36600461901a565b610997565b60405161036792919061a1b9565b61035a61039f36600461944d565b610b3d565b6103b76103b23660046196ca565b610cb0565b6040516103679392919061a085565b6103d96103d4366004618cf4565b610e10565b604051610367919061a2f0565b61035a6103f436600461964b565b610e1a565b61035a610407366004618f58565b611041565b61035a61041a366004619a45565b611217565b61035a61042d366004619783565b61146c565b6104456104403660046197dc565b6114db565b6040516103679392919061a2fb565b61035a610462366004618ed3565b6117b8565b61035a610475366004618f58565b611941565b61035a61048836600461901a565b611ab5565b61035a61049b3660046197dc565b611c39565b61035a6104ae36600461980b565b611ccb565b61035a6104c1366004619783565b611e61565b6103836104d436600461901a565b611fe2565b6104ec6104e73660046199a7565b61216e565b604051610367919061a349565b61050c6105073660046195b4565b6123eb565b60405161036792919061a200565b61035a610528366004618f58565b612636565b61050c61053b3660046195b4565b612bad565b61035a61054e366004618f58565b612df2565b61035a61056136600461944d565b612e58565b610579610574366004619227565b612f0d565b604051610367919061a268565b61035a6105943660046192fe565b61306e565b6103b76105a73660046196ca565b613160565b61035a6105ba366004619a45565b61316f565b61035a6105cd366004619783565b6133bc565b6105e56105e0366004619295565b61371f565b6040516103679392919061a60f565b61035a610602366004619783565b613938565b61035a610615366004618f58565b613b38565b61062d610628366004619a05565b614071565b604051610367919061a327565b61064d6106483660046198f0565b6141b8565b6040516103679392919061a330565b61062d61066a366004618fca565b6142de565b61035a61067d36600461964b565b6144f4565b61035a610690366004618f58565b6146f0565b6104456106a336600461908c565b614845565b61035a6106b6366004618f58565b614982565b6106ce6106c9366004618f58565b614ae0565b60405161036792919061a397565b61035a6106ea366004618f58565b614c30565b61035a6106fd366004619330565b614c96565b61035a610710366004618f58565b614d92565b61035a610723366004618f58565b614df8565b61035a61073636600461901a565b614fb5565b61035a610749366004618f58565b615121565b61064d61075c3660046198f0565b61527f565b61044561076f36600461908c565b615465565b6104456107823660046197dc565b615554565b61035a610795366004619374565b6157e7565b61035a6107a8366004618f58565b6158dc565b61062d6107bb366004619960565b615a0f565b6106ce6107ce366004618f58565b615bae565b6105e56107e1366004619295565b615c9a565b608081015151606090806001600160401b038111801561080557600080fd5b5060405190808252806020026020018201604052801561082f578160200160208202803683370190505b50915060005b818110156109905783600001516001600160a01b031663846ee14b8560800151838151811061086057fe5b60200260200101518660200151876040015188606001516040518563ffffffff1660e01b8152600401610896949392919061a74c565b60006040518083038186803b1580156108ae57600080fd5b505afa9250505080156108e357506040513d6000823e601f3d908101601f191682016040526108e0919081019061951c565b60015b610938573d808015610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b5060405162461bcd60e51b815260040161092f9061a57c565b60405180910390fd5b8060008151811061094557fe5b602002602001015184838151811061095957fe5b60200260200101818152505083828151811061097157fe5b6020026020010151600014156109875750610990565b50600101610835565b5050919050565b80516060908190806001600160401b03811180156109b457600080fd5b506040519080825280602002602001820160405280156109de578160200160208202803683370190505b5091506109eb8686615eaf565b92508251600014156109fd5750610b35565b60005b81811015610b3257866001600160a01b031663a8312b1d620249f0878481518110610a2757fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401610a4f9392919061a721565b60006040518083038187803b158015610a6757600080fd5b5086fa93505050508015610a9d57506040513d6000823e601f3d908101601f19168201604052610a9a919081019061951c565b60015b610ad7573d808015610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b5050610b32565b80600188510381518110610ae757fe5b6020026020010151848381518110610afb57fe5b602002602001018181525050838281518110610b1357fe5b602002602001015160001415610b295750610b32565b50600101610a00565b50505b935093915050565b606083516001600160401b0381118015610b5657600080fd5b50604051908082528060200260200182016040528015610b80578160200160208202803683370190505b50905060005b84518114610ca857306001600160a01b0316639bf3ee3562030d40878481518110610bad57fe5b6020026020010151878581518110610bc157fe5b6020026020010151876040518563ffffffff1660e01b8152600401610be89392919061a6d1565b60206040518083038187803b158015610c0057600080fd5b5086fa93505050508015610c31575060408051601f3d908101601f19168201909252610c2e9181019061956a565b60015b610c85573d808015610c5f576040519150601f19603f3d011682016040523d82523d6000602084013e610c64565b606091505b506000838381518110610c7357fe5b60200260200101818152505050610ca0565b80838381518110610c9257fe5b602002602001018181525050505b600101610b86565b509392505050565b600060608086602001515160001415610cc857610e06565b610cd487878787616195565b855191945092506001600160401b0381118015610cf057600080fd5b50604051908082528060200260200182016040528015610d1a578160200160208202803683370190505b50905060005b8151811015610e0457836001600160a01b0316637f9c0ecd620493e085888581518110610d4957fe5b60200260200101516040518463ffffffff1660e01b8152600401610d6e92919061a1de565b60206040518083038187803b158015610d8657600080fd5b5086fa93505050508015610db7575060408051601f3d908101601f19168201909252610db49181019061956a565b60015b610dc057610e04565b80838381518110610dcd57fe5b602002602001018181525050828281518110610de557fe5b602002602001015160001415610dfb5750610e04565b50600101610d20565b505b9450945094915050565b803b15155b919050565b6060610e2683856163c7565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610e5c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610e8a57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610eba57600080fd5b50604051908082528060200260200182016040528015610ee4578160200160208202803683370190505b509350610eef618538565b610ef76163fd565b905060005b82811015611034576060610f238b898481518110610f1657fe5b602002602001015161642c565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610f599060009085908a90899060040161a3ea565b600060405180830381600087803b158015610f7357600080fd5b505af1925050508015610fa857506040513d6000823e601f3d908101601f19168201604052610fa591908101906193ca565b60015b610fe3573d808015610fd6576040519150601f19603f3d011682016040523d82523d6000602084013e610fdb565b606091505b505050611034565b600081600181518110610ff257fe5b60200260200101516000190290506000811361101057505050611034565b8089858151811061101d57fe5b602002602001018181525050505050600101610efc565b5050505050949350505050565b606061104d83856163c7565b8151806001600160401b038111801561106557600080fd5b5060405190808252806020026020018201604052801561108f578160200160208202803683370190505b50915060006001600160a01b038616156110b2576110ad87876164be565b6110b5565b60005b905060006001600160a01b038616156110d7576110d288876164be565b6110da565b60005b905060005b8381101561120b5760016001600160a01b03881661113d5761111c84632640f62c60e01b89858151811061110f57fe5b602002602001015161653d565b87848151811061112857fe5b602002602001018193508281525050506111d7565b6001600160a01b0389166111635761111c836359e9486260e01b89858151811061110f57fe5b600061117d846359e9486260e01b8a868151811061110f57fe5b9250905080156111ba57611199856309903d8b60e21b8361653d565b8885815181106111a557fe5b602002602001018194508281525050506111d5565b60008784815181106111c857fe5b6020026020010181815250505b505b8015806111f757508582815181106111eb57fe5b60200260200101516000145b15611202575061120b565b506001016110df565b50505050949350505050565b606061122383856163c7565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190618d10565b8451909150806001600160401b03811180156112ba57600080fd5b506040519080825280602002602001820160405280156112e4578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132057600080fd5b505afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190618d10565b6001600160a01b0316866001600160a01b0316141580156113fb5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ad57600080fd5b505afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190618d10565b6001600160a01b0316876001600160a01b031614155b1561140857505050611464565b60005b8181101561120b5760006114368a898b8a868151811061142757fe5b60200260200101518989616620565b905080611443575061120b565b8086838151811061145057fe5b60209081029190910101525060010161140b565b949350505050565b6040805160608181019092526114d2908061148b86896080840161a496565b604051602081830303815290604052815260200186886040516020016114b292919061a496565b60405160208183030381529060405281526020016168e181525083616a14565b95945050505050565b60008060606114ea85876163c7565b8351806001600160401b038111801561150257600080fd5b5060405190808252806020026020018201604052801561152c578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c69061155f908a908a90600401619f21565b60206040518083038186803b15801561157757600080fd5b505afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190618d10565b925060006001600160a01b038416156115cd5750600193508661166c565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906115fe908a908c90600401619f21565b60206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190618d10565b93506001600160a01b038416611665575050610e06565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd919061954e565b6116e8575050610e06565b60005b828110156117ab5760006117658a87858e602001516040516020016117139493929190619f3b565b6040516020818303038152906040528a88868f6020015160405160200161173d9493929190619f3b565b6040516020818303038152906040528a858151811061175857fe5b6020026020010151616c11565b90508085838151811061177457fe5b60200260200101818152505084828151811061178c57fe5b6020026020010151600014156117a257506117ab565b506001016116eb565b5050509450945094915050565b8051606090806001600160401b03811180156117d357600080fd5b506040519080825280602002602001820160405280156117fd578160200160208202803683370190505b5091506001600160a01b03871661181457506114d2565b60005b818110156119365760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061184857fe5b60200260200101516040516024016118639493929190619f9a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118a19190619ed8565b6000604051808303818686fa925050503d80600081146118dd576040519150601f19603f3d011682016040523d82523d6000602084013e6118e2565b606091505b5091509150600082156119065781806020019051810190611903919061956a565b90505b8061191357505050611936565b8086858151811061192057fe5b6020908102919091010152505050600101611817565b505095945050505050565b606061194d83856163c7565b8151806001600160401b038111801561196557600080fd5b5060405190808252806020026020018201604052801561198f578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b03166372ea9076620c350088888886815181106119be57fe5b60200260200101516040518563ffffffff1660e01b81526004016119e49392919061a01c565b60206040518083038187803b1580156119fc57600080fd5b5086fa93505050508015611a2d575060408051601f3d908101601f19168201909252611a2a9181019061956a565b60015b611a67573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b606091505b5050611aab565b80848381518110611a7457fe5b602002602001018181525050838281518110611a8c57fe5b602002602001015160001415611aa25750611aab565b50600101611995565b5050949350505050565b8051606090806001600160401b0381118015611ad057600080fd5b50604051908082528060200260200182016040528015611afa578160200160208202803683370190505b50915060005b81811015611c3057856001600160a01b031663d06ca61f620249f0868481518110611b2757fe5b6020026020010151886040518463ffffffff1660e01b8152600401611b4d92919061a708565b60006040518083038187803b158015611b6557600080fd5b5086fa93505050508015611b9b57506040513d6000823e601f3d908101601f19168201604052611b98919081019061951c565b60015b611bd5573d808015611bc9576040519150601f19603f3d011682016040523d82523d6000602084013e611bce565b606091505b5050611c30565b80600187510381518110611be557fe5b6020026020010151848381518110611bf957fe5b602002602001018181525050838281518110611c1157fe5b602002602001015160001415611c275750611c30565b50600101611b00565b50509392505050565b6060611c4583856163c7565b84602001516001600160a01b0316846001600160a01b0316141580611c77575084516001600160a01b03848116911614155b15610ca85781516060816001600160401b0381118015611c9657600080fd5b50604051908082528060200260200182016040528015611cc0578160200160208202803683370190505b509250611464915050565b608081015151606090806001600160401b0381118015611cea57600080fd5b50604051908082528060200260200182016040528015611d14578160200160208202803683370190505b50915060005b818110156109905783600001516001600160a01b0316633bbc8a1e85608001518381518110611d4557fe5b60200260200101518660200151876040015188606001516040518563ffffffff1660e01b8152600401611d7b949392919061a74c565b60006040518083038186803b158015611d9357600080fd5b505afa925050508015611dc857506040513d6000823e601f3d908101601f19168201604052611dc5919081019061951c565b60015b611e02573d808015611df6576040519150601f19603f3d011682016040523d82523d6000602084013e611dfb565b606091505b5050610990565b8060018660200151510381518110611e1657fe5b6020026020010151848381518110611e2a57fe5b602002602001018181525050838281518110611e4257fe5b602002602001015160001415611e585750610990565b50600101611d1a565b8051606090806001600160401b0381118015611e7c57600080fd5b50604051908082528060200260200182016040528015611ea6578160200160208202803683370190505b50915060005b81811015611aab576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611edd57fe5b6020026020010151604051602401611ef79392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f359190619ed8565b6000604051808303818686fa925050503d8060008114611f71576040519150601f19603f3d011682016040523d82523d6000602084013e611f76565b606091505b509150915060008215611f9a5781806020019051810190611f97919061956a565b90505b80868581518110611fa757fe5b602002602001018181525050858481518110611fbf57fe5b602002602001015160001415611fd757505050611aab565b505050600101611eac565b80516060908190806001600160401b0381118015611fff57600080fd5b50604051908082528060200260200182016040528015612029578160200160208202803683370190505b5091506120368686615eaf565b92508251600014156120485750610b35565b60005b81811015610b3257866001600160a01b0316639e269b68620249f087848151811061207257fe5b6020026020010151878a6040518563ffffffff1660e01b815260040161209a9392919061a721565b60006040518083038187803b1580156120b257600080fd5b5086fa935050505080156120e857506040513d6000823e601f3d908101601f191682016040526120e5919081019061951c565b60015b612116573d808015610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b8060008151811061212357fe5b602002602001015184838151811061213757fe5b60200260200101818152505083828151811061214f57fe5b6020026020010151600014156121655750610b32565b5060010161204b565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106121a557fe5b6020908102919091010152606060006040519080825280602002602001820160405280156121dd578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156122ce576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a120906122369089906001908890889060040161a0bb565b60006040518083038187803b15801561224e57600080fd5b5086fa9350505050801561228457506040513d6000823e601f3d908101601f191682016040526122819190810190619582565b60015b6122be573d8080156122b2576040519150601f19603f3d011682016040523d82523d6000602084013e6122b7565b606091505b50506122c9565b935061146492505050565b6123e0565b87606001516001600160a01b0316856001600160a01b03161415612324576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090612236908a906001908890889060040161a0bb565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090612364908a90600190889088908d9084908490849060040161a0fe565b60006040518083038187803b15801561237c57600080fd5b5086fa935050505080156123b257506040513d6000823e601f3d908101601f191682016040526123af9190810190619582565b60015b6122be573d808015611034576040519150601f19603f3d011682016040523d82523d6000602084013e611034565b505050949350505050565b606080606061246c866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124649190618d10565b866000616d4a565b905083516001600160401b038111801561248557600080fd5b506040519080825280602002602001820160405280156124af578160200160208202803683370190505b50915083516001600160401b03811180156124c957600080fd5b506040519080825280602002602001820160405280156124fd57816020015b60608152602001906001900390816124e85790505b50925060005b8451811015610b325760606000805b84518110156125ee57606061253a8a87848151811061252d57fe5b60200260200101516171e0565b90508a6001600160a01b031663cdca1753620493e0838c898151811061255c57fe5b60200260200101516040518463ffffffff1660e01b815260040161258192919061a35c565b602060405180830381600088803b15801561259b57600080fd5b5087f1935050505080156125cc575060408051601f3d908101601f191682019092526125c99181019061956a565b60015b6125d5576125e5565b8084116125e3578093508194505b505b50600101612512565b50806125fb575050610b32565b8085848151811061260857fe5b6020026020010181815250508186848151811061262157fe5b60209081029190910101525050600101612503565b80516060908590806001600160401b038111801561265357600080fd5b5060405190808252806020026020018201604052801561267d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906126ad908990600401619ef4565b60206040518083038186803b1580156126c557600080fd5b505afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd919061954e565b15806127825750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612730908890600401619ef4565b60206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061954e565b155b1561278e575050611464565b61279661855f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906127c2908a90600401619ef4565b60206040518083038186803b1580156127da57600080fd5b505afa1580156127ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612812919061956a565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612840908990600401619ef4565b60206040518083038186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612890919061956a565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906128c1908a90600401619ef4565b60206040518083038186803b1580156128d957600080fd5b505afa1580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612911919061956a565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690612944908990600401619ef4565b60206040518083038186803b15801561295c57600080fd5b505afa158015612970573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612994919061956a565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061956a565b608082015260005b8281101561120b57612a4182602001516003670de0b6b3a764000081612a3857fe5b0460010161733b565b868281518110612a4d57fe5b60200260200101511115612a605761120b565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c8881518110612a9357fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401612ac19695949392919061a7c5565b60206040518083038187803b158015612ad957600080fd5b5086fa93505050508015612b0a575060408051601f3d908101601f19168201909252612b079181019061956a565b60015b612b44573d808015612b38576040519150601f19603f3d011682016040523d82523d6000602084013e612b3d565b606091505b505061120b565b8251612b5c906002670de0b6b3a76400005b0461733b565b811115612b69575061120b565b80868381518110612b7657fe5b602002602001018181525050858281518110612b8e57fe5b602002602001015160001415612ba4575061120b565b50600101612a16565b6060806060612bee866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561242c57600080fd5b90506060612bfb86617398565b905084516001600160401b0381118015612c1457600080fd5b50604051908082528060200260200182016040528015612c3e578160200160208202803683370190505b50925084516001600160401b0381118015612c5857600080fd5b50604051908082528060200260200182016040528015612c8c57816020015b6060815260200190600190039081612c775790505b50935060005b8551811015612de75760606000805b8551811015612d9f576060612cd186612ccc898581518110612cbf57fe5b6020026020010151617430565b6171e0565b90508b6001600160a01b0316632f80bb1d620493e0838d8981518110612cf357fe5b60200260200101516040518463ffffffff1660e01b8152600401612d1892919061a35c565b602060405180830381600088803b158015612d3257600080fd5b5087f193505050508015612d63575060408051601f3d908101601f19168201909252612d609181019061956a565b60015b612d6c57612d96565b831580612d795750808410155b15612d9457809350612d918c89858151811061252d57fe5b94505b505b50600101612ca1565b5080612dac575050612de7565b80868481518110612db957fe5b60200260200101818152505081878481518110612dd257fe5b60209081029190910101525050600101612c92565b505050935093915050565b6040805160608181019092526114d29080612e11868960808401619f21565b60405160208183030381529060405281526020018688604051602001612e38929190619f21565b60405160208183030381529060405281526020016174c881525083616a14565b6060612e65848484610b3d565b905060005b8451811015610ca857818181518110612e7f57fe5b6020026020010151600014612f0557612eec828281518110612e9d57fe5b6020026020010151868381518110612eb157fe5b6020026020010151606001516001600160801b0316878481518110612ed257fe5b6020026020010151604001516001600160801b03166175dc565b828281518110612ef857fe5b6020026020010181815250505b600101612e6a565b6060816001600160401b0381118015612f2557600080fd5b50604051908082528060200260200182016040528015612f5f57816020015b612f4c61858e565b815260200190600190039081612f445790505b50905060005b808314613067576001828281518110612f7a57fe5b602090810291909101810151911515910152838382818110612f9857fe5b9050602002810190612faa919061a7ed565b15159050612fb75761305f565b30848483818110612fc457fe5b9050602002810190612fd6919061a7ed565b604051612fe4929190619ec8565b6000604051808303816000865af19150503d8060008114613021576040519150601f19603f3d011682016040523d82523d6000602084013e613026565b606091505b5083838151811061303357fe5b602002602001015160200184848151811061304a57fe5b60209081029190910101519190915290151590525b600101612f65565b5092915050565b606081516001600160401b038111801561308757600080fd5b506040519080825280602002602001820160405280156130b1578160200160208202803683370190505b50905060005b8251811461315a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106130f557fe5b60200260200101516001600160a01b0316146131355761313083828151811061311a57fe5b60200260200101516001600160a01b0316617600565b613138565b60125b60ff1682828151811061314757fe5b60209081029190910101526001016130b7565b50919050565b60006060809450945094915050565b606061317b83856163c7565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156131bf57600080fd5b505afa1580156131d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f79190618d10565b8451909150806001600160401b038111801561321257600080fd5b5060405190808252806020026020018201604052801561323c578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561327857600080fd5b505afa15801561328c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b09190618d10565b6001600160a01b0316866001600160a01b0316141580156133535750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333d9190618d10565b6001600160a01b0316876001600160a01b031614155b1561336057505050611464565b60005b8181101561120b57600061338e8a898b8a868151811061337f57fe5b602002602001015189896176a2565b90508061339b575061120b565b808683815181106133a857fe5b602090810291909101015250600101613363565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b81526004016133f3919061a327565b60206040518083038186803b15801561340b57600080fd5b505afa15801561341f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613443919061956a565b8651604051631e01043960e01b81526001600160a01b0390911690631e0104399061347690600f89900b9060040161a327565b60206040518083038186803b15801561348e57600080fd5b505afa1580156134a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c6919061956a565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b81526004016134fe919061a327565b60806040518083038186803b15801561351657600080fd5b505afa15801561352a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354e9190619b7f565b935050505080601203600a0a828161356257fe5b85519190049250806001600160401b038111801561357f57600080fd5b506040519080825280602002602001820160405280156135a9578160200160208202803683370190505b50935060005b8181101561120b57600060608a600001516001600160a01b0316620927c08c602001518c8c8c88815181106135e057fe5b60200260200101516040516024016135fa9392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516136389190619ed8565b6000604051808303818686fa925050503d8060008114613674576040519150601f19603f3d011682016040523d82523d6000602084013e613679565b606091505b50915091506000821561369d578180602001905181019061369a919061956a565b90505b8681106136d757835b858110156136ce57878982815181106136bb57fe5b60209081029190910101526001016136a6565b5050505061120b565b808885815181106136e457fe5b6020026020010181815250508784815181106136fc57fe5b6020026020010151600014156137145750505061120b565b5050506001016135af565b6137276185a6565b61372f6185a6565b600080805b875181146138345761377b602089838151811061374d57fe5b60200260200101515103878a848151811061376457fe5b60200260200101516179349092919063ffffffff16565b60006060306001600160a01b03168a848151811061379557fe5b60200260200101516040516137aa9190619ed8565b6000604051808303816000865af19150503d80600081146137e7576040519150601f19603f3d011682016040523d82523d6000602084013e6137ec565b606091505b5091509150811561382a57600061381060208351038361794490919063ffffffff16565b90508481111561382857838852602088018290529350835b505b5050600101613734565b5080613840575061392f565b60005b8651811461392c57613873602088838151811061385c57fe5b602002602001015151038389848151811061376457fe5b60006060306001600160a01b031689848151811061388d57fe5b60200260200101516040516138a29190619ed8565b6000604051808303816000865af19150503d80600081146138df576040519150601f19603f3d011682016040523d82523d6000602084013e6138e4565b606091505b5091509150811561392257600061390860208351038361794490919063ffffffff16565b90508581111561392057838752602087018290529450845b505b5050600101613843565b50505b93509350939050565b60408401516060906001600160e01b0319166139ba5760408051606081019091526139b3908061396c86896080840161a496565b6040516020818303038152906040528152602001868860405160200161399392919061a496565b604051602081830303815290604052815260200161795081525083616a14565b9050611464565b8151806001600160401b03811180156139d257600080fd5b506040519080825280602002602001820160405280156139fc578160200160208202803683370190505b50915060005b81811015611aab576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110613a3357fe5b6020026020010151604051602401613a4d9392919061a478565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613a8b9190619ed8565b6000604051808303818686fa925050503d8060008114613ac7576040519150601f19603f3d011682016040523d82523d6000602084013e613acc565b606091505b509150915060008215613af05781806020019051810190613aed919061956a565b90505b80868581518110613afd57fe5b602002602001018181525050858481518110613b1557fe5b602002602001015160001415613b2d57505050611aab565b505050600101613a02565b80516060908590806001600160401b0381118015613b5557600080fd5b50604051908082528060200260200182016040528015613b7f578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490613baf908990600401619ef4565b60206040518083038186803b158015613bc757600080fd5b505afa158015613bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bff919061954e565b1580613c845750604051630bcded8960e21b81526001600160a01b03831690632f37b62490613c32908890600401619ef4565b60206040518083038186803b158015613c4a57600080fd5b505afa158015613c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c82919061954e565b155b15613c90575050611464565b613c9861855f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90613cc4908a90600401619ef4565b60206040518083038186803b158015613cdc57600080fd5b505afa158015613cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d14919061956a565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90613d42908990600401619ef4565b60206040518083038186803b158015613d5a57600080fd5b505afa158015613d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d92919061956a565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690613dc3908a90600401619ef4565b60206040518083038186803b158015613ddb57600080fd5b505afa158015613def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e13919061956a565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613e46908990600401619ef4565b60206040518083038186803b158015613e5e57600080fd5b505afa158015613e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e96919061956a565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015613ed857600080fd5b505afa158015613eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f10919061956a565b608082015260005b8281101561120b578151613f36906002670de0b6b3a7640000612b56565b868281518110613f4257fe5b60200260200101511115613f555761120b565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110613f8857fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401613fb69695949392919061a7c5565b60206040518083038187803b158015613fce57600080fd5b5086fa93505050508015613fff575060408051601f3d908101601f19168201909252613ffc9181019061956a565b60015b61402d573d808015612b38576040519150601f19603f3d011682016040523d82523d6000602084013e612b3d565b8086838151811061403a57fe5b60200260200101818152505085828151811061405257fe5b602002602001015160001415614068575061120b565b50600101613f18565b6000808351600381111561408157fe5b1480614099575060018351600381111561409757fe5b145b806140af575060408401516001600160801b0316155b806140c5575060608401516001600160801b0316155b156140d2575060006141b1565b6140da6185c0565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b815260040161410b92919061a6b4565b60a06040518083038186803b15801561412357600080fd5b505afa158015614137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415b9190619abd565b9194509250905060018360200151600481111561417457fe5b14158061417f575080155b80614192575086516001600160a01b0316155b156141a357600093505050506141b1565b506001600160801b03169150505b9392505050565b60006060806141c785876163c7565b6141d28787876179a4565b9250826141de57610e06565b60405163276fdad960e11b81523090634edfb5b290614207908a9087908b908b9060040161a67b565b60006040518083038186803b15801561421f57600080fd5b505afa158015614233573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261425b9190810190619582565b8760800181905250866080015191506142d26040518060600160405280878a60405160200161428b92919061a195565b6040516020818303038152906040528152602001888a6040516020016142b292919061a195565b6040516020818303038152906040528152602001617b0b81525085616a14565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b815260040161430f929190619f21565b60206040518083038186803b15801561432757600080fd5b505afa15801561433b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435f9190618d10565b90506001600160a01b038116614379576000915050611464565b60006001600160a01b0386161561440b576040516370a0823160e01b81526001600160a01b038716906370a08231906143b6908590600401619ef4565b60206040518083038186803b1580156143ce57600080fd5b505afa1580156143e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614406919061956a565b614417565b816001600160a01b0316315b90508381101561442c57600092505050611464565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090614461908a908a908a9060040161a01c565b60206040518083038187803b15801561447957600080fd5b5086fa935050505080156144aa575060408051601f3d908101601f191682019092526144a79181019061956a565b60015b6144ea573d8080156144d8576040519150601f19603f3d011682016040523d82523d6000602084013e6144dd565b606091505b5060009350505050611464565b9250611464915050565b606061450083856163c7565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061453657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061456457fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561459457600080fd5b506040519080825280602002602001820160405280156145be578160200160208202803683370190505b5093506145c9618538565b6145d16163fd565b905060005b828110156110345760606145f08b898481518110610f1657fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906146269060019085908a90899060040161a3ea565b600060405180830381600087803b15801561464057600080fd5b505af192505050801561467557506040513d6000823e601f3d908101601f1916820160405261467291908101906193ca565b60015b6146a3573d808015610fd6576040519150601f19603f3d011682016040523d82523d6000602084013e610fdb565b6000816000815181106146b257fe5b60200260200101519050600081136146cc57505050611034565b808985815181106146d957fe5b6020026020010181815250505050506001016145d6565b8051606090806001600160401b038111801561470b57600080fd5b50604051908082528060200260200182016040528015614735578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663343fbcdd62061a80888888868151811061476457fe5b60200260200101516040518563ffffffff1660e01b815260040161478a9392919061a01c565b60206040518083038187803b1580156147a257600080fd5b5086fa935050505080156147d3575060408051601f3d908101601f191682019092526147d09181019061956a565b60015b614801573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b8084838151811061480e57fe5b60200260200101818152505083828151811061482657fe5b60200260200101516000141561483c5750611aab565b5060010161473b565b600080606061485485876163c7565b8351806001600160401b038111801561486c57600080fd5b50604051908082528060200260200182016040528015614896578160200160208202803683370190505b5091506148a589898989617bf2565b945092506001600160a01b0383166148bd5750614977565b60005b8181101561497457600061492e8986886040516020016148e293929190619fc4565b60405160208183030381529060405289878960405160200161490693929190619fc4565b60405160208183030381529060405289858151811061492157fe5b6020026020010151617d47565b90508084838151811061493d57fe5b60200260200101818152505083828151811061495557fe5b60200260200101516000141561496b5750614974565b506001016148c0565b50505b955095509592505050565b606061498e83856163c7565b8151806001600160401b03811180156149a657600080fd5b506040519080825280602002602001820160405280156149d0578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663144a2752620f424087898886815181106149ff57fe5b60200260200101516040518563ffffffff1660e01b8152600401614a259392919061a01c565b60206040518083038187803b158015614a3d57600080fd5b5086fa93505050508015614a6e575060408051601f3d908101601f19168201909252614a6b9181019061956a565b60015b614a9c573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b80848381518110614aa957fe5b602002602001018181525050838281518110614ac157fe5b602002602001015160001415614ad75750611aab565b506001016149d6565b60006060614aee84866163c7565b8251806001600160401b0381118015614b0657600080fd5b50604051908082528060200260200182016040528015614b30578160200160208202803683370190505b50915060005b81811015614ba5576000614b5f898989898681518110614b5257fe5b60200260200101516142de565b905080848381518110614b6e57fe5b602002602001018181525050838281518110614b8657fe5b602002602001015160001415614b9c5750614ba5565b50600101614b36565b5060405163901754d760e01b81526001600160a01b0388169063901754d790614bd49089908990600401619f21565b60206040518083038186803b158015614bec57600080fd5b505afa158015614c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c249190618d10565b92505094509492505050565b6040805160608181019092526114d29080614c4f868960808401619f21565b60405160208183030381529060405281526020018688604051602001614c76929190619f21565b6040516020818303038152906040528152602001617e3981525083616a14565b606082516001600160401b0381118015614caf57600080fd5b50604051908082528060200260200182016040528015614cd9578160200160208202803683370190505b50905060005b83518114613067577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110614d1d57fe5b60200260200101516001600160a01b031614614d6757614d6283858381518110614d4357fe5b60200260200101516001600160a01b0316617e8090919063ffffffff16565b614d73565b826001600160a01b0316315b828281518110614d7f57fe5b6020908102919091010152600101614cdf565b6040805160608181019092526114d29080614db1868960808401619f21565b60405160208183030381529060405281526020018688604051602001614dd8929190619f21565b6040516020818303038152906040528152602001617f4a81525083616a14565b6060614e0483856163c7565b8151806001600160401b0381118015614e1c57600080fd5b50604051908082528060200260200182016040528015614e46578160200160208202803683370190505b50915060006001600160a01b03861615614e6957614e6487876164be565b614e6c565b60005b905060006001600160a01b03861615614e8e57614e8988876164be565b614e91565b60005b905060005b8381101561120b5760016001600160a01b038816614ee757614ec6846395b68fe760e01b89858151811061110f57fe5b878481518110614ed257fe5b60200260200101819350828152505050614f81565b6001600160a01b038916614f0d57614ec68363cd7724c360e01b89858151811061110f57fe5b6000614f27856395b68fe760e01b8a868151811061110f57fe5b925090508015614f6457614f438463cd7724c360e01b8361653d565b888581518110614f4f57fe5b60200260200101819450828152505050614f7f565b6000878481518110614f7257fe5b6020026020010181815250505b505b801580614fa15750858281518110614f9557fe5b60200260200101516000145b15614fac575061120b565b50600101614e96565b8051606090806001600160401b0381118015614fd057600080fd5b50604051908082528060200260200182016040528015614ffa578160200160208202803683370190505b50915060005b81811015611c3057856001600160a01b0316631f00ca74620249f086848151811061502757fe5b6020026020010151886040518463ffffffff1660e01b815260040161504d92919061a708565b60006040518083038187803b15801561506557600080fd5b5086fa9350505050801561509b57506040513d6000823e601f3d908101601f19168201604052615098919081019061951c565b60015b6150c9573d808015611bc9576040519150601f19603f3d011682016040523d82523d6000602084013e611bce565b806000815181106150d657fe5b60200260200101518483815181106150ea57fe5b60200260200101818152505083828151811061510257fe5b6020026020010151600014156151185750611c30565b50600101615000565b606061512d83856163c7565b8151806001600160401b038111801561514557600080fd5b5060405190808252806020026020018201604052801561516f578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663ff1fd974620f4240888888868151811061519e57fe5b60200260200101516040518563ffffffff1660e01b81526004016151c49392919061a01c565b60206040518083038187803b1580156151dc57600080fd5b5086fa9350505050801561520d575060408051601f3d908101601f1916820190925261520a9181019061956a565b60015b61523b573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b8084838151811061524857fe5b60200260200101818152505083828151811061526057fe5b6020026020010151600014156152765750611aab565b50600101615175565b600060608061528e85876163c7565b6152998787876179a4565b9250826152a557610e06565b60405163276fdad960e11b81523090634edfb5b2906152ce908a9087908b908b9060040161a67b565b60006040518083038186803b1580156152e657600080fd5b505afa1580156152fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526153229190810190619582565b608088018190528451909250806001600160401b038111801561534457600080fd5b5060405190808252806020026020018201604052801561536e578160200160208202803683370190505b50915060005b81811015615459576000306001600160a01b031663f1ed7fa48b8b8b8b878151811061539c57fe5b60200260200101516040518563ffffffff1660e01b81526004016153c3949392919061a645565b60206040518083038186803b1580156153db57600080fd5b505afa1580156153ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615413919061956a565b90508084838151811061542257fe5b60200260200101818152505083828151811061543a57fe5b6020026020010151600014156154505750615459565b50600101615374565b50509450945094915050565b600080606061547485876163c7565b61548088888888617bf2565b935091506001600160a01b03821661549757614977565b8351806001600160401b03811180156154af57600080fd5b506040519080825280602002602001820160405280156154d9578160200160208202803683370190505b50604080516060810190915290925061554690806154fd8987891560808501619fc4565b604051602081830303815290604052815260200189868860405160200161552693929190619fc4565b6040516020818303038152906040528152602001617d4781525086616a14565b915050955095509592505050565b600080606061556385876163c7565b8351806001600160401b038111801561557b57600080fd5b506040519080825280602002602001820160405280156155a5578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906155d8908a908a90600401619f21565b60206040518083038186803b1580156155f057600080fd5b505afa158015615604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156289190618d10565b925060006001600160a01b03841615615646575060019350866156e5565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690615677908a908c90600401619f21565b60206040518083038186803b15801561568f57600080fd5b505afa1580156156a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156c79190618d10565b93506001600160a01b0384166156de575050610e06565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561571e57600080fd5b505afa158015615732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615756919061954e565b615761575050610e06565b6157d960405180606001604052808987858e6020015160405160200161578a9493929190619f3b565b60405160208183030381529060405281526020018a87858e602001516040516020016157b99493929190619f3b565b6040516020818303038152906040528152602001616c1181525087616a14565b925050509450945094915050565b606083516001600160401b038111801561580057600080fd5b5060405190808252806020026020018201604052801561582a578160200160208202803683370190505b50905060005b84518114610ca8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061586e57fe5b60200260200101516001600160a01b0316146158ba576158b5848487848151811061589557fe5b60200260200101516001600160a01b0316617fff9092919063ffffffff16565b6158bd565b60005b8282815181106158c957fe5b6020908102919091010152600101615830565b8051606090806001600160401b03811180156158f757600080fd5b50604051908082528060200260200182016040528015615921578160200160208202803683370190505b50915060005b81811015611aab57866001600160a01b031663838e6a22620493e0888888868151811061595057fe5b60200260200101516040518563ffffffff1660e01b81526004016159769392919061a01c565b60206040518083038187803b15801561598e57600080fd5b5086fa935050505080156159bf575060408051601f3d908101601f191682019092526159bc9181019061956a565b60015b6159ed573d808015611a5b576040519150601f19603f3d011682016040523d82523d6000602084013e611a60565b808483815181106159fa57fe5b60200260200101818152505050600101615927565b600084608001515160001415615a2757506000611464565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b031614615a615786615a77565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615a9a5786615ab0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b8152600401615ad895949392919061a040565b60206040518083038187803b158015615af057600080fd5b5086fa93505050508015615b21575060408051601f3d908101601f19168201909252615b1e9181019061956a565b60015b615b5f573d808015615b4f576040519150601f19603f3d011682016040523d82523d6000602084013e615b54565b606091505b506000915050611464565b6000615b6a856180cb565b60ff1690506000615b7a876180cb565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281615b9b57fe5b0481615ba357fe5b049350505050611464565b60006060615bbc84866163c7565b8251806001600160401b0381118015615bd457600080fd5b50604051908082528060200260200182016040528015615bfe578160200160208202803683370190505b509150615c6960405180606001604052808988604051602001615c22929190619f21565b60405160208183030381529060405281526020018989604051602001615c49929190619f21565b60405160208183030381529060405281526020016180d681525085616a14565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790614bd49089908990600401619f21565b615ca26185a6565b615caa6185a6565b6000198060005b86518114615da657615ce16020888381518110615cca57fe5b602002602001015151038789848151811061376457fe5b60006060306001600160a01b0316898481518110615cfb57fe5b6020026020010151604051615d109190619ed8565b6000604051808303816000865af19150503d8060008114615d4d576040519150601f19603f3d011682016040523d82523d6000602084013e615d52565b606091505b50915091508115615d9c576000615d7660208351038361794490919063ffffffff16565b9050600081118015615d8757508481105b15615d9a57838752602087018290529350835b505b5050600101615cb1565b50600019811415615db7575061392f565b60005b8751811461392c57615dea6020898381518110615dd357fe5b60200260200101515103838a848151811061376457fe5b60006060306001600160a01b03168a8481518110615e0457fe5b6020026020010151604051615e199190619ed8565b6000604051808303816000865af19150503d8060008114615e56576040519150601f19603f3d011682016040523d82523d6000602084013e615e5b565b606091505b50915091508115615ea5576000615e7f60208351038361794490919063ffffffff16565b9050600081118015615e9057508581105b15615ea357838852602088018290529450845b505b5050600101615dba565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015615eec57600080fd5b505afa158015615f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615f249190618d10565b905060018351036001600160401b0381118015615f4057600080fd5b50604051908082528060200260200182016040528015615f6a578160200160208202803683370190505b50915060005b825181101561618c576060826001600160a01b0316635b1dc86f620249f0878581518110615f9a57fe5b6020026020010151888660010181518110615fb157fe5b60200260200101516040518463ffffffff1660e01b8152600401615fd6929190619f21565b60006040518083038187803b158015615fee57600080fd5b5086fa9350505050801561602457506040513d6000823e601f3d908101601f1916820160405261602191908101906190c5565b60015b616073573d808015616052576040519150601f19603f3d011682016040523d82523d6000602084013e616057565b606091505b5050604080516000815260208101909152935061618f92505050565b60006001825110156160975760405162461bcd60e51b815260040161092f9061a5a6565b60005b82518110156161805760008382815181106160b157fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156160f157600080fd5b505afa158015616105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616129919061956a565b9050828111156161775780925083828151811061614257fe5b602002602001015188878151811061615657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161609a565b50505050600101615f70565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156161e957600080fd5b505afa1580156161fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616221919061956a565b6040518263ffffffff1660e01b815260040161623d919061a327565b60206040518083038186803b15801561625557600080fd5b505afa158015616269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061628d9190618d10565b9150856020015151600014156162a2576163be565b6000805b8760200151518110156163bb576002886020015182815181106162c557fe5b60200260200101515110156162d9576163b3565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106162fc57fe5b60200260200101518860018a51038151811061631457fe5b60200260200101516040518463ffffffff1660e01b815260040161633992919061a1de565b60206040518083038187803b15801561635157600080fd5b5086fa93505050508015616382575060408051601f3d908101601f1916820190925261637f9181019061956a565b60015b61638b576163b3565b828111156163b157809250886020015182815181106163a657fe5b602002602001015193505b505b6001016162a6565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156163f95760405162461bcd60e51b815260040161092f9061a4f2565b5050565b616405618538565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61644e6185e2565b8152602001906001900390816164465790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106164ac57fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906164ed908590600401619ef4565b60206040518083038186803b15801561650557600080fd5b505afa158015616519573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b19190618d10565b6000806001600160a01b03851661655357610b35565b6060856001600160a01b0316620249f08686604051602401616575919061a327565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516165b39190619ed8565b6000604051808303818686fa925050503d80600081146165ef576040519150601f19603f3d011682016040523d82523d6000602084013e6165f4565b606091505b50909250905081156166175780806020019051810190616614919061956a565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401616656919061a327565b60a06040518083038186803b15801561666e57600080fd5b505afa158015616682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906166a69190619bb4565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b031614156167ce5760006166e58964e8d4a51000618126565b905060006167096b033b2e3c9fd0803ce8000000616703888561815c565b90618126565b905084811061672157600096505050505050506168d7565b60006167b0670de0b6b3a76400006167aa8c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561676b57600080fd5b505afa15801561677f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906167a3919061956a565b8690618126565b90618178565b905060006167be84836181a2565b98506168d7975050505050505050565b8a604001516001600160a01b03168a6001600160a01b031614156168ce578784811115616803576000955050505050506168d7565b600061681f6b033b2e3c9fd0803ce800000061670388856181a2565b905083811161683757600096505050505050506168d7565b60006168bc8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561687557600080fd5b505afa158015616889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906168ad919061956a565b670de0b6b3a76400009061815c565b905060006167be826167aa8688618126565b60009450505050505b9695505050505050565b6000806168ec618614565b858060200190518101906169009190619616565b9150915060008580602001905181019061691a91906195fa565b905060006060306322db5ed160e21b8587866169358c6181c1565b604051602401616948949392919061a5dd565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516169869190619ed8565b600060405180830381855afa9150503d80600081146169c1576040519150601f19603f3d011682016040523d82523d6000602084013e6169c6565b606091505b5091509150816169de576000955050505050506141b1565b808060200190518101906169f2919061951c565b6000815181106169fe57fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015616a2d57600080fd5b50604051908082528060200260200182016040528015616a57578160200160208202803683370190505b509050815160001415616a695761618f565b6000616a9a8460000151856020015185600081518110616a8557fe5b6020026020010151876040015163ffffffff16565b905080616aa7575061618f565b6000616ac48560200151866000015184886040015163ffffffff16565b905080616ad257505061618f565b60005b8451811015616c085760005b6005811015616bca57616b08868381518110616af957fe5b60200260200101518486618202565b935083616b1457616bca565b616b2361271561271086618202565b935083616b2f57616bca565b6000616b4c88602001518960000151878b6040015163ffffffff16565b905080616b595750616bca565b809350868381518110616b6857fe5b60200260200101518410616bc1576000878481518110616b8457fe5b6020026020010151612710898681518110616b9b57fe5b602002602001015187030281616bad57fe5b04905060058111616bbf575050616bca565b505b50600101616ae1565b50616be9858281518110616bda57fe5b60200260200101518385618202565b848281518110616bf557fe5b6020908102919091010152600101616ad5565b50505092915050565b600080600080600087806020019051810190616c2d9190618d65565b9350935093509350816001600160a01b0316846001600160a01b03161415616d17576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090616c80908a9060040161a327565b60206040518083038187803b158015616c9857600080fd5b5086fa93505050508015616cc9575060408051601f3d908101601f19168201909252616cc69181019061956a565b60015b616d0b573d808015616cf7576040519150601f19603f3d011682016040523d82523d6000602084013e616cfc565b606091505b506000955050505050506141b1565b94506141b19350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090616c809087908b90600401619f08565b60606002828451031015616d705760405162461bcd60e51b815260040161092f9061a4ae565b616d78618634565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110616dcc57fe5b602002602001015190506000878760010181518110616de757fe5b6020026020010151905060005b6003811015616edc5760008a6001600160a01b0316631698ee8285858a8660038110616e1c57fe5b60200201516040518463ffffffff1660e01b8152600401616e3f9392919061a36f565b60206040518083038186803b158015616e5757600080fd5b505afa158015616e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e8f9190618d10565b9050616e9a8161825a565b15616ed35780868680600101975081518110616eb257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101616df4565b50505080616eec575050506141b1565b8551856002011415616fe257806001600160401b0381118015616f0e57600080fd5b50604051908082528060200260200182016040528015616f4257816020015b6060815260200190600190039081616f2d5790505b50935060005b81811015616fd957604080516001808252818301909252906020808301908036833701905050858281518110616f7a57fe5b6020026020010181905250828181518110616f9157fe5b6020026020010151858281518110616fa557fe5b6020026020010151600081518110616fb957fe5b6001600160a01b0390921660209283029190910190910152600101616f48565b505050506141b1565b6060616ff2888888600101616d4a565b905080516000141561700757505050506141b1565b805182026001600160401b038111801561702057600080fd5b5060405190808252806020026020018201604052801561705457816020015b606081526020019060019003908161703f5790505b50945060005b828110156171d45760005b82518110156171cb57825182810282019084908390811061708257fe5b6020026020010151516001016001600160401b03811180156170a357600080fd5b506040519080825280602002602001820160405280156170cd578160200160208202803683370190505b508882815181106170da57fe5b60200260200101819052508583815181106170f157fe5b602002602001015188828151811061710557fe5b602002602001015160008151811061711957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061714857fe5b6020026020010151518110156171c15784838151811061716457fe5b6020026020010151818151811061717757fe5b602002602001015189838151811061718b57fe5b602002602001015182600101815181106171a157fe5b6001600160a01b039092166020928302919091019091015260010161713c565b5050600101617065565b5060010161705a565b50505050509392505050565b606060028351101580156171f8575081516001018351145b6172145760405162461bcd60e51b815260040161092f9061a537565b81516003028351601402016001600160401b038111801561723457600080fd5b506040519080825280601f01601f19166020018201604052801561725f576020820181803683370190505b5090506020810160005b845181101561618c57801561730e57600084600183038151811061728957fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156172c957600080fd5b505afa1580156172dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173019190619b39565b60e81b8352506003909101905b600085828151811061731c57fe5b602090810291909101015160601b835250601490910190600101617269565b6000828202831580159061735857508284828161735457fe5b0414155b1561736757600091505061618f565b6706f05b59d3b200008101818110156173855760009250505061618f565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156173b157600080fd5b506040519080825280602002602001820160405280156173db578160200160208202803683370190505b50905060005b825181101561315a578260018285510303815181106173fc57fe5b602002602001015182828151811061741057fe5b6001600160a01b03909216602092830291909101909101526001016173e1565b606081516001600160401b038111801561744957600080fd5b50604051908082528060200260200182016040528015617473578160200160208202803683370190505b50905060005b825181101561315a5782600182855103038151811061749457fe5b60200260200101518282815181106174a857fe5b6001600160a01b0390921660209283029190910190910152600101617479565b6000806000858060200190518101906174e19190618d2c565b915091506000858060200190518101906174fb9190618d10565b90503063e8e4af0983858461750f8a6181c1565b6040518563ffffffff1660e01b815260040161752e9493929190619f66565b60006040518083038186803b15801561754657600080fd5b505afa92505050801561757b57506040513d6000823e601f3d908101601f19168201604052617578919081019061951c565b60015b6175bc573d8080156175a9576040519150601f19603f3d011682016040523d82523d6000602084013e6175ae565b606091505b5060009450505050506141b1565b806000815181106175c957fe5b60200260200101519450505050506141b1565b6000611464836167aa6175f08260016181a2565b6175fa8887618126565b9061815c565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b81525060405161763e9190619ed8565b600060405180830381855afa9150503d8060008114617679576040519150601f19603f3d011682016040523d82523d6000602084013e61767e565b606091505b509150915081801561769257506020815110155b1561099057611464816000617944565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016176d8919061a327565b60a06040518083038186803b1580156176f057600080fd5b505afa158015617704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177289190619bb4565b945094505050925089604001516001600160a01b0316886001600160a01b0316141561783f57600087905060006177d8886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561779157600080fd5b505afa1580156177a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177c9919061956a565b670de0b6b3a7640000906181a2565b905060006177f2826167aa85670de0b6b3a7640000618126565b905060006178106b033b2e3c9fd0803ce8000000616703898561815c565b90508581106178295760009750505050505050506168d7565b60006167be60016175fa8564e8d4a51000618178565b89604001516001600160a01b0316896001600160a01b0316141561792457600061786e8864e8d4a51000618126565b905060006178ae886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561687557600080fd5b905060006178c8670de0b6b3a76400006167aa8585618126565b9050858111156178e157600096505050505050506168d7565b60006178fd6b033b2e3c9fd0803ce800000061670389856181a2565b90508481116179165760009750505050505050506168d7565b5095506168d7945050505050565b5060009998505050505050505050565b61793f838383618466565b505050565b60006141b1838361848d565b60008061795b618614565b8580602001905181019061796f9190619616565b9150915060008580602001905181019061798991906195fa565b9050600060603063205e01d760e11b8587866169358c6181c1565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b0316146179e257866179f8565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614617a1b5786617a31565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152617a6592919060019060248101619fe8565b60006040518083038186803b158015617a7d57600080fd5b505afa158015617a91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617ab9919081019061915d565b505090508051866000015110617ad55750600091506141b19050565b80866000015181518110617ae557fe5b6020026020010151925060f883901c60001c60bb1415611c305750600091506141b19050565b600080617b16618652565b84806020019051810190617b2a9190618e13565b91509150600086806020019051810190617b449190618e13565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490617b71908590859088908b9060040161a645565b60206040518083038186803b158015617b8957600080fd5b505afa925050508015617bb9575060408051601f3d908101601f19168201909252617bb69181019061956a565b60015b617be7573d8080156175a9576040519150601f19603f3d011682016040523d82523d6000602084013e6175ae565b93506141b192505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401617c25929190619f21565b60006040518083038186803b158015617c3d57600080fd5b505afa158015617c51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617c7991908101906190c5565b905060019150805160001415617d12576040516315e8a07760e21b81526001600160a01b038816906357a281dc90617cb79087908990600401619f21565b60006040518083038186803b158015617ccf57600080fd5b505afa158015617ce3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617d0b91908101906190c5565b9050600091505b80518610617d275760008092509250506163be565b808681518110617d3357fe5b602002602001015192505094509492505050565b60008060008086806020019051810190617d619190618dc3565b9250925092508015617e0557604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e090617da1906000908a90600401619f08565b604080518083038187803b158015617db857600080fd5b5086fa93505050508015617de9575060408051601f3d908101601f19168201909252617de691810190619b5c565b60015b617df957600093505050506141b1565b5093506141b192505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e090617da1906000908a90600401619f08565b600080600085806020019051810190617e529190618d2c565b91509150600085806020019051810190617e6c9190618d10565b9050306330d6570d83858461750f8a6181c1565b6000806060846001600160a01b03166370a0823160e01b85604051602401617ea89190619ef4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617ee69190619ed8565b600060405180830381855afa9150503d8060008114617f21576040519150601f19603f3d011682016040523d82523d6000602084013e617f26565b606091505b5091509150818015617f3a57506020815110155b1561618c576114d2816000617944565b600080600085806020019051810190617f639190618d2c565b91509150600085806020019051810190617f7d9190618d10565b90503063a469841762061a80848685617f958b6181c1565b6040518663ffffffff1660e01b8152600401617fb49493929190619f66565b60006040518083038187803b158015617fcc57600080fd5b5086fa9350505050801561757b57506040513d6000823e601f3d908101601f19168201604052617578919081019061951c565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401618029929190619f21565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516180679190619ed8565b600060405180830381855afa9150503d80600081146180a2576040519150601f19603f3d011682016040523d82523d6000602084013e6180a7565b606091505b50915091508180156180bb57506020815110155b15611c30576168d7816000617944565b600061618f82617600565b6000806000858060200190518101906180ef9190618d2c565b915091506000808680602001905181019061810a9190618d2c565b9150915061811a848483896142de565b98975050505050505050565b6000826181355750600061618f565b8282028284828161814257fe5b04146141b1576141b1618157600186866184b7565b618511565b6000828201838110156141b1576141b1618157600086866184b7565b60008161818e5761818e618157600385856184b7565b600082848161819957fe5b04949350505050565b6000828211156181bb576181bb618157600285856184b7565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106181f157fe5b602002602001018181525050919050565b600083158061820f575081155b80618218575082155b15618225575060006141b1565b8382028285828161823257fe5b04146182425760009150506141b1565b836001850382018161825057fe5b0495945050505050565b6000813b8061826d576000915050610e15565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156182a757600080fd5b505afa1580156182bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906182df9190618d10565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161830a9190619ef4565b60206040518083038186803b15801561832257600080fd5b505afa158015618336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061835a919061956a565b61836657506000610e15565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561839f57600080fd5b505afa1580156183b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906183d79190618d10565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016184029190619ef4565b60206040518083038186803b15801561841a57600080fd5b505afa15801561842e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618452919061956a565b61845e57506000610e15565b506001919050565b8160200183511015618485576184856181576005855185602001618519565b910160200152565b600081602001835110156184ae576184ae6181576005855185602001618519565b50016020015190565b606063e946c1bb60e01b8484846040516024016184d69392919061a3bb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b8484846040516024016184d69392919061a3dc565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b803561618f8161a8dd565b805161618f8161a8dd565b600082601f8301126186c2578081fd5b81356186d56186d08261a85e565b61a838565b8181529150602080830190848101818402860182018710156186f657600080fd5b60005b8481101561871e57813561870c8161a8dd565b845292820192908201906001016186f9565b505050505092915050565b600082601f830112618739578081fd5b81356187476186d08261a85e565b818152915060208083019084810160005b8481101561871e5761876f888484358a01016186b2565b84529282019290820190600101618758565b600082601f830112618791578081fd5b813561879f6186d08261a85e565b818152915060208083019084810160005b8481101561871e576187c7888484358a0101618970565b845292820192908201906001016187b0565b600082601f8301126187e9578081fd5b81356187f76186d08261a85e565b81815291506020808301908481018184028601820187101561881857600080fd5b60005b8481101561871e57813561882e8161a8dd565b8452928201929082019060010161881b565b600082601f830112618850578081fd5b813561885e6186d08261a85e565b818152915060208083019084810160808085028701830188101561888157600080fd5b60005b858110156188a8576188968984618c6f565b85529383019391810191600101618884565b50505050505092915050565b600082601f8301126188c4578081fd5b81356188d26186d08261a85e565b8181529150602080830190848101818402860182018710156188f357600080fd5b60005b8481101561871e578135845292820192908201906001016188f6565b600082601f830112618922578081fd5b81516189306186d08261a85e565b81815291506020808301908481018184028601820187101561895157600080fd5b60005b8481101561871e57815184529282019290820190600101618954565b600082601f830112618980578081fd5b813561898e6186d08261a87d565b91508082528360208285010111156189a557600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126189ce578081fd5b81516189dc6186d08261a87d565b91508082528360208285010111156189f357600080fd5b61306781602084016020860161a8a0565b80516002811061618f57600080fd5b600060608284031215618a24578081fd5b618a2e606061a838565b90508135618a3b8161a8dd565b81526020820135618a4b8161a900565b60208201526040820135618a5e8161a900565b604082015292915050565b600060608284031215618a7a578081fd5b618a84606061a838565b90508151618a918161a8dd565b81526020820151618aa18161a900565b60208201526040820151618a5e8161a900565b600060408284031215618ac5578081fd5b618acf604061a838565b90508135618adc8161a8dd565b81526020820135618aec8161a8dd565b602082015292915050565b600060a08284031215618b08578081fd5b618b1260a061a838565b9050813581526020820135618b268161a8dd565b60208201526040820135618b398161a8dd565b60408201526060820135618b4c8161a8dd565b606082015260808201356001600160401b03811115618b6a57600080fd5b618b7684828501618970565b60808301525092915050565b6000610180808385031215618b95578182fd5b618b9e8161a838565b915050618bab838361869c565b8152618bba836020840161869c565b6020820152618bcc8360408401618cd2565b6040820152618bde8360608401618cd2565b6060820152618bf08360808401618cd2565b6080820152618c028360a0840161869c565b60a0820152618c148360c0840161869c565b60c0820152618c268360e0840161869c565b60e0820152610100618c3a8482850161869c565b908201526101208281013590820152610140618c5884828501618cdd565b818301525061016080830135818301525092915050565b600060808284031215618c80578081fd5b618c8a608061a838565b9050813560048110618c9b57600080fd5b8152602082013560ff81168114618cb157600080fd5b80602083015250604082013560408201526060820135606082015292915050565b803561618f8161a925565b80356001600160401b038116811461618f57600080fd5b600060208284031215618d05578081fd5b81356141b18161a8dd565b600060208284031215618d21578081fd5b81516141b18161a8dd565b60008060408385031215618d3e578081fd5b8251618d498161a8dd565b6020840151909250618d5a8161a8dd565b809150509250929050565b60008060008060808587031215618d7a578182fd5b8451618d858161a8dd565b6020860151909450618d968161a8dd565b6040860151909350618da78161a8dd565b6060860151909250618db88161a8dd565b939692955090935050565b600080600060608486031215618dd7578081fd5b8351618de28161a8dd565b6020850151909350618df38161a8dd565b60408501519092508015158114618e08578182fd5b809150509250925092565b60008060408385031215618e25578182fd5b8251618e308161a8dd565b60208401519092506001600160401b0380821115618e4c578283fd5b9084019060a08287031215618e5f578283fd5b618e6960a061a838565b82518152618e7a87602085016186a7565b6020820152618e8c87604085016186a7565b6040820152618e9e87606085016186a7565b6060820152608083015182811115618eb4578485fd5b618ec0888286016189be565b6080830152508093505050509250929050565b600080600080600060a08688031215618eea578283fd5b8535618ef58161a8dd565b94506020860135618f058161a8dd565b93506040860135618f158161a8dd565b92506060860135618f258161a8dd565b915060808601356001600160401b03811115618f3f578182fd5b618f4b888289016188b4565b9150509295509295909350565b60008060008060808587031215618f6d578182fd5b8435618f788161a8dd565b93506020850135618f888161a8dd565b92506040850135618f988161a8dd565b915060608501356001600160401b03811115618fb2578182fd5b618fbe878288016188b4565b91505092959194509250565b60008060008060808587031215618fdf578182fd5b8435618fea8161a8dd565b93506020850135618ffa8161a8dd565b9250604085013561900a8161a8dd565b9396929550929360600135925050565b60008060006060848603121561902e578081fd5b83356190398161a8dd565b925060208401356001600160401b0380821115619054578283fd5b619060878388016186b2565b93506040860135915080821115619075578283fd5b50619082868287016188b4565b9150509250925092565b600080600080600060a086880312156190a3578283fd5b85356190ae8161a8dd565b9450602086013593506040860135618f158161a8dd565b600060208083850312156190d7578182fd5b82516001600160401b038111156190ec578283fd5b8301601f810185136190fc578283fd5b805161910a6186d08261a85e565b8181528381019083850185840285018601891015619126578687fd5b8694505b8385101561915157805161913d8161a8dd565b83526001949094019391850191850161912a565b50979650505050505050565b600080600060608486031215619171578081fd5b83516001600160401b0380821115619187578283fd5b818601915086601f83011261919a578283fd5b81516191a86186d08261a85e565b80828252602080830192508086018b8283870289010111156191c8578788fd5b8796505b848710156191ea5780518452600196909601959281019281016191cc565b508901519097509350505080821115619201578283fd5b5061920e86828701618912565b92505061921e8560408601618a04565b90509250925092565b60008060208385031215619239578182fd5b82356001600160401b038082111561924f578384fd5b818501915085601f830112619262578384fd5b813581811115619270578485fd5b8660208083028501011115619283578485fd5b60209290920196919550909350505050565b6000806000606084860312156192a9578081fd5b83356001600160401b03808211156192bf578283fd5b6192cb87838801618781565b945060208601359150808211156192e0578283fd5b506192ed86828701618781565b925050604084013590509250925092565b60006020828403121561930f578081fd5b81356001600160401b03811115619324578182fd5b611464848285016187d9565b60008060408385031215619342578182fd5b82356001600160401b03811115619357578283fd5b619363858286016187d9565b9250506020830135618d5a8161a8dd565b600080600060608486031215619388578081fd5b83356001600160401b0381111561939d578182fd5b6193a9868287016187d9565b93505060208401356193ba8161a8dd565b91506040840135618e088161a8dd565b600060208083850312156193dc578182fd5b82516001600160401b038111156193f1578283fd5b8301601f81018513619401578283fd5b805161940f6186d08261a85e565b818152838101908385018584028501860189101561942b578687fd5b8694505b8385101561915157805183526001949094019391850191850161942f565b600080600060608486031215619461578081fd5b83356001600160401b0380821115619477578283fd5b818601915086601f83011261948a578283fd5b81356194986186d08261a85e565b80828252602080830192508086016101808c838288028a010111156194bb578889fd5b8897505b858810156194e7576194d18d83618b82565b85526001979097019693820193908101906194bf565b509198508901359450505050808211156194ff578283fd5b5061950c86828701618840565b92505061921e856040860161869c565b60006020828403121561952d578081fd5b81516001600160401b03811115619542578182fd5b61146484828501618912565b60006020828403121561955f578081fd5b81516141b18161a8f2565b60006020828403121561957b578081fd5b5051919050565b600060208284031215619593578081fd5b81516001600160401b038111156195a8578182fd5b611464848285016189be565b6000806000606084860312156195c8578081fd5b83356195d38161a8dd565b925060208401356001600160401b03808211156195ee578283fd5b619060878388016187d9565b60006020828403121561960b578081fd5b81516141b18161a916565b60008060808385031215619628578182fd5b82516196338161a916565b91506196428460208501618a69565b90509250929050565b60008060008084860360a0811215619661578283fd5b604081121561966e578283fd5b50619679604061a838565b85358152602086013561968b8161a8dd565b6020820152935060408501356196a08161a8dd565b925060608501356196b08161a8dd565b915060808501356001600160401b03811115618fb2578182fd5b600080600080608085870312156196df578182fd5b84356001600160401b03808211156196f5578384fd5b9086019060408289031215619708578384fd5b619712604061a838565b61971c898461869c565b815260208301358281111561972f578586fd5b61973b8a828601618729565b60208301525080965050619752886020890161869c565b9450619761886040890161869c565b93506060870135915080821115619776578283fd5b50618fbe878288016188b4565b60008060008060c08587031215619798578182fd5b6197a28686618a13565b935060608501356197b28161a916565b925060808501356197c28161a916565b915060a08501356001600160401b03811115618fb2578182fd5b60008060008060a085870312156197f1578182fd5b6197fb8686618ab4565b935060408501356196a08161a8dd565b60006020828403121561981c578081fd5b81356001600160401b0380821115619832578283fd5b9083019060a08286031215619845578283fd5b61984f60a061a838565b619859868461869c565b815260208301358281111561986c578485fd5b619878878286016186b2565b60208301525060408301358281111561988f578485fd5b61989b87828601618781565b6040830152506060830135828111156198b2578485fd5b6198be878286016186b2565b6060830152506080830135828111156198d5578485fd5b6198e1878286016188b4565b60808301525095945050505050565b60008060008060808587031215619905578182fd5b84356001600160401b038082111561991b578384fd5b61992788838901618af7565b9550602087013591506199398261a8dd565b90935060408601359061994b8261a8dd565b90925060608601359080821115619776578283fd5b60008060008060808587031215619975578182fd5b84356001600160401b0381111561998a578283fd5b61999687828801618af7565b9450506020850135618ffa8161a8dd565b600080600080608085870312156199bc578182fd5b84356001600160401b038111156199d1578283fd5b6199dd87828801618af7565b9450506020850135925060408501356199f58161a8dd565b91506060850135618db88161a8dd565b60008060006102208486031215619a1a578081fd5b619a248585618b82565b9250619a34856101808601618c6f565b9150610200840135618e088161a8dd565b60008060008084860360c0811215619a5b578283fd5b6060811215619a68578283fd5b50619a73606061a838565b8535619a7e8161a8dd565b8152602086810135908201526040860135619a988161a8dd565b604082015293506060850135619aad8161a8dd565b925060808501356197c28161a8dd565b600080600083850360a0811215619ad2578182fd5b6060811215619adf578182fd5b50619aea606061a838565b84518152602085015160058110619aff578283fd5b60208201526040850151619b128161a925565b60408201526060850151909350619b288161a925565b6080850151909250618e088161a8f2565b600060208284031215619b4a578081fd5b815162ffffff811681146141b1578182fd5b60008060408385031215619b6e578182fd5b505080516020909101519092909150565b60008060008060808587031215619b94578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619bcb578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015619c385781516001600160a01b031687529582019590820190600101619c13565b509495945050505050565b6000815180845260208085019450808401835b83811015619c3857815187529582019590820190600101619c56565b60008151808452619c8a81602086016020860161a8a0565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261146460a0850182619c72565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b6000815183526020820151604060208501526114646040850182619c72565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261146460a0850182619c72565b619db9828251619bf3565b6020810151619dcb6020840182619bf3565b506040810151619dde6040840182619eae565b506060810151619df16060840182619eae565b506080810151619e046080840182619eae565b5060a0810151619e1760a0840182619bf3565b5060c0810151619e2a60c0840182619bf3565b5060e0810151619e3d60e0840182619bf3565b5061010080820151619e5182850182619bf3565b5050610120818101519083015261014080820151619e7182850182619ebb565b505061016090810151910152565b8051619e8a8161a8d0565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619eea81846020870161a8a0565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906168d790830184619c43565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b0385811682528416602082015282151560408201526080606082018190526000906168d790830184619c72565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061a07a90830184619c72565b979650505050505050565b6001600160a01b038416815260606020820181905260009061a0a990830185619c00565b82810360408401526168d78185619c43565b6001600160a01b0385168152600061a0d28561a8d0565b8460208301526080604083015261a0ec6080830185619c43565b828103606084015261a07a8185619c43565b6001600160a01b0389811682526000906101009061a11b8b61a8d0565b8a602085015281604085015261a1338285018b619c43565b9150838203606085015261a147828a619c43565b9088166080850152905061a15a8661a8d0565b8560a084015282810360c084015261a1728186619c43565b905082810360e084015261a1868185619c43565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061146490830184619d61565b60006040825261a1cc6040830185619c00565b82810360208401526114d28185619c43565b60006040825261a1f16040830185619c00565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561a25557605f1988840301855261a243838351619c72565b9486019492509085019060010161a227565b50508581038487015261811a8188619c43565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561a2cf57888303603f190185528151805187855261a2b088860182619c72565b918901511515948901949094529487019492509086019060010161a28c565b509098975050505050505050565b6000602082526141b16020830184619c43565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906114d290830184619c43565b90815260200190565b60008482526060602083015261a0a96060830185619c72565b6000602082526141b16020830184619c72565b60006040825261a1f16040830185619c72565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b038316815260406020820181905260009061146490830184619c43565b6060810161a3c88561a8d0565b938152602081019290925260409091015290565b606081016008851061a3c857fe5b600060e082016002871061a3fa57fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b8281101561a4515760ff1988870301845261a43f868351619c9e565b9550928401929084019060010161a423565b5050505050828103604084015261a4688186619c00565b9150506114d26060830184619d0d565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016141b16020830184619cdb565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b60208082526010908201526f3139393939393939393939393939393960801b604082015260600190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b600061a5e98287619cdb565b84600f0b606083015283600f0b608083015260c060a08301526168d760c0830184619c43565b60006060825261a6226060830186619d42565b828103602084015261a6348186619d42565b915050826040830152949350505050565b60006080825261a6586080830187619d61565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261a68e6080830187619d61565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161a6c38285619dae565b6141b1610180830184619e7f565b610220810161a6e08286619dae565b61a6ee610180830185619e7f565b6001600160a01b0392909216610200919091015292915050565b6000838252604060208301526114646040830184619c00565b60008482526060602083015261a73a6060830185619c00565b82810360408401526168d78185619c00565b6000858252602060808184015261a7666080840187619c00565b838103604085015285518082528282019083810283018401848901865b8381101561a7b157601f1986840301855261a79f838351619c72565b9487019492509086019060010161a783565b5050868103606088015261a1868189619c00565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261a803578283fd5b8301803591506001600160401b0382111561a81c578283fd5b60200191503681900382131561a83157600080fd5b9250929050565b6040518181016001600160401b038111828210171561a85657600080fd5b604052919050565b60006001600160401b0382111561a873578081fd5b5060209081020190565b60006001600160401b0382111561a892578081fd5b50601f01601f191660200190565b60005b8381101561a8bb57818101518382015260200161a8a3565b8381111561a8ca576000848401525b50505050565b6004811061a8da57fe5b50565b6001600160a01b038116811461a8da57600080fd5b801515811461a8da57600080fd5b6001600160e01b03198116811461a8da57600080fd5b80600f0b811461a8da57600080fd5b6001600160801b038116811461a8da57600080fdfea2646970667358221220478adf9da06236608e1d5e0f677e447d647e8bdfe95a67ceb12a1f5bfcf0181564736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x342 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8B6D7B44 GT PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xBD71ECF6 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x7C0 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x7D3 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x787 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x79A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xC8C74A37 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x728 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x73B JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x74E JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x761 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x6EF JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x702 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x715 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0xA75E744B GT PUSH2 0x14B JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x695 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x6BB JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x6DC JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x682 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x5BF JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x5F4 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x63A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x36052391 GT PUSH2 0x292 JUMPI DUP1 PUSH4 0x5AAE4E53 GT PUSH2 0x230 JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x20A JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x5AC JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x553 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x494569DB GT PUSH2 0x26C JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x51A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x36052391 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0x3C883DBA EQ PUSH2 0x4A0 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x4B3 JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x252322B3 GT PUSH2 0x2FF JUMPI DUP1 PUSH4 0x2AA64319 GT PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x432 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x467 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x47A JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x252322B3 EQ PUSH2 0x3F9 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x41F JUMPI PUSH2 0x342 JUMP JUMPDEST DUP1 PUSH4 0x1CB0EF7 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x3E6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35A PUSH2 0x355 CALLDATASIZE PUSH1 0x4 PUSH2 0x980B JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x383 PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x997 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA1B9 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x944D JUMP JUMPDEST PUSH2 0xB3D JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x96CA JUMP JUMPDEST PUSH2 0xCB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA085 JUMP JUMPDEST PUSH2 0x3D9 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF4 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA2F0 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x3F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x964B JUMP JUMPDEST PUSH2 0xE1A JUMP JUMPDEST PUSH2 0x35A PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x1041 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x9A45 JUMP JUMPDEST PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x42D CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST PUSH2 0x445 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2FB JUMP JUMPDEST PUSH2 0x35A PUSH2 0x462 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED3 JUMP JUMPDEST PUSH2 0x17B8 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x475 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x1941 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x488 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x1AB5 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x49B CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x980B JUMP JUMPDEST PUSH2 0x1CCB JUMP JUMPDEST PUSH2 0x35A PUSH2 0x4C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x1E61 JUMP JUMPDEST PUSH2 0x383 PUSH2 0x4D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x1FE2 JUMP JUMPDEST PUSH2 0x4EC PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x99A7 JUMP JUMPDEST PUSH2 0x216E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA349 JUMP JUMPDEST PUSH2 0x50C PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x95B4 JUMP JUMPDEST PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA200 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x2636 JUMP JUMPDEST PUSH2 0x50C PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x95B4 JUMP JUMPDEST PUSH2 0x2BAD JUMP JUMPDEST PUSH2 0x35A PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x944D JUMP JUMPDEST PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x579 PUSH2 0x574 CALLDATASIZE PUSH1 0x4 PUSH2 0x9227 JUMP JUMPDEST PUSH2 0x2F0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA268 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x92FE JUMP JUMPDEST PUSH2 0x306E JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96CA JUMP JUMPDEST PUSH2 0x3160 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A45 JUMP JUMPDEST PUSH2 0x316F JUMP JUMPDEST PUSH2 0x35A PUSH2 0x5CD CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x5E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9295 JUMP JUMPDEST PUSH2 0x371F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA60F JUMP JUMPDEST PUSH2 0x35A PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x9783 JUMP JUMPDEST PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x3B38 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A05 JUMP JUMPDEST PUSH2 0x4071 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH2 0x64D PUSH2 0x648 CALLDATASIZE PUSH1 0x4 PUSH2 0x98F0 JUMP JUMPDEST PUSH2 0x41B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x62D PUSH2 0x66A CALLDATASIZE PUSH1 0x4 PUSH2 0x8FCA JUMP JUMPDEST PUSH2 0x42DE JUMP JUMPDEST PUSH2 0x35A PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x964B JUMP JUMPDEST PUSH2 0x44F4 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x690 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x46F0 JUMP JUMPDEST PUSH2 0x445 PUSH2 0x6A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x908C JUMP JUMPDEST PUSH2 0x4845 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4982 JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x6C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4AE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP3 SWAP2 SWAP1 PUSH2 0xA397 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4C30 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0x9330 JUMP JUMPDEST PUSH2 0x4C96 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x710 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4D92 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x4DF8 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x901A JUMP JUMPDEST PUSH2 0x4FB5 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x749 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x5121 JUMP JUMPDEST PUSH2 0x64D PUSH2 0x75C CALLDATASIZE PUSH1 0x4 PUSH2 0x98F0 JUMP JUMPDEST PUSH2 0x527F JUMP JUMPDEST PUSH2 0x445 PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x908C JUMP JUMPDEST PUSH2 0x5465 JUMP JUMPDEST PUSH2 0x445 PUSH2 0x782 CALLDATASIZE PUSH1 0x4 PUSH2 0x97DC JUMP JUMPDEST PUSH2 0x5554 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x795 CALLDATASIZE PUSH1 0x4 PUSH2 0x9374 JUMP JUMPDEST PUSH2 0x57E7 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x7A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x58DC JUMP JUMPDEST PUSH2 0x62D PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x9960 JUMP JUMPDEST PUSH2 0x5A0F JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x7CE CALLDATASIZE PUSH1 0x4 PUSH2 0x8F58 JUMP JUMPDEST PUSH2 0x5BAE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x7E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9295 JUMP JUMPDEST PUSH2 0x5C9A JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x805 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x82F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x990 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x846EE14B DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x860 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x896 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA74C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8E3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x938 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x916 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA57C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x959 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x971 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x987 JUMPI POP PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x835 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9DE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x9EB DUP7 DUP7 PUSH2 0x5EAF JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x9FD JUMPI POP PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB32 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA721 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA9D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA9A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAD7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xB32 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xAE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB29 JUMPI POP PUSH2 0xB32 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA00 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB80 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xCA8 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBAD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA6D1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xC31 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC2E SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC85 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xC5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC73 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xCA0 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB86 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH2 0xCD4 DUP8 DUP8 DUP8 DUP8 PUSH2 0x6195 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xCF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD1A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xE04 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD49 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD6E SWAP3 SWAP2 SWAP1 PUSH2 0xA1DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xDB7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDB4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDC0 JUMPI PUSH2 0xE04 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xDE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDFB JUMPI POP PUSH2 0xE04 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xD20 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE26 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xE8A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xEEF PUSH2 0x8538 JUMP JUMPDEST PUSH2 0xEF7 PUSH2 0x63FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x60 PUSH2 0xF23 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x642C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xF59 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFA8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x93CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFE3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x1034 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xFF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x1010 JUMPI POP POP POP PUSH2 0x1034 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x101D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xEFC JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x104D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x108F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x10B2 JUMPI PUSH2 0x10AD DUP8 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x10D7 JUMPI PUSH2 0x10D2 DUP9 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x113D JUMPI PUSH2 0x111C DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x653D JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1128 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x11D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x1163 JUMPI PUSH2 0x111C DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x11BA JUMPI PUSH2 0x1199 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x653D JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x11A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x11C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x11F7 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1202 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x10DF JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1223 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12E4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1334 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1358 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x13FB JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13E5 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1408 JUMPI POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH2 0x1436 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1427 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x6620 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1443 JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1450 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x140B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x148B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14B2 SWAP3 SWAP2 SWAP1 PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x68E1 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x14EA DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x152C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x155F SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x158B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15AF SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x15CD JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x166C JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x15FE SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1665 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16DD SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST PUSH2 0x16E8 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x17AB JUMPI PUSH1 0x0 PUSH2 0x1765 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1713 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x173D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1758 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6C11 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x178C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17A2 JUMPI POP PUSH2 0x17AB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x16EB JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1814 JUMPI POP PUSH2 0x14D2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1936 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1848 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1863 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18A1 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1906 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1903 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1913 JUMPI POP POP POP PUSH2 0x1936 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1920 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1817 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x194D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x198F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x19BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19E4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A2D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A2A SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A67 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1AAB JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1AA2 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1995 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C30 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1B27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B4D SWAP3 SWAP2 SWAP1 PUSH2 0xA708 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1B9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B98 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1BD5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1C30 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1BE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C27 JUMPI POP PUSH2 0x1C30 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1B00 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C45 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1C77 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xCA8 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CC0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x1464 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1CEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x990 JUMPI DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3BBC8A1E DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA74C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1DC8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1DC5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E02 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1DF6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DFB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x990 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1E16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E58 JUMPI POP PUSH2 0x990 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1D1A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1EA6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1EDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EF7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F35 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1F9A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F97 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1FA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1FD7 JUMPI POP POP POP PUSH2 0x1AAB JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1EAC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2029 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2036 DUP7 DUP7 PUSH2 0x5EAF JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2048 JUMPI POP PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB32 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2072 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x209A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA721 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x20E8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20E5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2116 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xACB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAD0 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2123 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x214F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2165 JUMPI POP PUSH2 0xB32 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x204B JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21A5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x22CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2236 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x224E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2284 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2281 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22BE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x22B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x22C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1464 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x23E0 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2324 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2236 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x2364 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xA0FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x237C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x23B2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x23AF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22BE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1034 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x246C DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2464 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6D4A JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24AF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24FD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x24E8 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB32 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x25EE JUMPI PUSH1 0x60 PUSH2 0x253A DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x252D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x71E0 JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x255C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2581 SWAP3 SWAP2 SWAP1 PUSH2 0xA35C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x25CC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x25C9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D5 JUMPI PUSH2 0x25E5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x25E3 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2512 JUMP JUMPDEST POP DUP1 PUSH2 0x25FB JUMPI POP POP PUSH2 0xB32 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2608 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2621 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2503 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x267D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x26AD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26FD SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2782 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2730 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x275C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2780 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x278E JUMPI POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x2796 PUSH2 0x855F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x27C2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2812 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2840 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x286C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2890 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x28C1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2911 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2944 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x295C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2970 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2994 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH2 0x2A41 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2A38 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x733B JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A4D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2A60 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2A93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2AD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2B0A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2B07 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B44 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B3D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x120B JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2B5C SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x733B JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x2B69 JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B8E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2BA4 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2A16 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2BEE DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2BFB DUP7 PUSH2 0x7398 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C3E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2C77 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2DE7 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2D9F JUMPI PUSH1 0x60 PUSH2 0x2CD1 DUP7 PUSH2 0x2CCC DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2CBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7430 JUMP JUMPDEST PUSH2 0x71E0 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2CF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D18 SWAP3 SWAP2 SWAP1 PUSH2 0xA35C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2D63 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2D60 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2D6C JUMPI PUSH2 0x2D96 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x2D79 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x2D94 JUMPI DUP1 SWAP4 POP PUSH2 0x2D91 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x252D JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2CA1 JUMP JUMPDEST POP DUP1 PUSH2 0x2DAC JUMPI POP POP PUSH2 0x2DE7 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DD2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2C92 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x2E11 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E38 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x74C8 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2E65 DUP5 DUP5 DUP5 PUSH2 0xB3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xCA8 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2E7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2F05 JUMPI PUSH2 0x2EEC DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E9D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2ED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x75DC JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2EF8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2E6A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2F25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F5F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2F4C PUSH2 0x858E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2F44 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x3067 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F7A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2F98 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2FAA SWAP2 SWAP1 PUSH2 0xA7ED JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2FB7 JUMPI PUSH2 0x305F JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2FC4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2FD6 SWAP2 SWAP1 PUSH2 0xA7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FE4 SWAP3 SWAP2 SWAP1 PUSH2 0x9EC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3021 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3026 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3033 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x304A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2F65 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x30B1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x315A JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3135 JUMPI PUSH2 0x3130 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x311A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7600 JUMP JUMPDEST PUSH2 0x3138 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3147 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x30B7 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x317B DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31F7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x323C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x328C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B0 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x3353 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3319 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x333D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3360 JUMPI POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH2 0x338E DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x337F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x76A2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x339B JUMPI POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x33A8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3363 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33F3 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x340B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x341F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3443 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x3476 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x348E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34C6 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34FE SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x352A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x354E SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x3562 JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x357F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x35A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x35E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x35FA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3638 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3674 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3679 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x369D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x369A SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x36D7 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x36CE JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x36BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x36A6 JUMP JUMPDEST POP POP POP POP PUSH2 0x120B JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x36E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x36FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3714 JUMPI POP POP POP PUSH2 0x120B JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x35AF JUMP JUMPDEST PUSH2 0x3727 PUSH2 0x85A6 JUMP JUMPDEST PUSH2 0x372F PUSH2 0x85A6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3834 JUMPI PUSH2 0x377B PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7934 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x37AA SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x37E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x382A JUMPI PUSH1 0x0 PUSH2 0x3810 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3828 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3734 JUMP JUMPDEST POP DUP1 PUSH2 0x3840 JUMPI POP PUSH2 0x392F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x392C JUMPI PUSH2 0x3873 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x385C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x388D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A2 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x38DF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x38E4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3922 JUMPI PUSH1 0x0 PUSH2 0x3908 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3920 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3843 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x39BA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x39B3 SWAP1 DUP1 PUSH2 0x396C DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3993 SWAP3 SWAP2 SWAP1 PUSH2 0xA496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7950 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST SWAP1 POP PUSH2 0x1464 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39FC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3A33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3A4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA478 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3A8B SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AC7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ACC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3AF0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3AED SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3AFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B2D JUMPI POP POP POP PUSH2 0x1AAB JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3A02 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B7F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3BAF SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3BC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BFF SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x3C84 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3C32 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C82 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3C90 JUMPI POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH2 0x3C98 PUSH2 0x855F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3CC4 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3CF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D14 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3D42 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D92 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3DC3 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E13 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3E46 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E96 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3ED8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3EEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3F10 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x120B JUMPI DUP2 MLOAD PUSH2 0x3F36 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2B56 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3F55 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3F88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FFF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3FFC SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x402D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B3D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x403A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4052 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4068 JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3F18 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4081 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x4099 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4097 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x40AF JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x40C5 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x40D2 JUMPI POP PUSH1 0x0 PUSH2 0x41B1 JUMP JUMPDEST PUSH2 0x40DA PUSH2 0x85C0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410B SWAP3 SWAP2 SWAP1 PUSH2 0xA6B4 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4137 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x415B SWAP2 SWAP1 PUSH2 0x9ABD JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4174 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x417F JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x4192 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x41A3 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x41C7 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x41D2 DUP8 DUP8 DUP8 PUSH2 0x79A4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x41DE JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4207 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA67B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x421F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4233 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x425B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x42D2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x428B SWAP3 SWAP2 SWAP1 PUSH2 0xA195 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42B2 SWAP3 SWAP2 SWAP1 PUSH2 0xA195 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7B0B DUP2 MSTORE POP DUP6 PUSH2 0x6A14 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x430F SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x435F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4379 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x440B JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x43B6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4406 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x4417 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x442C JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x4461 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x44AA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x44A7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x44EA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x44D8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x44DD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1464 JUMP JUMPDEST SWAP3 POP PUSH2 0x1464 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4500 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4536 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4564 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x45BE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x45C9 PUSH2 0x8538 JUMP JUMPDEST PUSH2 0x45D1 PUSH2 0x63FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x60 PUSH2 0x45F0 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF16 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x4626 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4675 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4672 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x93CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x46A3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x46B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x46CC JUMPI POP POP POP PUSH2 0x1034 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x45D6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x470B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4735 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4764 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x478A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x47D3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x47D0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4801 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x480E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4826 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x483C JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x473B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4854 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x486C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4896 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x48A5 DUP10 DUP10 DUP10 DUP10 PUSH2 0x7BF2 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x48BD JUMPI POP PUSH2 0x4977 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4974 JUMPI PUSH1 0x0 PUSH2 0x492E DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x48E2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4906 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4921 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7D47 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x493D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4955 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x496B JUMPI POP PUSH2 0x4974 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x48C0 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x498E DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x49A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x49FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A25 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4A6E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4A6B SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A9C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4AA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4AD7 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x49D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4AEE DUP5 DUP7 PUSH2 0x63C7 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B30 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4BA5 JUMPI PUSH1 0x0 PUSH2 0x4B5F DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4B52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x42DE JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B6E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B9C JUMPI POP PUSH2 0x4BA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4B36 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x4BD4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C24 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x4C4F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C76 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E39 DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4CD9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x3067 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4D67 JUMPI PUSH2 0x4D62 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E80 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4D73 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D7F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4CDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14D2 SWAP1 DUP1 PUSH2 0x4DB1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4DD8 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7F4A DUP2 MSTORE POP DUP4 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E04 DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E46 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4E69 JUMPI PUSH2 0x4E64 DUP8 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x4E6C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4E8E JUMPI PUSH2 0x4E89 DUP9 DUP8 PUSH2 0x64BE JUMP JUMPDEST PUSH2 0x4E91 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x4EE7 JUMPI PUSH2 0x4EC6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4ED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4F81 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x4F0D JUMPI PUSH2 0x4EC6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4F27 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x110F JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4F64 JUMPI PUSH2 0x4F43 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x653D JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4F4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4F7F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4F72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x4FA1 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4FAC JUMPI POP PUSH2 0x120B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4E96 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C30 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x504D SWAP3 SWAP2 SWAP1 PUSH2 0xA708 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x509B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5098 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x50C9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BCE JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x50D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x50EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5102 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5118 JUMPI POP PUSH2 0x1C30 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5000 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x512D DUP4 DUP6 PUSH2 0x63C7 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x516F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x519E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x520D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x520A SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x523B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5248 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5260 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5276 JUMPI POP PUSH2 0x1AAB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5175 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x528E DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x5299 DUP8 DUP8 DUP8 PUSH2 0x79A4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x52A5 JUMPI PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x52CE SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA67B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5322 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x536E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5459 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x539C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53C3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5413 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5422 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x543A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5450 JUMPI POP PUSH2 0x5459 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5374 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5474 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST PUSH2 0x5480 DUP9 DUP9 DUP9 DUP9 PUSH2 0x7BF2 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5497 JUMPI PUSH2 0x4977 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x54AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x54D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5546 SWAP1 DUP1 PUSH2 0x54FD DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5526 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D47 DUP2 MSTORE POP DUP7 PUSH2 0x6A14 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5563 DUP6 DUP8 PUSH2 0x63C7 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x557B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x55A5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x55D8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5604 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5628 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x5646 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x56E5 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x5677 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x568F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56C7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x56DE JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x571E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5756 SWAP2 SWAP1 PUSH2 0x954E JUMP JUMPDEST PUSH2 0x5761 JUMPI POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH2 0x57D9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x578A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x57B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6C11 DUP2 MSTORE POP DUP8 PUSH2 0x6A14 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x582A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xCA8 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x586E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x58BA JUMPI PUSH2 0x58B5 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5895 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7FFF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x58BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x58C9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5830 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x58F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5921 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AAB JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5950 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5976 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA01C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x598E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x59BF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x59BC SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x59ED JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A60 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x5927 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A27 JUMPI POP PUSH1 0x0 PUSH2 0x1464 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A61 JUMPI DUP7 PUSH2 0x5A77 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A9A JUMPI DUP7 PUSH2 0x5AB0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AD8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA040 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5B21 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5B1E SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5B5F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5B4F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5B54 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B6A DUP6 PUSH2 0x80CB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5B7A DUP8 PUSH2 0x80CB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5B9B JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x5BA3 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x1464 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5BBC DUP5 DUP7 PUSH2 0x63C7 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5BFE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5C69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C22 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5C49 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x80D6 DUP2 MSTORE POP DUP6 PUSH2 0x6A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x4BD4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH2 0x5CA2 PUSH2 0x85A6 JUMP JUMPDEST PUSH2 0x5CAA PUSH2 0x85A6 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x5DA6 JUMPI PUSH2 0x5CE1 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5CCA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5D10 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D4D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D52 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5D9C JUMPI PUSH1 0x0 PUSH2 0x5D76 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5D87 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5D9A JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5CB1 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x5DB7 JUMPI POP PUSH2 0x392F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x392C JUMPI PUSH2 0x5DEA PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3764 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5E04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5E19 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5E56 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E5B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5EA5 JUMPI PUSH1 0x0 PUSH2 0x5E7F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7944 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5E90 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5EA3 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5DBA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F24 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F6A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x618C JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5F9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x5FB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FD6 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6024 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6021 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6073 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6052 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6057 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x618F SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x6097 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA5A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6180 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6105 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6129 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x6177 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x6156 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x609A JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5F70 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x61FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6221 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x623D SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6269 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x628D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x62A2 JUMPI PUSH2 0x63BE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x63BB JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x62C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x62D9 JUMPI PUSH2 0x63B3 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x62FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6314 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6339 SWAP3 SWAP2 SWAP1 PUSH2 0xA1DE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6382 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x637F SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x638B JUMPI PUSH2 0x63B3 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x63B1 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x62A6 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x63F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA4F2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6405 PUSH2 0x8538 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x644E PUSH2 0x85E2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6446 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x64AC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x64ED SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6519 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41B1 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6553 JUMPI PUSH2 0xB35 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6575 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x65B3 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65EF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65F4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6617 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6614 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6656 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x666E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6682 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66A6 SWAP2 SWAP1 PUSH2 0x9BB4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x67CE JUMPI PUSH1 0x0 PUSH2 0x66E5 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6709 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP9 DUP6 PUSH2 0x815C JUMP JUMPDEST SWAP1 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6721 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67B0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x67AA DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x676B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x677F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67A3 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x8126 JUMP JUMPDEST SWAP1 PUSH2 0x8178 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x67BE DUP5 DUP4 PUSH2 0x81A2 JUMP JUMPDEST SWAP9 POP PUSH2 0x68D7 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x68CE JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6803 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x681F PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP9 DUP6 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6837 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x68BC DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6889 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68AD SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x815C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x67BE DUP3 PUSH2 0x67AA DUP7 DUP9 PUSH2 0x8126 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68EC PUSH2 0x8614 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6900 SWAP2 SWAP1 PUSH2 0x9616 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x691A SWAP2 SWAP1 PUSH2 0x95FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6935 DUP13 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6948 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA5DD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6986 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x69C1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69C6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x69DE JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69F2 SWAP2 SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x69FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6A57 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6A69 JUMPI PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A9A DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6AA7 JUMPI POP PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6AC4 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6AD2 JUMPI POP POP PUSH2 0x618F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6C08 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6BCA JUMPI PUSH2 0x6B08 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6AF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x8202 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6B14 JUMPI PUSH2 0x6BCA JUMP JUMPDEST PUSH2 0x6B23 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x8202 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6B2F JUMPI PUSH2 0x6BCA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B4C DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6B59 JUMPI POP PUSH2 0x6BCA JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6B68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x6BC1 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6B84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6B9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x6BAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x6BBF JUMPI POP POP PUSH2 0x6BCA JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6AE1 JUMP JUMPDEST POP PUSH2 0x6BE9 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x8202 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BF5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6AD5 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C2D SWAP2 SWAP1 PUSH2 0x8D65 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6D17 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6C80 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA327 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6CC9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6CC6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6D0B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6CF7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CFC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST SWAP5 POP PUSH2 0x41B1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6C80 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x6D70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA4AE JUMP JUMPDEST PUSH2 0x6D78 PUSH2 0x8634 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6DCC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x6EDC JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x6E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E3F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA36F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6E6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E8F SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP PUSH2 0x6E9A DUP2 PUSH2 0x825A JUMP JUMPDEST ISZERO PUSH2 0x6ED3 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x6EB2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6DF4 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x6EEC JUMPI POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x6FE2 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6F42 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6F2D JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6FD9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6F7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6F91 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6FA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6FB9 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6F48 JUMP JUMPDEST POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6FF2 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6D4A JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7007 JUMPI POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7020 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7054 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x703F JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x71D4 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x71CB JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x7082 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70CD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x70F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7105 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7119 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7148 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x71C1 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7164 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7177 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x718B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x71A1 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x713C JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7065 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x705A JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x71F8 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7214 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92F SWAP1 PUSH2 0xA537 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x725F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x618C JUMPI DUP1 ISZERO PUSH2 0x730E JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7289 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x72DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7301 SWAP2 SWAP1 PUSH2 0x9B39 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x731C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7269 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7358 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7354 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7367 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x618F JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x7385 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x618F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x73B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x73DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x315A JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x73FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7410 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x73E1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7473 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x315A JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x7494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x74A8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7479 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x74E1 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x74FB SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x750F DUP11 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x752E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x757B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x75BC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x75C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1464 DUP4 PUSH2 0x67AA PUSH2 0x75F0 DUP3 PUSH1 0x1 PUSH2 0x81A2 JUMP JUMPDEST PUSH2 0x75FA DUP9 DUP8 PUSH2 0x8126 JUMP JUMPDEST SWAP1 PUSH2 0x815C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x763E SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7679 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x767E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7692 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x990 JUMPI PUSH2 0x1464 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76D8 SWAP2 SWAP1 PUSH2 0xA327 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7728 SWAP2 SWAP1 PUSH2 0x9BB4 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x783F JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x77D8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77C9 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x77F2 DUP3 PUSH2 0x67AA DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7810 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP10 DUP6 PUSH2 0x815C JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7829 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67BE PUSH1 0x1 PUSH2 0x75FA DUP6 PUSH5 0xE8D4A51000 PUSH2 0x8178 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7924 JUMPI PUSH1 0x0 PUSH2 0x786E DUP9 PUSH5 0xE8D4A51000 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x78AE DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x78C8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x67AA DUP6 DUP6 PUSH2 0x8126 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x78E1 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x78FD PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6703 DUP10 DUP6 PUSH2 0x81A2 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x7916 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x68D7 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x68D7 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x793F DUP4 DUP4 DUP4 PUSH2 0x8466 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41B1 DUP4 DUP4 PUSH2 0x848D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x795B PUSH2 0x8614 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x796F SWAP2 SWAP1 PUSH2 0x9616 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7989 SWAP2 SWAP1 PUSH2 0x95FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6935 DUP13 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x79E2 JUMPI DUP7 PUSH2 0x79F8 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7A1B JUMPI DUP7 PUSH2 0x7A31 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x7A65 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7AB9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x7AD5 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x41B1 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x7AE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x1C30 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x41B1 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7B16 PUSH2 0x8652 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7B2A SWAP2 SWAP1 PUSH2 0x8E13 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7B44 SWAP2 SWAP1 PUSH2 0x8E13 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7B71 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA645 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7BB9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7BB6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7BE7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75AE JUMP JUMPDEST SWAP4 POP PUSH2 0x41B1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C25 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7C79 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7D12 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7CB7 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7D0B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x90C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7D27 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x63BE JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7D33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D61 SWAP2 SWAP1 PUSH2 0x8DC3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7E05 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7DA1 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7DB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7DE9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7DE6 SWAP2 DUP2 ADD SWAP1 PUSH2 0x9B5C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7DF9 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x41B1 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x41B1 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7DA1 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E52 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E6C SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x750F DUP11 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7EA8 SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7EE6 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F21 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F26 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7F3A JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x618C JUMPI PUSH2 0x14D2 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F63 SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F7D SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7F95 DUP12 PUSH2 0x81C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7FB4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x757B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7578 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x951C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8029 SWAP3 SWAP2 SWAP1 PUSH2 0x9F21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8067 SWAP2 SWAP1 PUSH2 0x9ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x80A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x80A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x80BB JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1C30 JUMPI PUSH2 0x68D7 DUP2 PUSH1 0x0 PUSH2 0x7944 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x618F DUP3 PUSH2 0x7600 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x80EF SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x810A SWAP2 SWAP1 PUSH2 0x8D2C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x811A DUP5 DUP5 DUP4 DUP10 PUSH2 0x42DE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8135 JUMPI POP PUSH1 0x0 PUSH2 0x618F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x8142 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x41B1 JUMPI PUSH2 0x41B1 PUSH2 0x8157 PUSH1 0x1 DUP7 DUP7 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0x8511 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x41B1 JUMPI PUSH2 0x41B1 PUSH2 0x8157 PUSH1 0x0 DUP7 DUP7 PUSH2 0x84B7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x818E JUMPI PUSH2 0x818E PUSH2 0x8157 PUSH1 0x3 DUP6 DUP6 PUSH2 0x84B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x8199 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x81BB JUMPI PUSH2 0x81BB PUSH2 0x8157 PUSH1 0x2 DUP6 DUP6 PUSH2 0x84B7 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x81F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x820F JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x8218 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x8225 JUMPI POP PUSH1 0x0 PUSH2 0x41B1 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x8232 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8242 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x41B1 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x8250 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x826D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xE15 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x82DF SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x830A SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x835A SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x8366 JUMPI POP PUSH1 0x0 PUSH2 0xE15 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x839F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x83B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x83D7 SWAP2 SWAP1 PUSH2 0x8D10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8402 SWAP2 SWAP1 PUSH2 0x9EF4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x841A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x842E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8452 SWAP2 SWAP1 PUSH2 0x956A JUMP JUMPDEST PUSH2 0x845E JUMPI POP PUSH1 0x0 PUSH2 0xE15 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8485 JUMPI PUSH2 0x8485 PUSH2 0x8157 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8519 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x84AE JUMPI PUSH2 0x84AE PUSH2 0x8157 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8519 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x84D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA3BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x84D6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA3DC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x618F DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x618F DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x86C2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x86D5 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST PUSH2 0xA838 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x86F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD PUSH2 0x870C DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x86F9 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8739 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8747 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI PUSH2 0x876F DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x86B2 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8758 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8791 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x879F PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI PUSH2 0x87C7 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8970 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x87B0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x87E9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x87F7 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD PUSH2 0x882E DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x881B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8850 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x885E PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x8881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x88A8 JUMPI PUSH2 0x8896 DUP10 DUP5 PUSH2 0x8C6F JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8884 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88C4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x88D2 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x88F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x88F6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8922 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8930 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x871E JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8954 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8980 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x898E PUSH2 0x86D0 DUP3 PUSH2 0xA87D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x89CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x89DC PUSH2 0x86D0 DUP3 PUSH2 0xA87D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x89F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3067 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA8A0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x618F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A24 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A2E PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8A3B DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8A4B DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8A5E DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A7A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A84 PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x8A91 DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x8AA1 DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x8A5E DUP2 PUSH2 0xA900 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AC5 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8ACF PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8ADC DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8AEC DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B08 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8B12 PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8B26 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8B39 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x8B4C DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8B76 DUP5 DUP3 DUP6 ADD PUSH2 0x8970 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B95 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8B9E DUP2 PUSH2 0xA838 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8BAB DUP4 DUP4 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8BBA DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8BCC DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8BDE DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x8BF0 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8CD2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x8C02 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x8C14 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x8C26 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x8C3A DUP5 DUP3 DUP6 ADD PUSH2 0x869C JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8C58 DUP5 DUP3 DUP6 ADD PUSH2 0x8CDD JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C80 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8C8A PUSH1 0x80 PUSH2 0xA838 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x8C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x8CB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x618F DUP2 PUSH2 0xA925 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x618F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D05 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D21 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D3E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8D49 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8D5A DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x8D85 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x8D96 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8DA7 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8DB8 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8DE2 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8DF3 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8E08 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8E25 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8E30 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8E4C JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x8E5F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8E69 PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x8E7A DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8E8C DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8E9E DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8EB4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8EC0 DUP9 DUP3 DUP7 ADD PUSH2 0x89BE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8EEA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8EF5 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8F05 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8F15 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8F25 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8F4B DUP9 DUP3 DUP10 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8F6D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8F78 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8F88 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8F98 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FBE DUP8 DUP3 DUP9 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8FDF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8FEA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8FFA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x900A DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x902E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9039 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9054 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9060 DUP8 DUP4 DUP9 ADD PUSH2 0x86B2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9075 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9082 DUP7 DUP3 DUP8 ADD PUSH2 0x88B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x90A3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x90AE DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8F15 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x90D7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x90EC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x90FC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x910A PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x9126 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x9151 JUMPI DUP1 MLOAD PUSH2 0x913D DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x912A JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9171 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9187 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x919A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x91A8 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x91C8 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x91EA JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x91CC JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x9201 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x920E DUP7 DUP3 DUP8 ADD PUSH2 0x8912 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x921E DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8A04 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9239 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x924F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9262 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9270 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x9283 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x92A9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x92BF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x92CB DUP8 DUP4 DUP9 ADD PUSH2 0x8781 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x92E0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x92ED DUP7 DUP3 DUP8 ADD PUSH2 0x8781 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x930F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9324 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x87D9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9342 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9357 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9363 DUP6 DUP3 DUP7 ADD PUSH2 0x87D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8D5A DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9388 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x939D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93A9 DUP7 DUP3 DUP8 ADD PUSH2 0x87D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x93BA DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8E08 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x93DC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93F1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9401 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x940F PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x942B JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x9151 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x942F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9461 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9477 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x948A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9498 PUSH2 0x86D0 DUP3 PUSH2 0xA85E JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x94BB JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x94E7 JUMPI PUSH2 0x94D1 DUP14 DUP4 PUSH2 0x8B82 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x94BF JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x94FF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x950C DUP7 DUP3 DUP8 ADD PUSH2 0x8840 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x921E DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x869C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x952D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9542 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x8912 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x955F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA8F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x957B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9593 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x95A8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1464 DUP5 DUP3 DUP6 ADD PUSH2 0x89BE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x95C8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x95D3 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x95EE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9060 DUP8 DUP4 DUP9 ADD PUSH2 0x87D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x960B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x41B1 DUP2 PUSH2 0xA916 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9628 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9633 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP2 POP PUSH2 0x9642 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x8A69 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9661 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x966E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9679 PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x968B DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x96A0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x96B0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x96DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x96F5 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9708 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9712 PUSH1 0x40 PUSH2 0xA838 JUMP JUMPDEST PUSH2 0x971C DUP10 DUP5 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x972F JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x973B DUP11 DUP3 DUP7 ADD PUSH2 0x8729 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9752 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x869C JUMP JUMPDEST SWAP5 POP PUSH2 0x9761 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x869C JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9776 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8FBE DUP8 DUP3 DUP9 ADD PUSH2 0x88B4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9798 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97A2 DUP7 DUP7 PUSH2 0x8A13 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x97B2 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x97C2 DUP2 PUSH2 0xA916 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FB2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x97F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97FB DUP7 DUP7 PUSH2 0x8AB4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x96A0 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x981C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9832 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x9845 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x984F PUSH1 0xA0 PUSH2 0xA838 JUMP JUMPDEST PUSH2 0x9859 DUP7 DUP5 PUSH2 0x869C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x986C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x9878 DUP8 DUP3 DUP7 ADD PUSH2 0x86B2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x988F JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x989B DUP8 DUP3 DUP7 ADD PUSH2 0x8781 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x98B2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x98BE DUP8 DUP3 DUP7 ADD PUSH2 0x86B2 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x98D5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x98E1 DUP8 DUP3 DUP7 ADD PUSH2 0x88B4 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9905 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x991B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9927 DUP9 DUP4 DUP10 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9939 DUP3 PUSH2 0xA8DD JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x994B DUP3 PUSH2 0xA8DD JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x9776 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9975 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x998A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9996 DUP8 DUP3 DUP9 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8FFA DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x99BC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x99D1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x99DD DUP8 DUP3 DUP9 ADD PUSH2 0x8AF7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x99F5 DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8DB8 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9A1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9A24 DUP6 DUP6 PUSH2 0x8B82 JUMP JUMPDEST SWAP3 POP PUSH2 0x9A34 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x8C6F JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8E08 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x9A5B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9A68 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9A73 PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9A7E DUP2 PUSH2 0xA8DD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9A98 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9AAD DUP2 PUSH2 0xA8DD JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x97C2 DUP2 PUSH2 0xA8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9AD2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9ADF JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x9AEA PUSH1 0x60 PUSH2 0xA838 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x9AFF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x9B12 DUP2 PUSH2 0xA925 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9B28 DUP2 PUSH2 0xA925 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8E08 DUP2 PUSH2 0xA8F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B4A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x41B1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B6E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9B94 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9BCB JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C38 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C13 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C38 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C56 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9C8A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA8A0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1464 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST PUSH2 0x9DB9 DUP3 DUP3 MLOAD PUSH2 0x9BF3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9DCB PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x9DDE PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x9DF1 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x9E04 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9EAE JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9E17 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9E2A PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9E3D PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x9E51 DUP3 DUP6 ADD DUP3 PUSH2 0x9BF3 JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x9E71 DUP3 DUP6 ADD DUP3 PUSH2 0x9EBB JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x9E8A DUP2 PUSH2 0xA8D0 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9EEA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA8A0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x68D7 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x68D7 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA07A SWAP1 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA0A9 SWAP1 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x68D7 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xA0D2 DUP6 PUSH2 0xA8D0 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xA0EC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x9C43 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xA07A DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xA11B DUP12 PUSH2 0xA8D0 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xA133 DUP3 DUP6 ADD DUP12 PUSH2 0x9C43 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xA147 DUP3 DUP11 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA15A DUP7 PUSH2 0xA8D0 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xA172 DUP2 DUP7 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xA186 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1464 SWAP1 DUP4 ADD DUP5 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x14D2 DUP2 DUP6 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1F1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA255 JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA243 DUP4 DUP4 MLOAD PUSH2 0x9C72 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA227 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x811A DUP2 DUP9 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA2CF JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xA2B0 DUP9 DUP7 ADD DUP3 PUSH2 0x9C72 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA28C JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x14D2 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA0A9 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA1F1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9C72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1464 SWAP1 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xA3C8 DUP6 PUSH2 0xA8D0 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA3C8 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0xA3FA JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA451 JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0xA43F DUP7 DUP4 MLOAD PUSH2 0x9C9E JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA423 JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xA468 DUP2 DUP7 PUSH2 0x9C00 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D2 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9D0D JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x41B1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9CDB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x31393939393939393939393939393939 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5E9 DUP3 DUP8 PUSH2 0x9CDB JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x68D7 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x9C43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA622 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x9D42 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA634 DUP2 DUP7 PUSH2 0x9D42 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA658 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA68E PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9D61 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xA6C3 DUP3 DUP6 PUSH2 0x9DAE JUMP JUMPDEST PUSH2 0x41B1 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x9E7F JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xA6E0 DUP3 DUP7 PUSH2 0x9DAE JUMP JUMPDEST PUSH2 0xA6EE PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9E7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1464 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9C00 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA73A PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9C00 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x68D7 DUP2 DUP6 PUSH2 0x9C00 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x20 PUSH1 0x80 DUP2 DUP5 ADD MSTORE PUSH2 0xA766 PUSH1 0x80 DUP5 ADD DUP8 PUSH2 0x9C00 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP3 DUP3 ADD SWAP1 DUP4 DUP2 MUL DUP4 ADD DUP5 ADD DUP5 DUP10 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA7B1 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA79F DUP4 DUP4 MLOAD PUSH2 0x9C72 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA783 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x60 DUP9 ADD MSTORE PUSH2 0xA186 DUP2 DUP10 PUSH2 0x9C00 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA803 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA81C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA873 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA892 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA8BB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA8A3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA8CA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA8DA JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8DA JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE DUP11 0xDF SWAP14 LOG0 PUSH3 0x36608E SAR 0x5E 0xF PUSH8 0x7E447D647E8BDFE9 GAS PUSH8 0xCEB12A1F5BFCF018 ISZERO PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1439:1309:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2593:1149:1;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1948:1154:10;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4230:977:18:-;;;;;;:::i;:::-;;:::i;1551:1290:4:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2195:196:26:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2131:1734:3:-;;;;;;:::i;:::-;;:::i;4274:2338:23:-;;;;;;:::i;:::-;;:::i;3549:919:15:-;;;;;;:::i;:::-;;:::i;4133:670:21:-;;;;;;:::i;:::-;;:::i;1936:1742:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1410:1411:17:-;;;;;;:::i;:::-;;:::i;1382:1092:14:-;;;;;;:::i;:::-;;:::i;1214:988:24:-;;;;;;:::i;:::-;;:::i;2429:755:12:-;;;;;;:::i;:::-;;:::i;1512:1075:1:-;;;;;;:::i;:::-;;:::i;1731:1130:5:-;;;;;;:::i;:::-;;:::i;3526:1138:10:-;;;;;;:::i;:::-;;:::i;4509:2595:11:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2047:1569:25:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4265:2355:2:-;;;;;;:::i;:::-;;:::i;4028:1924:25:-;;;;;;:::i;:::-;;:::i;2751:583:20:-;;;;;;:::i;:::-;;:::i;5648:955:18:-;;;;;;:::i;:::-;;:::i;2272:474:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;946:381:26:-;;;;;;:::i;:::-;;:::i;3416:313:4:-;;;;;;:::i;:::-;;:::i;4474:920:15:-;;;;;;:::i;:::-;;:::i;1621:2080:21:-;;;;;;:::i;:::-;;:::i;888:1649:22:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3287:1650:5:-;;;;;;:::i;:::-;;:::i;1764:2076:2:-;;;;;;:::i;:::-;;:::i;6743:1029:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3464:1039:11:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2424:1290:16:-;;;;;;:::i;:::-;;:::i;4281:1535:3:-;;;;;;:::i;:::-;;:::i;1540:1205:13:-;;;;;;:::i;:::-;;:::i;2025:1175:7:-;;;;;;:::i;:::-;;:::i;1325:1038:9:-;;;;;;:::i;:::-;;:::i;1432:986:16:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2894:593:14:-;;;;;;:::i;:::-;;:::i;1333:415:26:-;;;;;;:::i;:::-;;:::i;3202:653:13:-;;;;;;:::i;:::-;;:::i;1572:2343:23:-;;;;;;:::i;:::-;;:::i;2553:972:24:-;;;;;;:::i;:::-;;:::i;2788:1037:9:-;;;;;;:::i;:::-;;:::i;1770:1175:11:-;;;;;;:::i;:::-;;:::i;3797:1026:7:-;;;;;;:::i;:::-;;:::i;4221:1750:6:-;;;;;;:::i;:::-;;:::i;1754:435:26:-;;;;;;:::i;:::-;;:::i;1440:887:20:-;;;;;;:::i;:::-;;:::i;7885:1337:11:-;;;;;;:::i;:::-;;:::i;4189:904:16:-;;;;;;:::i;:::-;;:::i;2543:1848:22:-;;;;;;:::i;:::-;;:::i;2593:1149:1:-;2783:19;;;;:26;2712:34;;2783:26;-1:-1:-1;;;;;2839:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2839:25:1;;2819:45;;2893:9;2888:838;2912:10;2908:1;:14;2888:838;;;2982:6;:13;;;-1:-1:-1;;;;;2971:38:1;;3089:6;:19;;;3109:1;3089:22;;;;;;;;;;;;;;3113:6;:11;;;3126:6;:15;;;3143:6;:23;;;2971:196;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2971:196:1;;;;;;;;;;;;:::i;:::-;;;2947:765;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3570:26;;-1:-1:-1;;;3570:26:1;;;;;;;:::i;:::-;;;;;;;;2947:765;3284:7;3292:1;3284:10;;;;;;;;;;;;;;3261:17;3279:1;3261:20;;;;;;;;;;;;;:33;;;;;3378:17;3396:1;3378:20;;;;;;;;;;;;;;3402:1;3378:25;3374:85;;;3431:5;;;3374:85;3188:289;2924:3;;2888:838;;;;2593:1149;;;;:::o;1948:1154:10:-;2226:24;;2131:22;;;;2226:24;-1:-1:-1;;;;;2280:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2280:25:10;;2260:45;;2323:31;2341:6;2349:4;2323:17;:31::i;:::-;2315:39;;2368:5;:12;2384:1;2368:17;2364:81;;;2401:33;;;2364:81;2459:9;2454:642;2478:10;2474:1;:14;2454:642;;;2545:6;-1:-1:-1;;;;;2529:37:10;;1507:5;2634:17;2652:1;2634:20;;;;;;;;;;;;;;2656:5;2663:4;2529:139;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2529:139:10;;;;;;;;;;;;:::i;:::-;;;2509:577;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3066:5;;;2509:577;2773:7;2795:1;2781:4;:11;:15;2773:24;;;;;;;;;;;;;;2750:17;2768:1;2750:20;;;;;;;;;;;;;:47;;;;;2873:17;2891:1;2873:20;;;;;;;;;;;;;;2897:1;2873:25;2869:77;;;2922:5;;;2869:77;2685:275;2490:3;;2454:642;;;;1948:1154;;;;;;;;:::o;4230:977:18:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:18;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:18;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:18;;;;;;;;-1:-1:-1;;4670:234:18;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;1551:1290:4:-;1772:21;1795;1818:34;1872:4;:10;;;:17;1893:1;1872:22;1868:100;;;1910:47;;1868:100;2001:62;2015:4;2021:10;2033;2045:17;2001:13;:62::i;:::-;2107:24;;1977:86;;-1:-1:-1;1977:86:4;-1:-1:-1;;;;;;2093:39:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2093:39:4;;2073:59;;2148:9;2143:635;2167:17;:24;2163:1;:28;2143:635;;;2247:13;-1:-1:-1;;;;;2232:61:4;;873:5;2366:4;2372:17;2390:1;2372:20;;;;;;;;;;;;;;2232:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2232:161:4;;;;;;;;-1:-1:-1;;2232:161:4;;;;;;;;;;;;:::i;:::-;;;2212:556;;2748:5;;2212:556;2488:6;2465:17;2483:1;2465:20;;;;;;;;;;;;;:29;;;;;2570:17;2588:1;2570:20;;;;;;;;;;;;;;2594:1;2570:25;2566:77;;;2619:5;;;2566:77;2410:247;2193:3;;2143:635;;;;1551:1290;;;;;;;;;:::o;2195:196:26:-;2338:20;;2376:8;;2195:196;;;;:::o;2131:1734:3:-;2348:34;2398:40;2415:10;2427;2398:16;:40::i;:::-;2490:14;;;;2544:15;;;2557:1;2544:15;;;2515:26;2544:15;;;;;;;;;;;;;;;;;;-1:-1:-1;2544:15:3;2515:44;;2592:10;2569;2580:1;2569:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;2569:34:3;;;-1:-1:-1;;;;;2569:34:3;;;;;2636:10;2613;2624:1;2613:13;;;;;;;;-1:-1:-1;;;;;2613:34:3;;;:13;;;;;;;;;;;:34;2679:24;;;-1:-1:-1;;;;;2733:25:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:25:3;;2713:45;;2768:48;;:::i;:::-;2831:18;:16;:18::i;:::-;2768:81;;2865:9;2860:999;2884:10;2880:1;:14;2860:999;;;2915:49;2983:48;3000:8;3010:17;3028:1;3010:20;;;;;;;;;;;;;;2983:16;:48::i;:::-;3173:90;;-1:-1:-1;;;3173:90:3;;2915:116;;-1:-1:-1;;;;;;3173:20:3;;;;;:90;;3194:34;;2915:116;;3241:10;;3253:9;;3173:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3173:90:3;;;;;;;;;;;;:::i;:::-;;;3046:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:5;;;;3046:803;3508:24;3535:7;3543:1;3535:10;;;;;;;;;;;;;;-1:-1:-1;;3535:15:3;3508:42;;3593:1;3572:17;:22;3568:74;;3618:5;;;;;3568:74;3690:17;3659;3677:1;3659:20;;;;;;;;;;;;;:49;;;;;3380:343;;-1:-1:-1;2896:3:3;;2860:999;;;;2131:1734;;;;;;;;;;:::o;4274:2338:23:-;4480:34;4530:40;4547:10;4559;4530:16;:40::i;:::-;4601:24;;;-1:-1:-1;;;;;4655:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4655:25:23;-1:-1:-1;4635:45:23;-1:-1:-1;4691:41:23;-1:-1:-1;;;;;4735:24:23;;;:106;;4802:39;4822:6;4830:10;4802:19;:39::i;:::-;4735:106;;;4797:1;4735:106;4691:150;-1:-1:-1;4851:41:23;-1:-1:-1;;;;;4895:24:23;;;:106;;4962:39;4982:6;4990:10;4962:19;:39::i;:::-;4895:106;;;4957:1;4895:106;4851:150;;5016:9;5011:1595;5035:10;5031:1;:14;5011:1595;;;5084:4;-1:-1:-1;;;;;5106:24:23;;5102:1353;;5187:216;5250:18;5291:52;;;5365:17;5383:1;5365:20;;;;;;;;;;;;;;5187:33;:216::i;:::-;5151:17;5169:1;5151:20;;;;;;;;;;;;;5150:253;;;;;;;;;5102:1353;;;-1:-1:-1;;;;;5428:24:23;;5424:1031;;5509:216;5572:18;5613:52;;;5687:17;5705:1;5687:20;;;;;;;5424:1031;5764:15;5821:216;5884:18;5925:52;;;5999:17;6017:1;5999:20;;;;;;;5821:216;5797:240;-1:-1:-1;5797:240:23;-1:-1:-1;6059:12:23;;6055:386;;6132:219;6199:18;-1:-1:-1;;;6322:7:23;6132:33;:219::i;:::-;6096:17;6114:1;6096:20;;;;;;;;;;;;;6095:256;;;;;;;;;6055:386;;;6421:1;6398:17;6416:1;6398:20;;;;;;;;;;;;;:24;;;;;6055:386;5424:1031;;6517:10;6516:11;:40;;;;6531:17;6549:1;6531:20;;;;;;;;;;;;;;6555:1;6531:25;6516:40;6512:84;;;6576:5;;;6512:84;-1:-1:-1;5047:3:23;;5011:1595;;;;4274:2338;;;;;;;;;:::o;3549:919:15:-;3770:34;3820:40;3837:10;3849;3820:16;:40::i;:::-;3870:8;3886:7;:18;;;3870:35;;3915:8;3931:3;-1:-1:-1;;;;;3931:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:24;;3915:26;;-1:-1:-1;3974:24:15;-1:-1:-1;;;;;4028:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4028:25:15;;4008:45;;4082:3;-1:-1:-1;;;;;4082:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4068:23:15;:10;-1:-1:-1;;;;;4068:23:15;;;:50;;;;;4109:3;-1:-1:-1;;;;;4109:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4095:23:15;:10;-1:-1:-1;;;;;4095:23:15;;;4068:50;4064:105;;;4134:24;;;;;4064:105;4184:9;4179:283;4203:10;4199:1;:14;4179:283;;;4234:17;4254:79;4269:7;4278:10;4290;4302:17;4320:1;4302:20;;;;;;;;;;;;;;4324:3;4329;4254:14;:79::i;:::-;4234:99;-1:-1:-1;4352:14:15;4348:58;;4386:5;;;4348:58;4442:9;4419:17;4437:1;4419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4215:3:15;;4179:283;;3549:919;;;;;;;:::o;4133:670:21:-;4497:258;;;4355:34;4497:258;;;;;;4461:335;;4497:258;4555:35;4566:10;4578:11;4555:35;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4635:12;4649:11;4624:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4701:39;4497:258;;;4769:17;4461:22;:335::i;:::-;4454:342;4133:670;-1:-1:-1;;;;;4133:670:21:o;1936:1742:6:-;2153:13;2168:12;2182:34;2232:40;2249:10;2261;2232:16;:40::i;:::-;2303:24;;;-1:-1:-1;;;;;2357:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2357:25:6;-1:-1:-1;2409:13:6;;2400:55;;-1:-1:-1;;;2400:55:6;;2337:45;;-1:-1:-1;;;;;;2400:31:6;;;;:55;;2432:10;;2444;;2400:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2393:62;-1:-1:-1;2465:17:6;-1:-1:-1;;;;;2562:18:6;;;2558:420;;-1:-1:-1;2643:4:6;;-1:-1:-1;2608:10:6;2558:420;;;2694:13;;2685:55;;-1:-1:-1;;;2685:55:6;;-1:-1:-1;;;;;2685:31:6;;;;;;:55;;2717:10;;2729;;2685:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2678:62;-1:-1:-1;;;;;;2798:27:6;;2794:108;;2845:42;;;;2794:108;-1:-1:-1;2962:5:6;;-1:-1:-1;2927:10:6;2558:420;3038:4;-1:-1:-1;;;;;3032:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3027:103;;3077:42;;;;3027:103;3145:9;3140:532;3164:10;3160:1;:14;3140:532;;;3195:17;3215:268;3280:10;3292:4;3298:9;3309:4;:11;;;3269:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3370:10;3382:4;3388:9;3399:4;:11;;;3359:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3449:17;3467:1;3449:20;;;;;;;;;;;;;;3215:36;:268::i;:::-;3195:288;;3520:9;3497:17;3515:1;3497:20;;;;;;;;;;;;;:32;;;;;3597:17;3615:1;3597:20;;;;;;;;;;;;;;3621:1;3597:25;3593:69;;;3642:5;;;3593:69;-1:-1:-1;3176:3:6;;3140:532;;;;1936:1742;;;;;;;;;;:::o;1410:1411:17:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:17;-1:-1:-1;1818:45:17;-1:-1:-1;;;;;;1931:25:17;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:17;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:17;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:17;-1:-1:-1;;;;;;2199:268:17;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:17;;2017:798;;;;1410:1411;;;;;;;;:::o;1382:1092:14:-;1589:34;1639:40;1656:10;1668;1639:16;:40::i;:::-;1762:24;;;-1:-1:-1;;;;;1816:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1816:25:14;;1796:45;;1857:9;1852:616;1876:10;1872:1;:14;1852:616;;;1936:6;-1:-1:-1;;;;;1927:30:14;;940:5;2023:10;2035;2047:17;2065:1;2047:20;;;;;;;;;;;;;;1927:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1927:141:14;;;;;;;;-1:-1:-1;;1927:141:14;;;;;;;;;;;;:::i;:::-;;;1907:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2438:5;;;1907:551;2163:6;2140:17;2158:1;2140:20;;;;;;;;;;;;;:29;;;;;2245:17;2263:1;2245:20;;;;;;;;;;;;;;2269:1;2245:25;2241:77;;;2294:5;;;2241:77;2085:247;1888:3;;1852:616;;;;1382:1092;;;;;;;:::o;1214:988:24:-;1469:24;;1398:34;;1469:24;-1:-1:-1;;;;;1523:25:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1523:25:24;;1503:45;;1563:9;1558:638;1582:10;1578:1;:14;1558:638;;;1652:6;-1:-1:-1;;;;;1633:40:24;;846:5;1741:17;1759:1;1741:20;;;;;;;;;;;;;;1763:4;1633:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1633:135:24;;;;;;;;;;;;:::i;:::-;;;1613:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2166:5;;;1613:573;1873:7;1895:1;1881:4;:11;:15;1873:24;;;;;;;;;;;;;;1850:17;1868:1;1850:20;;;;;;;;;;;;;:47;;;;;1973:17;1991:1;1973:20;;;;;;;;;;;;;;1997:1;1973:25;1969:77;;;2022:5;;;1969:77;1785:275;1594:3;;1558:638;;;;1214:988;;;;;;:::o;2429:755:12:-;2642:16;2674:40;2691:10;2703;2674:16;:40::i;:::-;2743:8;:18;;;-1:-1:-1;;;;;2729:32:12;:10;-1:-1:-1;;;;;2729:32:12;;;:78;;;-1:-1:-1;2787:19:12;;-1:-1:-1;;;;;2765:42:12;;;;;;;2729:78;2725:328;;;2904:24;;2942:34;2904:24;-1:-1:-1;;;;;2979:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2979:25:12;-1:-1:-1;2942:62:12;-1:-1:-1;3018:24:12;;-1:-1:-1;;3018:24:12;1512:1075:1;1703:19;;;;:26;1632:34;;1703:26;-1:-1:-1;;;;;1759:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1759:25:1;;1739:45;;1813:9;1808:763;1832:10;1828:1;:14;1808:763;;;1902:6;:13;;;-1:-1:-1;;;;;1891:39:1;;2010:6;:19;;;2030:1;2010:22;;;;;;;;;;;;;;2034:6;:11;;;2047:6;:15;;;2064:6;:23;;;1891:197;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1891:197:1;;;;;;;;;;;;:::i;:::-;;;1867:690;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2533:5;;;1867:690;2205:7;2234:1;2213:6;:11;;;:18;:22;2205:31;;;;;;;;;;;;;;2182:17;2200:1;2182:20;;;;;;;;;;;;;:54;;;;;2320:17;2338:1;2320:20;;;;;;;;;;;;;;2344:1;2320:25;2316:85;;;2373:5;;;2316:85;2109:310;1844:3;;1808:763;;1731:1130:5;2019:24;;1948:34;;2019:24;-1:-1:-1;;;;;2073:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:5;;2053:45;;2113:9;2108:747;2132:10;2128:1;:14;2108:747;;;2164:15;2181:23;2224:9;:21;;;-1:-1:-1;;;;;2224:32:5;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:5;;;;;;;;;;;;;;-1:-1:-1;;;;;2298:225:5;-1:-1:-1;;;;;;2298:225:5;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2703:9;2680:17;2698:1;2680:20;;;;;;;;;;;;;:32;;;;;2780:17;2798:1;2780:20;;;;;;;;;;;;;;2804:1;2780:25;2776:69;;;2825:5;;;;;2776:69;-1:-1:-1;;;2144:3:5;;2108:747;;3526:1138:10;3803:24;;3708:22;;;;3803:24;-1:-1:-1;;;;;3857:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3857:25:10;;3837:45;;3900:31;3918:6;3926:4;3900:17;:31::i;:::-;3892:39;;3945:5;:12;3961:1;3945:17;3941:81;;;3978:33;;;3941:81;4036:9;4031:627;4055:10;4051:1;:14;4031:627;;;4122:6;-1:-1:-1;;;;;4106:36:10;;1507:5;4210:17;4228:1;4210:20;;;;;;;;;;;;;;4232:5;4239:4;4106:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4106:138:10;;;;;;;;;;;;:::i;:::-;;;4086:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4349:7;4357:1;4349:10;;;;;;;;;;;;;;4326:17;4344:1;4326:20;;;;;;;;;;;;;:33;;;;;4435:17;4453:1;4435:20;;;;;;;;;;;;;;4459:1;4435:25;4431:77;;;4484:5;;;4431:77;4261:261;4067:3;;4031:627;;4509:2595:11;4840:16;;;;;4967;;;4981:1;4967:16;;;;;;;;;4706:17;;;;4981:1;4967:16;;;;4840;4967;;;;;-1:-1:-1;4967:16:11;4931:52;;5015:9;4993:16;5010:1;4993:19;;;;;;;;;;;;;;;;;:31;5034:28;5079:1;5065:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5065:16:11;;5034:47;;5110:4;:9;;;-1:-1:-1;;;;;5096:23:11;:10;-1:-1:-1;;;;;5096:23:11;;5092:2006;;;5183:289;;-1:-1:-1;;;5183:289:11;;-1:-1:-1;;;;;5183:29:11;;;;;931:5;;5183:289;;5301:10;;5337:34;;5397:16;;5439:11;;5183:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5183:289:11;;;;;;;;;;;;:::i;:::-;;;5163:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5578:102;5163:517;;;5556:6;-1:-1:-1;5549:13:11;;-1:-1:-1;;;5549:13:11;5163:517;5092:2006;;;5714:4;:9;;;-1:-1:-1;;;;;5700:23:11;:10;-1:-1:-1;;;;;5700:23:11;;5696:1402;;;5787:289;;-1:-1:-1;;;5787:289:11;;-1:-1:-1;;;;;5787:29:11;;;;;931:5;;5787:289;;5905:10;;5941:34;;6001:16;;6043:11;;5787:289;;;:::i;5696:1402::-;6414:466;;-1:-1:-1;;;6414:466:11;;-1:-1:-1;;;;;6414:31:11;;;;;931:5;;6414:466;;6534:10;;6570:34;;6630:16;;6672:11;;6709:10;;6570:34;;6630:16;;6672:11;;6414:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6414:466:11;;;;;;;;;;;;:::i;:::-;;;6394:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4509:2595;;;;;;;;;:::o;2047:1569:25:-;2247:27;2288:34;2347:35;2397:45;2416:6;-1:-1:-1;;;;;2416:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2434:4;2440:1;2397:18;:45::i;:::-;2347:95;;2487:17;:24;-1:-1:-1;;;;;2473:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2473:39:25;;2453:59;;2549:17;:24;-1:-1:-1;;;;;2537:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2522:52;;2590:9;2585:1025;2609:17;:24;2605:1;:28;2585:1025;;;2710:27;2751:20;2794:9;2789:584;2813:9;:16;2809:1;:20;2789:584;;;2854:24;2881:34;2896:4;2902:9;2912:1;2902:12;;;;;;;;;;;;;;2881:14;:34::i;:::-;2854:61;;2957:6;-1:-1:-1;;;;;2957:22:25;;1626:5;3048:11;3061:17;3079:1;3061:20;;;;;;;;;;;;;;2957:125;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2957:125:25;;;;;;;;-1:-1:-1;;2957:125:25;;;;;;;;;;;;:::i;:::-;;;2933:426;;;;;3193:9;3177:12;:25;3173:158;;3245:9;3230:24;;3297:11;3280:28;;3173:158;3107:242;2933:426;-1:-1:-1;2831:3:25;;2789:584;;;-1:-1:-1;3448:17:25;3444:61;;3485:5;;;;3444:61;3541:12;3518:17;3536:1;3518:20;;;;;;;;;;;;;:35;;;;;3585:14;3567:12;3580:1;3567:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;2635:3:25;;2585:1025;;4265:2355:2;4597:24;;4477:34;;4554:11;;4597:24;-1:-1:-1;;;;;4651:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4651:25:2;-1:-1:-1;4691:24:2;;-1:-1:-1;;;4691:24:2;;4631:45;;-1:-1:-1;;;;;;4691:12:2;;;;;:24;;4704:10;;4691:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4690:25;:54;;;-1:-1:-1;4720:24:2;;-1:-1:-1;;;4720:24:2;;-1:-1:-1;;;;;4720:12:2;;;;;:24;;4733:10;;4720:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4719:25;4690:54;4686:109;;;4760:24;;;;4686:109;4805:30;;:::i;:::-;4875:27;;-1:-1:-1;;;4875:27:2;;-1:-1:-1;;;;;4875:15:2;;;;;:27;;4891:10;;4875:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4845:57;;4942:27;;-1:-1:-1;;;4942:27:2;;-1:-1:-1;;;;;4942:15:2;;;;;:27;;4958:10;;4942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912;;;:57;5008:38;;-1:-1:-1;;;5008:38:2;;-1:-1:-1;;;;;5008:26:2;;;;;:38;;5035:10;;5008:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4979:26;;;;:67;;;;5085:38;-1:-1:-1;;;5085:38:2;;-1:-1:-1;;;;;5085:26:2;;;;;:38;;5112:10;;5085:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5056:9;:26;;:67;;;;;5153:4;-1:-1:-1;;;;;5153:15:2;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5133;;;:37;5186:9;5181:1433;5205:10;5201:1;:14;5181:1433;;;5407:49;5413:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5407:5;:49::i;:::-;5384:17;5402:1;5384:20;;;;;;;;;;;;;;:72;5380:116;;;5476:5;;5380:116;5529:4;-1:-1:-1;;;;;5529:19:2;;840:5;5640:9;:27;;;5693:9;:26;;;5745:9;:27;;;5798:9;:26;;;5850:17;5868:1;5850:20;;;;;;;;;;;;;;5896:9;:17;;;5529:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5529:406:2;;;;;;;;-1:-1:-1;;5529:406:2;;;;;;;;;;;;:::i;:::-;;;5509:1095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6584:5;;;5509:1095;6178:27;;6172:48;;1071:1;1010:8;1064;;6172:5;:48::i;:::-;6163:6;:57;6159:109;;;6244:5;;;6159:109;6309:6;6286:17;6304:1;6286:20;;;;;;;;;;;;;:29;;;;;6391:17;6409:1;6391:20;;;;;;;;;;;;;;6415:1;6391:25;6387:77;;;6440:5;;;6387:77;5952:526;5217:3;;5181:1433;;4028:1924:25;4227:27;4268:34;4327:35;4377:45;4396:6;-1:-1:-1;;;;;4396:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4377:45;4327:95;;4432:36;4471:23;4489:4;4471:17;:23::i;:::-;4432:62;;4539:17;:24;-1:-1:-1;;;;;4525:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4525:39:25;;4505:59;;4601:17;:24;-1:-1:-1;;;;;4589:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4574:52;;4642:9;4637:1309;4661:17;:24;4657:1;:28;4637:1309;;;4762:27;4803:21;4847:9;4842:865;4866:9;:16;4862:1;:20;4842:865;;;4972:24;4999:118;5035:12;5069:30;5086:9;5096:1;5086:12;;;;;;;;;;;;;;5069:16;:30::i;:::-;4999:14;:118::i;:::-;4972:145;;5159:6;-1:-1:-1;;;;;5159:23:25;;1626:5;5251:11;5264:17;5282:1;5264:20;;;;;;;;;;;;;;5159:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5159:126:25;;;;;;;;-1:-1:-1;;5159:126:25;;;;;;;;;;;;:::i;:::-;;;5135:558;;;;;5381:18;;;:49;;;5420:10;5403:13;:27;;5381:49;5377:289;;;5474:10;5458:26;;5609:34;5624:4;5630:9;5640:1;5630:12;;;;;;;5609:34;5592:51;;5377:289;5310:374;5135:558;-1:-1:-1;4884:3:25;;4842:865;;;-1:-1:-1;5782:18:25;5778:62;;5820:5;;;;5778:62;5876:13;5853:17;5871:1;5853:20;;;;;;;;;;;;;:36;;;;;5921:14;5903:12;5916:1;5903:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;4687:3:25;;4637:1309;;;;4028:1924;;;;;;;;:::o;2751:583:20:-;3046:240;;;2953:34;3046:240;;;;;;3010:317;;3046:240;3104:28;3115:10;3127:4;3104:28;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3177:10;3189:4;3166:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3234:37;3046:240;;;3300:17;3010:22;:317::i;5648:955:18:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:18;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:18;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;2272:474:8;2353:32;2433:9;-1:-1:-1;;;;;2415:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2401:49;;2465:9;2460:280;2480:21;;;2460:280;;2547:4;2522:11;2534:1;2522:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2569:9;;2579:1;2569:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2565:71;;-1:-1:-1;2565:71:8;;2613:8;;2565:71;2705:4;2716:9;;2726:1;2716:12;;;;;;;;;;;;;;;;;;:::i;:::-;2697:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2650:11;2662:1;2650:14;;;;;;;;;;;;;;:22;;2674:11;2686:1;2674:14;;;;;;;;;;;;;;;;;;2649:80;;;;;;;;;2460:280;2503:3;;2460:280;;;;2272:474;;;;:::o;946:381:26:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:26;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:26;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:26;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:26;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;3416:313:4:-;3636:21;3659;3682:34;3416:313;;;;;;;;:::o;4474:920:15:-;4694:34;4744:40;4761:10;4773;4744:16;:40::i;:::-;4794:8;4810:7;:18;;;4794:35;;4839:8;4855:3;-1:-1:-1;;;;;4855:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4897:24;;4839:26;;-1:-1:-1;4897:24:15;-1:-1:-1;;;;;4951:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4951:25:15;;4931:45;;5004:3;-1:-1:-1;;;;;5004:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4990:23:15;:10;-1:-1:-1;;;;;4990:23:15;;;:50;;;;;5031:3;-1:-1:-1;;;;;5031:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5017:23:15;:10;-1:-1:-1;;;;;5017:23:15;;;4990:50;4986:105;;;5056:24;;;;;4986:105;5106:9;5101:286;5125:10;5121:1;:14;5101:286;;;5156:18;5177:78;5191:7;5200:10;5212;5224:17;5242:1;5224:20;;;;;;;;;;;;;;5246:3;5251;5177:13;:78::i;:::-;5156:99;-1:-1:-1;5274:15:15;5270:59;;5309:5;;;5270:59;5366:10;5343:17;5361:1;5343:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;5137:3:15;;5101:286;;1621:2080:21;1844:34;2006:30;2157:11;:23;;;-1:-1:-1;;;;;2148:44:21;;2201:10;2193:19;;2148:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2048:23;;2039:65;;-1:-1:-1;;;2039:65:21;;-1:-1:-1;;;;;2039:44:21;;;;;;:65;;2084:19;;;;;2039:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2006:207;;2230:16;2259:11;:23;;;-1:-1:-1;;;;;2250:47:21;;2306:10;2298:19;;2250:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2223:95;;;;;2385:8;2382:2;:11;2377:2;:17;2353:22;:42;;;;;2427:24;;2353:42;;;;-1:-1:-1;2427:24:21;-1:-1:-1;;;;;2481:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2481:25:21;;2461:45;;2521:9;2516:1179;2540:10;2536:1;:14;2516:1179;;;2572:15;2589:23;2632:11;:23;;;-1:-1:-1;;;;;2632:34:21;1179:5;2758:11;:37;;;2821:12;2859:10;2895:17;2913:1;2895:20;;;;;;;;;;;;;;2710:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2710:227:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2710:227:21;-1:-1:-1;;;;;;2710:227:21;;;;;;;;;;2632:306;;;;2710:227;2632:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2571:367;;;;2952:17;2991:10;2987:94;;;3044:10;3033:33;;;;;;;;;;;;:::i;:::-;3021:45;;2987:94;3191:22;3178:9;:35;3174:378;;3334:1;3317:127;3341:10;3337:1;:14;3317:127;;;3403:22;3380:17;3398:1;3380:20;;;;;;;;;;;;;;;;;:45;3353:3;;3317:127;;;;3461:5;;;;;3174:378;3528:9;3505:17;3523:1;3505:20;;;;;;;;;;;;;:32;;;;;3620:17;3638:1;3620:20;;;;;;;;;;;;;;3644:1;3620:25;3616:69;;;3665:5;;;;;3616:69;-1:-1:-1;;;2552:3:21;;2516:1179;;888:1649:22;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:17;;;1232:596;1257:13;:20;1252:1;:25;1232:596;;1298:71;1354:2;1328:13;1342:1;1328:16;;;;;;;;;;;;;;:23;:28;1358:10;1298:13;1312:1;1298:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1384:15;1401:23;1436:4;-1:-1:-1;;;;;1428:18:22;1447:13;1461:1;1447:16;;;;;;;;;;;;;;1428:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1383:81;;;;1482:10;1478:340;;;1512:14;1529:46;1572:2;1552:10;:17;:22;1529:10;:22;;:46;;;;:::i;:::-;1512:63;;1606:23;1597:6;:32;1593:211;;;1707:24;;;1753:19;;;:32;;;1679:6;-1:-1:-1;1679:6:22;1593:211;1478:340;;-1:-1:-1;;1279:3:22;;1232:596;;;-1:-1:-1;1841:28:22;1837:98;;1885:39;;;1837:98;1949:9;1944:587;1969:14;:21;1964:1;:26;1944:587;;2011:86;2069:2;2042:14;2057:1;2042:17;;;;;;;;;;;;;;:24;:29;2073:23;2011:14;2026:1;2011:17;;;;;;;:86;2112:15;2129:23;2164:4;-1:-1:-1;;;;;2156:18:22;2175:14;2190:1;2175:17;;;;;;;;;;;;;;2156:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:82;;;;2211:10;2207:314;;;2241:14;2258:46;2301:2;2281:10;:17;:22;2258:10;:22;;:46;;;;:::i;:::-;2241:63;;2335:9;2326:6;:18;2322:185;;;2408:25;;;2455:20;;;:33;;;2380:6;-1:-1:-1;2380:6:22;2322:185;2207:314;;-1:-1:-1;;1992:3:22;;1944:587;;;;888:1649;;;;;;;;;:::o;3287:1650:5:-;3557:34;;;;3503;;-1:-1:-1;;;;;;3557:47:5;3553:510;;3735:268;;;;;;;;;3695:357;;3735:268;3797:33;3808:10;3820:9;3797:33;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3879:12;3893:9;3868:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3947:37;3735:268;;;4021:17;3695:22;:357::i;:::-;3688:364;;;;3553:510;4093:24;;;-1:-1:-1;;;;;4147:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4147:25:5;;4127:45;;4187:9;4182:749;4206:10;4202:1;:14;4182:749;;;4238:15;4255:23;4298:9;:21;;;-1:-1:-1;;;;;4298:32:5;1243:6;4420:9;:34;;;4480:12;4518:10;4554:17;4572:1;4554:20;;;;;;;;;;;;;;4372:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4372:224:5;;;;;;;;;;;;;;-1:-1:-1;;;;;4372:224:5;-1:-1:-1;;;;;;4372:224:5;;;;;;;;;;4298:299;;;;4372:224;4298:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:360;;;;4611:18;4651:10;4647:95;;;4705:10;4694:33;;;;;;;;;;;;:::i;:::-;4681:46;;4647:95;4778:10;4755:17;4773:1;4755:20;;;;;;;;;;;;;:33;;;;;4856:17;4874:1;4856:20;;;;;;;;;;;;;;4880:1;4856:25;4852:69;;;4901:5;;;;;4852:69;-1:-1:-1;;;4218:3:5;;4182:749;;1764:2076:2;2097:24;;1977:34;;2054:11;;2097:24;-1:-1:-1;;;;;2151:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:2;-1:-1:-1;2191:24:2;;-1:-1:-1;;;2191:24:2;;2131:45;;-1:-1:-1;;;;;;2191:12:2;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:2;;-1:-1:-1;;;2220:24:2;;-1:-1:-1;;;;;2220:12:2;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;-1:-1:-1;;;2375:27:2;;-1:-1:-1;;;;;2375:15:2;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;-1:-1:-1;;;2442:27:2;;-1:-1:-1;;;;;2442:15:2;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;-1:-1:-1;;;2508:38:2;;-1:-1:-1;;;;;2508:26:2;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;-1:-1:-1;;;2585:38:2;;-1:-1:-1;;;;;2585:26:2;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;-1:-1:-1;;;;;2653:15:2;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1153;2705:10;2701:1;:14;2681:1153;;;2913:27;;2907:48;;1071:1;1010:8;1064;;2907:48;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;-1:-1:-1;;;;;3028:19:2;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:2;;;;;;;;-1:-1:-1;;3028:406:2;;;;;;;;;;;;:::i;:::-;;;3008:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3611:17;3629:1;3611:20;;;;;;;;;;;;;;3635:1;3611:25;3607:77;;;3660:5;;;3607:77;3451:247;2717:3;;2681:1153;;6743:1029:18;6969:27;;7016:23;;:58;;;;;;;;;:132;;;-1:-1:-1;7117:31:18;7090:23;;:58;;;;;;;;;7016:132;:170;;;-1:-1:-1;7164:17:18;;;;-1:-1:-1;;;;;7164:22:18;;7016:170;:208;;;-1:-1:-1;7202:17:18;;;;-1:-1:-1;;;;;7202:22:18;;7016:208;7012:255;;;-1:-1:-1;7255:1:18;7248:8;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;-1:-1:-1;;;;;7425:35:18;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;-1:-1:-1;7277:201:18;-1:-1:-1;7277:201:18;-1:-1:-1;7528:30:18;7508:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;-1:-1:-1;7611:16:18;;-1:-1:-1;;;;;7611:37:18;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;-1:-1:-1;;;;;;7728:37:18;;-1:-1:-1;;6743:1029:18;;;;;;:::o;3464:1039:11:-;3689:17;3708;3727:34;3777:40;3794:10;3806;3777:16;:40::i;:::-;3840:47;3858:4;3864:10;3876;3840:17;:47::i;:::-;3828:59;-1:-1:-1;3901:16:11;3897:90;;3933:43;;3897:90;4008:61;;-1:-1:-1;;;4008:61:11;;:4;;:20;;:61;;4029:4;;4035:9;;4046:10;;4058;;4008:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4008:61:11;;;;;;;;;;;;:::i;:::-;3996:4;:9;;:73;;;;4086:4;:9;;;4079:16;;4126:317;4162:240;;;;;;;;4231:10;4243:4;4220:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4293:10;4305:4;4282:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4350:37;4162:240;;;4416:17;4126:22;:317::i;:::-;4106:337;;3464:1039;;;;;;;;:::o;2424:1290:16:-;2652:7;2714:15;2775:8;-1:-1:-1;;;;;2756:34:16;;2791:19;2812;2756:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2714:128;-1:-1:-1;;;;;;2905:27:16;;2901:66;;2955:1;2948:8;;;;;2901:66;2976:19;-1:-1:-1;;;;;2998:33:16;;;:144;;3082:60;;-1:-1:-1;;;3082:60:16;;-1:-1:-1;;;;;3082:45:16;;;;;:60;;3136:4;;3082:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2998:144;;;3054:4;-1:-1:-1;;;;;3046:21:16;;2998:144;2976:166;;3298:16;3284:11;:30;3280:69;;;3337:1;3330:8;;;;;;3280:69;3374:133;;-1:-1:-1;;;3374:133:16;;-1:-1:-1;;;;;3374:14:16;;;;;940:5;;3374:133;;3448:19;;3469;;3490:16;;3374:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3374:133:16;;;;;;;;-1:-1:-1;;3374:133:16;;;;;;;;;;;;:::i;:::-;;;3358:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:1;3689:8;;;;;;;3358:350;3574:6;-1:-1:-1;3567:13:16;;-1:-1:-1;;3567:13:16;4281:1535:3;4497:34;4547:40;4564:10;4576;4547:16;:40::i;:::-;4639:14;;;;4693:15;;;4706:1;4693:15;;;4664:26;4693:15;;;;;;;;;;;;;;;;;;-1:-1:-1;4693:15:3;4664:44;;4741:10;4718;4729:1;4718:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;4718:34:3;;;-1:-1:-1;;;;;4718:34:3;;;;;4785:10;4762;4773:1;4762:13;;;;;;;;-1:-1:-1;;;;;4762:34:3;;;:13;;;;;;;;;;;:34;4828:24;;;-1:-1:-1;;;;;4882:25:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4882:25:3;;4862:45;;4917:48;;:::i;:::-;4980:18;:16;:18::i;:::-;4917:81;;5014:9;5009:801;5033:10;5029:1;:14;5009:801;;;5064:49;5132:48;5149:8;5159:17;5177:1;5159:20;;;;;;;5132:48;5317:91;;-1:-1:-1;;;5317:91:3;;5064:116;;-1:-1:-1;;;;;;5317:20:3;;;;;:91;;5338:35;;5064:116;;5386:10;;5398:9;;5317:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5317:91:3;;;;;;;;;;;;:::i;:::-;;;5195:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5473:21;5497:7;5505:1;5497:10;;;;;;;;;;;;;;5473:34;;5547:1;5529:14;:19;5525:71;;5572:5;;;;;5525:71;5644:14;5613:17;5631:1;5613:20;;;;;;;;;;;;;:46;;;;;5421:253;;-1:-1:-1;5045:3:3;;5009:801;;1540:1205:13;1889:24;;1766:34;;1889:24;-1:-1:-1;;;;;1943:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:13;;1923:45;;1984:9;1979:760;2003:10;1999:1;:14;1979:760;;;2073:15;-1:-1:-1;;;;;2054:48:13;;1065:5;2208:10;2260;2297:17;2315:1;2297:20;;;;;;;;;;;;;;2054:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:285:13;;;;;;;;-1:-1:-1;;2054:285:13;;;;;;;;;;;;:::i;:::-;;;2034:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:6;2411:17;2429:1;2411:20;;;;;;;;;;;;;:29;;;;;2516:17;2534:1;2516:20;;;;;;;;;;;;;;2540:1;2516:25;2512:77;;;2565:5;;;2512:77;2356:247;2015:3;;1979:760;;2025:1175:7;2257:13;2272:12;2286:34;2336:40;2353:10;2365;2336:16;:40::i;:::-;2408:24;;;-1:-1:-1;;;;;2462:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2462:25:7;;2442:45;;2517:60;2536:8;2546:6;2554:10;2566;2517:18;:60::i;:::-;2498:79;-1:-1:-1;2498:79:7;-1:-1:-1;;;;;;2591:18:7;;2587:91;;2625:42;;;2587:91;2693:9;2688:506;2712:10;2708:1;:14;2688:506;;;2743:17;2763:242;2830:10;2842:4;2848:8;2819:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:10;2918:4;2924:8;2895:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2971:17;2989:1;2971:20;;;;;;;;;;;;;;2763:38;:242::i;:::-;2743:262;;3042:9;3019:17;3037:1;3019:20;;;;;;;;;;;;;:32;;;;;3119:17;3137:1;3119:20;;;;;;;;;;;;;;3143:1;3119:25;3115:69;;;3164:5;;;3115:69;-1:-1:-1;2724:3:7;;2688:506;;;;2025:1175;;;;;;;;;;;:::o;1325:1038:9:-;1532:34;1582:40;1599:10;1611;1582:16;:40::i;:::-;1653:24;;;-1:-1:-1;;;;;1707:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1707:25:9;;1687:45;;1747:9;1742:615;1766:10;1762:1;:14;1742:615;;;1826:6;-1:-1:-1;;;;;1817:29:9;;884:6;1912:10;1924;1936:17;1954:1;1936:20;;;;;;;;;;;;;;1817:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1817:140:9;;;;;;;;-1:-1:-1;;1817:140:9;;;;;;;;;;;;:::i;:::-;;;1797:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:6;2029:17;2047:1;2029:20;;;;;;;;;;;;;:29;;;;;2134:17;2152:1;2134:20;;;;;;;;;;;;;;2158:1;2134:25;2130:77;;;2183:5;;;2130:77;1974:247;1778:3;;1742:615;;1432:986:16;1643:15;1660:34;1710:40;1727:10;1739;1710:16;:40::i;:::-;1781:24;;;-1:-1:-1;;;;;1835:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1835:25:16;;1815:45;;1876:9;1871:431;1895:10;1891:1;:14;1871:431;;;1926:17;1946:167;1997:8;2023:10;2051;2079:17;2097:1;2079:20;;;;;;;;;;;;;;1946:33;:167::i;:::-;1926:187;;2150:9;2127:17;2145:1;2127:20;;;;;;;;;;;;;:32;;;;;2227:17;2245:1;2227:20;;;;;;;;;;;;;;2251:1;2227:25;2223:69;;;2272:5;;;2223:69;-1:-1:-1;1907:3:16;;1871:431;;;-1:-1:-1;2343:58:16;;-1:-1:-1;;;2343:58:16;;-1:-1:-1;;;;;2343:34:16;;;;;:58;;2378:10;;2390;;2343:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2312:99;;1432:986;;;;;;;;:::o;2894:593:14:-;3193:246;;;3100:34;3193:246;;;;;;3157:323;;3193:246;3251:30;3262:10;3274:6;3251:30;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3326:10;3338:6;3315:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3385:39;3193:246;;;3453:17;3157:22;:323::i;1333:415:26:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:26;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:26;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:26;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:26;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:26;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;3202:653:13;3533:274;;;3427:34;3533:274;;;;;;3497:351;;3533:274;3591:39;3602:10;3614:15;3591:39;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3675:10;3687:15;3664:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3743:49;3533:274;;;3821:17;3497:22;:351::i;1572:2343:23:-;1779:34;1829:40;1846:10;1858;1829:16;:40::i;:::-;1900:24;;;-1:-1:-1;;;;;1954:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1954:25:23;-1:-1:-1;1934:45:23;-1:-1:-1;1990:41:23;-1:-1:-1;;;;;2034:24:23;;;:106;;2101:39;2121:6;2129:10;2101:19;:39::i;:::-;2034:106;;;2096:1;2034:106;1990:150;-1:-1:-1;2150:41:23;-1:-1:-1;;;;;2194:24:23;;;:106;;2261:39;2281:6;2289:10;2261:19;:39::i;:::-;2194:106;;;2256:1;2194:106;2150:150;;2315:9;2310:1599;2334:10;2330:1;:14;2310:1599;;;2383:4;-1:-1:-1;;;;;2405:24:23;;2401:1357;;2486:215;2549:18;2590:51;;;2663:17;2681:1;2663:20;;;;;;;2486:215;2450:17;2468:1;2450:20;;;;;;;;;;;;;2449:252;;;;;;;;;2401:1357;;;-1:-1:-1;;;;;2726:24:23;;2722:1036;;2807:215;2870:18;2911:51;;;2984:17;3002:1;2984:20;;;;;;;2722:1036;3061:17;3122:215;3185:18;3226:51;;;3299:17;3317:1;3299:20;;;;;;;3122:215;3096:241;-1:-1:-1;3096:241:23;-1:-1:-1;3359:14:23;;3355:389;;3434:220;3501:18;-1:-1:-1;;;3623:9:23;3434:33;:220::i;:::-;3398:17;3416:1;3398:20;;;;;;;;;;;;;3397:257;;;;;;;;;3355:389;;;3724:1;3701:17;3719:1;3701:20;;;;;;;;;;;;;:24;;;;;3355:389;2722:1036;;3820:10;3819:11;:40;;;;3834:17;3852:1;3834:20;;;;;;;;;;;;;;3858:1;3834:25;3819:40;3815:84;;;3879:5;;;3815:84;-1:-1:-1;2346:3:23;;2310:1599;;2553:972:24;2807:24;;2736:34;;2807:24;-1:-1:-1;;;;;2861:25:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2861:25:24;;2841:45;;2901:9;2896:623;2920:10;2916:1;:14;2896:623;;;2990:6;-1:-1:-1;;;;;2971:39:24;;846:5;3078:17;3096:1;3078:20;;;;;;;;;;;;;;3100:4;2971:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2971:134:24;;;;;;;;;;;;:::i;:::-;;;2951:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3210:7;3218:1;3210:10;;;;;;;;;;;;;;3187:17;3205:1;3187:20;;;;;;;;;;;;;:33;;;;;3296:17;3314:1;3296:20;;;;;;;;;;;;;;3320:1;3296:25;3292:77;;;3345:5;;;3292:77;3122:261;2932:3;;2896:623;;2788:1037:9;2994:34;3044:40;3061:10;3073;3044:16;:40::i;:::-;3115:24;;;-1:-1:-1;;;;;3169:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3169:25:9;;3149:45;;3209:9;3204:615;3228:10;3224:1;:14;3204:615;;;3288:6;-1:-1:-1;;;;;3279:29:9;;884:6;3374:10;3386;3398:17;3416:1;3398:20;;;;;;;;;;;;;;3279:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:140:9;;;;;;;;-1:-1:-1;;3279:140:9;;;;;;;;;;;;:::i;:::-;;;3259:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3514:6;3491:17;3509:1;3491:20;;;;;;;;;;;;;:29;;;;;3596:17;3614:1;3596:20;;;;;;;;;;;;;;3620:1;3596:25;3592:77;;;3645:5;;;3592:77;3436:247;3240:3;;3204:615;;1770:1175:11;1996:17;2015;2034:34;2084:40;2101:10;2113;2084:16;:40::i;:::-;2146:47;2164:4;2170:10;2182;2146:17;:47::i;:::-;2134:59;-1:-1:-1;2207:16:11;2203:90;;2239:43;;2203:90;2314:61;;-1:-1:-1;;;2314:61:11;;:4;;:20;;:61;;2335:4;;2341:9;;2352:10;;2364;;2314:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2314:61:11;;;;;;;;;;;;:::i;:::-;2302:9;;;:73;;;2433:24;;2302:73;;-1:-1:-1;2433:24:11;-1:-1:-1;;;;;2487:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2487:25:11;;2467:45;;2527:9;2522:417;2546:10;2542:1;:14;2522:417;;;2577:13;2593:4;-1:-1:-1;;;;;2593:31:11;;2642:4;2664:10;2692;2720:17;2738:1;2720:20;;;;;;;;;;;;;;2593:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2577:177;;2791:5;2768:17;2786:1;2768:20;;;;;;;;;;;;;:28;;;;;2864:17;2882:1;2864:20;;;;;;;;;;;;;;2888:1;2864:25;2860:69;;;2909:5;;;2860:69;-1:-1:-1;2558:3:11;;2522:417;;;;1770:1175;;;;;;;;;:::o;3797:1026:7:-;4028:13;4043:12;4057:34;4107:40;4124:10;4136;4107:16;:40::i;:::-;4176:60;4195:8;4205:6;4213:10;4225;4176:18;:60::i;:::-;4157:79;-1:-1:-1;4157:79:7;-1:-1:-1;;;;;;4250:18:7;;4246:91;;4284:42;;4246:91;4367:24;;;-1:-1:-1;;;;;4421:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4421:25:7;-1:-1:-1;4513:262:7;;;;;;;;;4401:45;;-1:-1:-1;4477:339:7;;4513:262;4571:39;4582:10;4594:4;4600:9;;4571:39;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4655:10;4667:4;4673:8;4644:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4722:38;4513:262;;;4789:17;4477:22;:339::i;:::-;4457:359;;3797:1026;;;;;;;;;;:::o;4221:1750:6:-;4437:13;4452:12;4466:34;4516:40;4533:10;4545;4516:16;:40::i;:::-;4587:24;;;-1:-1:-1;;;;;4641:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4641:25:6;-1:-1:-1;4784:13:6;;4775:55;;-1:-1:-1;;;4775:55:6;;4621:45;;-1:-1:-1;;;;;;4775:31:6;;;;:55;;4807:10;;4819;;4775:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768:62;-1:-1:-1;4840:17:6;-1:-1:-1;;;;;4937:18:6;;;4933:485;;-1:-1:-1;5018:4:6;;-1:-1:-1;4983:10:6;4933:485;;;5134:13;;5125:55;;-1:-1:-1;;;5125:55:6;;-1:-1:-1;;;;;5125:31:6;;;;;;:55;;5157:10;;5169;;5125:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5118:62;-1:-1:-1;;;;;;5238:27:6;;5234:108;;5285:42;;;;5234:108;-1:-1:-1;5402:5:6;;-1:-1:-1;5367:10:6;4933:485;5478:4;-1:-1:-1;;;;;5472:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5467:103;;5517:42;;;;5467:103;5600:364;5636:287;;;;;;;;5705:10;5717:4;5723:9;5734:4;:11;;;5694:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5791:10;5803:4;5809:9;5820:4;:11;;;5780:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5872:36;5636:287;;;5937:17;5600:22;:364::i;:::-;5580:384;;4221:1750;;;;;;;;;;:::o;1754:435:26:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:26;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:26;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:26;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:26;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1440:887:20;1766:24;;1643:34;;1766:24;-1:-1:-1;;;;;1820:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1820:25:20;;1800:45;;1861:9;1856:465;1880:10;1876:1;:14;1856:465;;;1938:4;-1:-1:-1;;;;;1931:27:20;;994:5;2024:10;2036;2048:17;2066:1;2048:20;;;;;;;;;;;;;;1931:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1931:138:20;;;;;;;;-1:-1:-1;;1931:138:20;;;;;;;;;;;;:::i;:::-;;;1911:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2164:6;2141:17;2159:1;2141:20;;;;;;;;;;;;;:29;;;;;2086:99;1892:3;;1856:465;;7885:1337:11;8100:24;8191:4;:9;;;:16;8211:1;8191:21;8187:60;;;-1:-1:-1;8235:1:11;8228:8;;8187:60;8292:4;:17;;;-1:-1:-1;;;;;8273:61:11;;931:5;8425:4;:9;;;-1:-1:-1;;;;;8411:23:11;:10;-1:-1:-1;;;;;8411:23:11;;:56;;8457:10;8411:56;;;1035:42;8411:56;8503:4;:9;;;-1:-1:-1;;;;;8489:23:11;:10;-1:-1:-1;;;;;8489:23:11;;:56;;8535:10;8489:56;;;1035:42;8489:56;8567:16;8605:1;8635:4;:9;;;8273:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8273:389:11;;;;;;;;-1:-1:-1;;8273:389:11;;;;;;;;;;;;:::i;:::-;;;8257:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9204:1;9197:8;;;;;8257:959;8720:26;8749:29;8767:10;8749:17;:29::i;:::-;8720:58;;;;8792:26;8821:29;8839:10;8821:17;:29::i;:::-;8792:58;;;;9043:8;9006:18;9000:2;:24;8963:18;8957:2;:24;8922:16;8899:4;:39;:82;:125;;;;;;:152;;;;;;8864:187;;9065:23;;;;;4189:904:16;4399:15;4416:34;4466:40;4483:10;4495;4466:16;:40::i;:::-;4537:24;;;-1:-1:-1;;;;;4591:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4591:25:16;;4571:45;;4647:329;4683:252;;;;;;;;4752:8;4762:10;4741:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4818:8;4828:10;4807:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4879:41;4683:252;;;4949:17;4647:22;:329::i;:::-;5018:58;;-1:-1:-1;;;5018:58:16;;4627:349;;-1:-1:-1;;;;;;5018:34:16;;;;;:58;;5053:10;;5065;;5018:58;;;:::i;2543:1848:22:-;2723:23;;:::i;:::-;2760:24;;:::i;:::-;-1:-1:-1;;2862:2:22;2798:18;2930:673;2955:14;:21;2950:1;:26;2930:673;;2997:72;3055:2;3028:14;3043:1;3028:17;;;;;;;;;;;;;;:24;:29;3059:9;2997:14;3012:1;2997:17;;;;;;;:72;3084:15;3101:23;3136:4;-1:-1:-1;;;;;3128:18:22;3147:14;3162:1;3147:17;;;;;;;;;;;;;;3128:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3083:82;;;;3183:10;3179:414;;;3213:14;3230:46;3273:2;3253:10;:17;:22;3230:10;:22;;:46;;;;:::i;:::-;3213:63;;3328:1;3319:6;:10;:66;;;;;3362:23;3353:6;:32;3319:66;3294:285;;;3480:25;;;3527:20;;;:33;;;3452:6;-1:-1:-1;3452:6:22;3294:285;3179:414;;-1:-1:-1;;2978:3:22;;2930:673;;;;-1:-1:-1;;3616:23:22;:38;3612:109;;;3670:40;;;3612:109;3735:9;3730:655;3755:13;:20;3750:1;:25;3730:655;;3796:84;3852:2;3826:13;3840:1;3826:16;;;;;;;;;;;;;;:23;:28;3856:23;3796:13;3810:1;3796:16;;;;;;;:84;3895:15;3912:23;3947:4;-1:-1:-1;;;;;3939:18:22;3958:13;3972:1;3958:16;;;;;;;;;;;;;;3939:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:81;;;;3993:10;3989:386;;;4023:14;4040:46;4083:2;4063:10;:17;:22;4040:10;:22;;:46;;;;:::i;:::-;4023:63;;4138:1;4129:6;:10;:53;;;;;4172:10;4163:6;:19;4129:53;4104:257;;;4264:24;;;4310:19;;;:32;;;4236:6;-1:-1:-1;4236:6:22;4104:257;3989:386;;-1:-1:-1;;3777:3:22;;3730:655;;4670:1193:10;4804:22;4842:24;4902:6;-1:-1:-1;;;;;4886:31:10;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4842:78;;4966:1;4952:4;:11;:15;-1:-1:-1;;;;;4938:30:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4938:30:10;;4930:38;;4983:9;4978:879;5002:5;:12;4998:1;:16;4978:879;;;5069:25;5128:7;-1:-1:-1;;;;;5128:16:10;;1507:5;5212:4;5217:1;5212:7;;;;;;;;;;;;;;5221:4;5226:1;5230;5226:5;5221:11;;;;;;;;;;;;;;5128:105;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5128:105:10;;;;;;;;;;;;:::i;:::-;;;5108:739;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5816:16:10;;;5830:1;5816:16;;;;;;;;;-1:-1:-1;5809:23:10;;-1:-1:-1;;;5809:23:10;5108:739;5316:17;5382:1;5363:8;:15;:20;;5355:63;;;;-1:-1:-1;;;5355:63:10;;;;;;;:::i;:::-;5441:9;5436:319;5460:8;:15;5456:1;:19;5436:319;;;5504:19;5540:8;5549:1;5540:11;;;;;;;;;;;;;;-1:-1:-1;;;;;5526:38:10;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5504:62;;5606:9;5592:11;:23;5588:149;;;5655:11;5643:23;;5703:8;5712:1;5703:11;;;;;;;;;;;;;;5692:5;5698:1;5692:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;5692:22:10;;;-1:-1:-1;;;;;5692:22:10;;;;;5588:149;-1:-1:-1;5477:3:10;;5436:319;;;;5250:519;;-1:-1:-1;5016:3:10;;4978:879;;;;4670:1193;;;;;;:::o;3735:1265:4:-;3950:21;3973;4026:4;:13;;;-1:-1:-1;;;;;4026:24:4;;4051:4;:13;;;-1:-1:-1;;;;;4051:28:4;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4026:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4010:72;;4096:4;:10;;;:17;4117:1;4096:22;4092:81;;;4134:28;;4092:81;4182:23;4290:9;4285:709;4309:4;:10;;;:17;4305:1;:21;4285:709;;;4374:1;4351:4;:10;;;4362:1;4351:13;;;;;;;;;;;;;;:20;:24;4347:71;;;4395:8;;4347:71;4467:13;-1:-1:-1;;;;;4452:61:4;;873:5;4586:4;:10;;;4597:1;4586:13;;;;;;;;;;;;;;4601:17;4644:1;4619:17;:24;:26;4601:45;;;;;;;;;;;;;;4452:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4452:195:4;;;;;;;;-1:-1:-1;;4452:195:4;;;;;;;;;;;;:::i;:::-;;;4432:552;;4961:8;;4432:552;4732:15;4723:6;:24;4719:137;;;4789:6;4771:24;;4824:4;:10;;;4835:1;4824:13;;;;;;;;;;;;;;4817:20;;4719:137;4664:206;4432:552;4328:3;;4285:709;;;;3735:1265;;;;;;;;;:::o;1509:191:19:-;1641:10;-1:-1:-1;;;;;1627:24:19;:10;-1:-1:-1;;;;;1627:24:19;;;1619:74;;;;-1:-1:-1;;;1619:74:19;;;;;;;:::i;:::-;1509:191;;:::o;6355:377:3:-;6429:38;;:::i;:::-;-1:-1:-1;6502:223:3;;;;;;;;6568:4;6502:223;;;-1:-1:-1;6502:223:3;;;;;;;;;;;;;;;;;6355:377;:::o;5822:527::-;6059:39;;;6096:1;6059:39;;;;;;;;;5944;;;;6059;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5995:103;;6123:192;;;;;;;;6176:8;:15;;;6123:192;;;;6219:1;6123:192;;;;6249:1;6123:192;;;;6272:6;6123:192;;;;;;;;;;;;;;;;;;;6108:9;6118:1;6108:12;;;;;;;;;;;;;;;;;:207;6333:9;5822:527;-1:-1:-1;;;5822:527:3:o;8086:303:23:-;8301:70;;-1:-1:-1;;;8301:70:23;;8199:31;;-1:-1:-1;;;;;8301:56:23;;;;;:70;;8358:12;;8301:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7070:721::-;7267:20;;-1:-1:-1;;;;;7324:36:23;;7320:100;;7376:33;;7320:100;7429:23;7501:22;-1:-1:-1;;;;;7501:33:23;1144:5;7618:16;7656:11;7574:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7574:111:23;;;;;;;;;;;;;;-1:-1:-1;;;;;7574:111:23;-1:-1:-1;;;;;;7574:111:23;;;;;;;;;;7501:185;;;;7574:111;7501:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7462:224:23;;-1:-1:-1;7462:224:23;-1:-1:-1;7696:89:23;;;;7752:10;7741:33;;;;;;;;;;;;:::i;:::-;7726:48;;7696:89;7070:721;;;;;;;:::o;5400:2077:15:-;5585:7;5609:22;5635:24;5661:22;5687:3;-1:-1:-1;;;;;5687:8:15;;5696:7;:21;;;5687:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5608:110;;;;;;;;5728:24;5763:3;5728:39;;5796:7;:23;;;-1:-1:-1;;;;;5782:37:15;:10;-1:-1:-1;;;;;5782:37:15;;5778:1674;;;5993:29;6025:30;:16;6050:4;6025:24;:30::i;:::-;5993:62;-1:-1:-1;6070:25:15;6098:58;3269:8;6098:45;:14;5993:62;6098:22;:45::i;:::-;:53;;:58::i;:::-;6070:86;;6234:16;6213:17;:37;6209:84;;6277:1;6270:8;;;;;;;;;;6209:84;6307:16;6326:53;3138:8;6326:40;6356:3;-1:-1:-1;;;;;6356:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6326:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6307:72;-1:-1:-1;6393:29:15;6425:39;:21;6307:72;6425:29;:39::i;:::-;6393:71;-1:-1:-1;6479:28:15;;-1:-1:-1;;;;;;;;6479:28:15;5778:1674;6542:7;:23;;;-1:-1:-1;;;;;6528:37:15;:10;-1:-1:-1;;;;;6528:37:15;;6524:928;;;6777:16;6811:38;;;6807:85;;;6876:1;6869:8;;;;;;;;;6807:85;6905:25;6933:58;3269:8;6933:45;:14;6956:21;6933:22;:45::i;:58::-;6905:86;;7091:14;7070:17;:35;7066:82;;7132:1;7125:8;;;;;;;;;;7066:82;7162:23;7188;7200:3;-1:-1:-1;;;;;7200:8:15;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;7188:11;:23::i;:::-;7162:49;-1:-1:-1;7265:43:15;7312:72;7162:49;7312:47;:21;7342:16;7312:29;:47::i;6524:928::-;7469:1;7462:8;;;;;;5400:2077;;;;;;;;;:::o;4809:919:21:-;5012:17;5046:20;5068:30;;:::i;:::-;5125:14;5114:49;;;;;;;;;;;;:::i;:::-;5045:118;;;;5174:20;5221:14;5210:36;;;;;;;;;;;;:::i;:::-;5173:73;-1:-1:-1;5257:12:21;5271:23;5318:4;-1:-1:-1;;;5429:11:21;5458:13;5173:73;5520:31;5540:10;5520:19;:31::i;:::-;5335:230;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5335:230:21;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:230:21;-1:-1:-1;;;;;;5335:230:21;;;;;;;;;;5310:256;;;;5335:230;5310:256;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5256:310;;;;5581:7;5576:47;;5611:1;5604:8;;;;;;;;;5576:47;5694:10;5683:35;;;;;;;;;;;;:::i;:::-;5719:1;5683:38;;;;;;;;;;;;;;5676:45;;;;;;;4809:919;;;;;:::o;1691:2958:0:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2085;2582:17;:24;2578:1;:28;2558:2085;;;2632:12;2627:1604;1683:1;2650:4;:37;2627:1604;;;2823:148;2870:17;2888:1;2870:20;;;;;;;;;;;;;;2912:9;2943:10;2823:25;:148::i;:::-;2810:161;-1:-1:-1;2993:15:0;2989:67;;3032:5;;2989:67;3086:202;3134:59;1378:3;3260:10;3086:25;:202::i;:::-;3073:215;-1:-1:-1;3310:15:0;3306:67;;3349:5;;3306:67;3390:18;3411:157;3458:4;:19;;;3499:4;:19;;;3540:10;3411:4;:25;;;:157;;:::i;:::-;3390:178;-1:-1:-1;3590:15:0;3586:67;;3629:5;;;3586:67;3786:10;3774:22;;3888:17;3906:1;3888:20;;;;;;;;;;;;;;3875:9;:33;3871:346;;3932:11;4056:17;4074:1;4056:20;;;;;;;;;;;;;;1378:3;3983:17;4001:1;3983:20;;;;;;;;;;;;;;3971:9;:32;3970:59;:106;;;;;;3932:144;;1536:8;4102:3;:41;4098:101;;4171:5;;;;4098:101;3871:346;;-1:-1:-1;2689:6:0;;2627:1604;;;;4500:132;4543:17;4561:1;4543:20;;;;;;;;;;;;;;4581:9;4608:10;4500:25;:132::i;:::-;4477:17;4495:1;4477:20;;;;;;;;;;;;;;;;;:155;2608:3;;2558:2085;;;;1691:2958;;;;;;:::o;5977:1450:6:-;6183:7;6207:18;6227:12;6241:17;6260:14;6302;6278:98;;;;;;;;;;;;:::i;:::-;6206:170;;;;;;;;6497:9;-1:-1:-1;;;;;6483:23:6;:10;-1:-1:-1;;;;;6483:23:6;;6479:942;;;6611:104;;-1:-1:-1;;;6611:104:6;;-1:-1:-1;;;;;6611:30:6;;;;;1291:5;;6611:104;;6704:10;;6611:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6611:104:6;;;;;;;;-1:-1:-1;;6611:104:6;;;;;;;;;;;;:::i;:::-;;;6591:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:1;6921:8;;;;;;;;;6591:353;6794:6;-1:-1:-1;6787:13:6;;-1:-1:-1;;;;6787:13:6;6479:942;7063:119;;-1:-1:-1;;;7063:119:6;;-1:-1:-1;;;;;7063:39:6;;;;;1291:5;;7063:119;;7165:4;;7171:10;;7063:119;;;:::i;5958:2724:25:-;6144:35;6249:1;6235:10;6216:9;:16;:29;:34;;6195:117;;;;-1:-1:-1;;;6195:117:25;;;;;;;:::i;:::-;6322:30;;:::i;:::-;-1:-1:-1;6322:203:25;;;;;;;;;6449:8;6322:203;;6479:7;6322:203;;;;6508:6;6322:203;;;;6584:42;;6605:20;6584:42;;;;;;;;;6322:203;;;;6584:42;;;;;;;;;;;;;-1:-1:-1;6584:42:25;6535:91;;6636:21;6685:25;6713:9;6723:10;6713:21;;;;;;;;;;;;;;6685:49;;6748:26;6777:9;6787:10;6800:1;6787:14;6777:25;;;;;;;;;;;;;;6748:54;;6821:9;6816:296;6840:20;6836:1;:24;6816:296;;;6885:19;6923:7;-1:-1:-1;;;;;6923:15:25;;6939:10;6951:11;6964:13;6978:1;6964:16;;;;;;;;;;;6923:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6885:96;;7003:18;7016:4;7003:12;:18::i;:::-;6999:99;;;7075:4;7045:10;7056:15;;;;;;7045:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;7045:34:25;;;-1:-1:-1;;;;;7045:34:25;;;;;6999:99;-1:-1:-1;6862:3:25;;6816:296;;;-1:-1:-1;;;7135:18:25;7131:109;;7213:16;;;;;7131:109;7271:9;:16;7253:10;7266:1;7253:14;:34;7249:349;;;7366:13;-1:-1:-1;;;;;7343:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7331:49;;7399:9;7394:164;7418:13;7414:1;:17;7394:164;;;7471:23;;;7492:1;7471:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7471:23:25;7456:9;7466:1;7456:12;;;;;;;;;;;;;:38;;;;7530:10;7541:1;7530:13;;;;;;;;;;;;;;7512:9;7522:1;7512:12;;;;;;;;;;;;;;7525:1;7512:15;;;;;;;;-1:-1:-1;;;;;7512:31:25;;;:15;;;;;;;;;;;:31;7433:3;;7394:164;;;;7571:16;;;;;7249:349;7649:45;7709:54;7728:7;7737:9;7748:10;7761:1;7748:14;7709:18;:54::i;:::-;7649:114;;7777:19;:26;7807:1;7777:31;7773:122;;;7868:16;;;;;;7773:122;8022:19;:26;8006:13;:42;-1:-1:-1;;;;;7970:88:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7958:100;;8073:9;8068:582;8092:13;8088:1;:17;8068:582;;;8131:9;8126:514;8150:19;:26;8146:1;:30;8126:514;;;8217:26;;8213:30;;;:34;;;8217:19;;8246:1;;8381:22;;;;;;;;;;;;:29;8377:1;:33;-1:-1:-1;;;;;8356:55:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8356:55:25;;8321:9;8331:1;8321:12;;;;;;;;;;;;;:90;;;;8447:10;8458:1;8447:13;;;;;;;;;;;;;;8429:9;8439:1;8429:12;;;;;;;;;;;;;;8442:1;8429:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;8429:31:25;;;-1:-1:-1;;;;;8429:31:25;;;;;8483:9;8478:148;8502:19;8522:1;8502:22;;;;;;;;;;;;;;:29;8498:1;:33;8478:148;;;8582:19;8602:1;8582:22;;;;;;;;;;;;;;8605:1;8582:25;;;;;;;;;;;;;;8560:9;8570:1;8560:12;;;;;;;;;;;;;;8577:1;8573;:5;8560:19;;;;;;;;-1:-1:-1;;;;;8560:47:25;;;:19;;;;;;;;;;;:47;8533:3;;8478:148;;;-1:-1:-1;;8178:3:25;;8126:514;;;-1:-1:-1;8107:3:25;;8068:582;;;;8659:16;;;;5958:2724;;;;;:::o;9982:1082::-;10143:24;10224:1;10204:9;:16;:21;;:64;;;;;10249:8;:15;10267:1;10249:19;10229:9;:16;:39;10204:64;10183:148;;;;-1:-1:-1;;;10183:148:25;;;;;;;:::i;:::-;10520:8;:15;10538:1;10520:19;10496:9;:16;10515:2;10496:21;:43;-1:-1:-1;;;;;10486:54:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10486:54:25;-1:-1:-1;10472:68:25;-1:-1:-1;10602:2:25;10585:20;;10550:9;10616:442;10640:9;:16;10636:1;:20;10616:442;;;10681:5;;10677:211;;10706:14;10723:8;10736:1;10732;:5;10723:15;;;;;;;;;;;;;;-1:-1:-1;;;;;10723:19:25;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10807:3;10803:17;10793:28;;-1:-1:-1;10854:1:25;10847:9;;;;10771:103;10901:20;10924:9;10934:1;10924:12;;;;;;;;;;;;;;;;;;10991:2;10987:14;10977:25;;-1:-1:-1;11031:2:25;11024:10;;;;10658:3;;10616:442;;6989:337:2;7072:9;7107:5;;;7126:6;;;;;:21;;;7146:1;7141;7136:2;:6;;;;;;:11;;7126:21;7122:60;;;7170:1;7163:8;;;;;7122:60;7207:8;7201:15;;7230:7;;;7226:46;;;7260:1;7253:8;;;;;;7226:46;1010:8;7291:9;;;;-1:-1:-1;;;;6989:337:2:o;8688:329:25:-;8783:32;8863:9;:16;-1:-1:-1;;;;;8842:38:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8842:38:25;;8831:49;;8895:9;8890:121;8914:9;:16;8910:1;:20;8890:121;;;8965:9;8998:1;8994;8975:9;:16;:20;:24;8965:35;;;;;;;;;;;;;;8951:8;8960:1;8951:11;;;;;;;;-1:-1:-1;;;;;8951:49:25;;;:11;;;;;;;;;;;:49;8932:3;;8890:121;;9023:323;9116:32;9196:8;:15;-1:-1:-1;;;;;9175:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9175:37:25;;9164:48;;9227:9;9222:118;9246:8;:15;9242:1;:19;9222:118;;;9296:8;9327:1;9323;9305:8;:15;:19;:23;9296:33;;;;;;;;;;;;;;9282:8;9291:1;9282:11;;;;;;;;-1:-1:-1;;;;;9282:47:25;;;:11;;;;;;;;;;;:47;9263:3;;9222:118;;3340:740:20;3541:17;3575:18;3595:12;3622:14;3611:46;;;;;;;;;;;;:::i;:::-;3574:83;;;;3668:18;3701:14;3690:37;;;;;;;;;;;;:::i;:::-;3667:60;-1:-1:-1;3754:4:20;:25;3797:4;3803:10;3667:60;3827:31;3847:10;3827:19;:31::i;:::-;3754:105;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3754:105:20;;;;;;;;;;;;:::i;:::-;;;3738:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4062:1;4055:8;;;;;;;;3738:336;3936:7;3944:1;3936:10;;;;;;;;;;;;;;3929:17;;;;;;;;3834:545:43;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;3886:391:41:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;-1:-1:-1;;;;;4087:25:41;4113:18;;;;;;;;;;;;;-1:-1:-1;;;4113:18:41;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;7483:2082:15:-;7667:7;7691:22;7717:24;7743:22;7769:3;-1:-1:-1;;;;;7769:8:15;;7778:7;:21;;;7769:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7690:110;;;;;;;;7829:7;:23;;;-1:-1:-1;;;;;7815:37:15;:10;-1:-1:-1;;;;;7815:37:15;;7811:1729;;;7966:29;7998:16;7966:48;;8028:23;8054:22;8066:3;-1:-1:-1;;;;;8066:7:15;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;8054:11;:22::i;:::-;8028:48;-1:-1:-1;8129:29:15;8161:59;8028:48;8161:34;:21;3138:8;8161:29;:34::i;:59::-;8129:91;-1:-1:-1;8234:25:15;8262:58;3269:8;8262:45;:14;8129:91;8262:22;:45::i;:58::-;8234:86;;8398:16;8377:17;:37;8373:84;;8441:1;8434:8;;;;;;;;;;;8373:84;8471:43;8517:48;8563:1;8518:35;:21;8548:4;8518:29;:35::i;7811:1729::-;8725:7;:23;;;-1:-1:-1;;;;;8711:37:15;:10;-1:-1:-1;;;;;8711:37:15;;8707:833;;;8862:29;8894:30;:16;8919:4;8894:24;:30::i;:::-;8862:62;;8938:26;8967:23;8979:3;-1:-1:-1;;;;;8979:8:15;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8967:23;8938:52;-1:-1:-1;9044:29:15;9077:62;3138:8;9077:49;:21;8938:52;9077:29;:49::i;:62::-;9044:95;;9181:14;9157:21;:38;9153:85;;;9222:1;9215:8;;;;;;;;;;9153:85;9251:25;9279:58;3269:8;9279:45;:14;9302:21;9279:22;:45::i;:58::-;9251:86;;9429:14;9408:17;:35;9404:82;;9470:1;9463:8;;;;;;;;;;;9404:82;-1:-1:-1;9508:21:15;-1:-1:-1;9501:28:15;;-1:-1:-1;;;;;9501:28:15;8707:833;-1:-1:-1;9557:1:15;;7483:2082;-1:-1:-1;;;;;;;;;7483:2082:15:o;16578:187:42:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;4943:907:5:-;5144:17;5178:20;5200:26;;:::i;:::-;5253:14;5242:47;;;;;;;;;;;;:::i;:::-;5177:112;;;;5300:20;5347:14;5336:36;;;;;;;;;;;;:::i;:::-;5299:73;-1:-1:-1;5383:12:5;5397:23;5444:4;-1:-1:-1;;;5553:9:5;5580:13;5299:73;5642:31;5662:10;5642:19;:31::i;9228:916:11:-;9402:17;9490:27;9538:4;:16;;;9490:65;;9566:27;9600:9;-1:-1:-1;;;;;9600:28:11;;9656:4;:9;;;-1:-1:-1;;;;;9642:23:11;:10;-1:-1:-1;;;;;9642:23:11;;:56;;9688:10;9642:56;;;1035:42;9642:56;9726:4;:9;;;-1:-1:-1;;;;;9712:23:11;:10;-1:-1:-1;;;;;9712:23:11;;:56;;9758:10;9712:56;;;1035:42;9712:56;9800:12;;;9810:1;9800:12;;;;;;;;;-1:-1:-1;;;;;;9600:236:11;;;;;;;;;;;;9782:4;;9600:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9600:236:11;;;;;;;;;;;;:::i;:::-;9565:271;;;;9873:10;:17;9851:4;:18;;;:39;9847:80;;-1:-1:-1;9913:3:11;;-1:-1:-1;9906:10:11;;-1:-1:-1;9906:10:11;9847:80;9949:10;9960:4;:18;;;9949:30;;;;;;;;;;;;;;9937:42;;10062:3;10049:9;:16;;10041:25;;10070:4;10041:33;10037:74;;;-1:-1:-1;10097:3:11;;-1:-1:-1;10090:10:11;;-1:-1:-1;10090:10:11;7110:769;7311:7;7335:18;7355:28;;:::i;:::-;7410:14;7399:55;;;;;;;;;;;;:::i;:::-;7334:120;;;;7465:18;7512:14;7501:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7582:90:11;;-1:-1:-1;;;7582:90:11;;7464:92;;-1:-1:-1;7582:4:11;;:31;;:90;;7631:4;;7464:92;;7649:10;;7661;;7582:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7582:90:11;;;;;;;;-1:-1:-1;;7582:90:11;;;;;;;;;;;;:::i;:::-;;;7566:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7739:6;-1:-1:-1;7732:13:11;;-1:-1:-1;;;7732:13:11;6047:836:7;6234:15;6251:13;6373:25;6417:8;-1:-1:-1;;;;;6401:37:7;;6439:10;6451;6401:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6401:61:7;;;;;;;;;;;;:::i;:::-;6373:89;;6483:4;6472:15;;6501:8;:15;6520:1;6501:20;6497:251;;;6646:61;;-1:-1:-1;;;6646:61:7;;-1:-1:-1;;;;;6646:37:7;;;;;:61;;6684:10;;6696;;6646:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6646:61:7;;;;;;;;;;;;:::i;:::-;6635:72;;6732:5;6721:16;;6497:251;6772:8;:15;6762:6;:25;6758:82;;6819:1;6823:5;6803:26;;;;;;;6758:82;6860:8;6869:6;6860:16;;;;;;;;;;;;;;6850:26;;6047:836;;;;;;;;:::o;4829:1212::-;5037:7;5061:18;5081:12;5095:13;5136:14;5112:86;;;;;;;;;;;;:::i;:::-;5060:138;;;;;;5372:8;5368:667;;;5416:122;;-1:-1:-1;;;5416:122:7;;-1:-1:-1;;;;;5416:31:7;;;;;1408:5;;5416:122;;5523:1;;5527:10;;5416:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5416:122:7;;;;;;;;-1:-1:-1;;5416:122:7;;;;;;;;;;;;:::i;:::-;;;5396:299;;5679:1;5672:8;;;;;;;5396:299;-1:-1:-1;5626:6:7;-1:-1:-1;5619:13:7;;-1:-1:-1;;;5619:13:7;5368:667;5745:123;;-1:-1:-1;;;5745:123:7;;-1:-1:-1;;;;;5745:32:7;;;;;1408:5;;5745:123;;5853:1;;5857:10;;5745:123;;;:::i;3493:771:14:-;3696:17;3730:18;3750:14;3791;3780:46;;;;;;;;;;;;:::i;:::-;3729:97;;;;3837:18;3882:14;3871:37;;;;;;;;;;;;:::i;:::-;3836:72;-1:-1:-1;3934:4:14;:27;3979:6;3987:10;3836:72;4011:31;4031:10;4011:19;:31::i;5401:467:41:-;5510:15;5542;5559:23;5594:5;-1:-1:-1;;;;;5586:25:41;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5625:101:41;;;;;;;;;;;;;;-1:-1:-1;;;;;5625:101:41;-1:-1:-1;;;;;;5625:101:41;;;;;;;;;;5586:150;;;;5625:101;5586:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;3861:849:13:-;4074:17;4108:18;4128:23;4178:14;4167:46;;;;;;;;;;;;:::i;:::-;4107:106;;;;4224:18;4269:14;4258:37;;;;;;;;;;;;:::i;:::-;4223:72;-1:-1:-1;4321:4:13;:37;1065:5;4416:15;4433:10;4223:72;4457:31;4477:10;4457:19;:31::i;:::-;4321:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4321:168:13;;;;;;;;;;;;:::i;4623:515:41:-;4749:18;4784:15;4801:23;4836:5;-1:-1:-1;;;;;4828:25:41;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4867:126:41;;;;;;;;;;;;;;-1:-1:-1;;;;;4867:126:41;-1:-1:-1;;;;;;4867:126:41;;;;;;;;;;4828:175;;;;4867:126;4828:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;937:217:19:-;1049:14;1086:61;1133:12;1086:31;:61::i;5099:620:16:-;5304:17;5338:16;5356:27;5398:14;5387:46;;;;;;;;;;;;:::i;:::-;5337:96;;;;5444:17;5463:27;5505:14;5494:46;;;;;;;;;;;;:::i;:::-;5443:97;;;;5557:155;5604:8;5626:19;5659;5692:10;5557:33;:155::i;:::-;5550:162;5099:620;-1:-1:-1;;;;;;;;5099:620:16:o;764:457:44:-;850:7;877:6;873:45;;-1:-1:-1;906:1:44;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;:::-;984:24;:202::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:44:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:44;;;1625:373::o;1160:172:19:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:19;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4655:416:0:-;4823:21;4864:14;;;:29;;-1:-1:-1;4882:11:0;;4864:29;:49;;;-1:-1:-1;4897:16:0;;4864:49;4860:63;;;-1:-1:-1;4922:1:0;4915:8;;4860:63;4945:18;;;4957:6;4945:9;:18;:9;4977:13;;;;;:23;4973:37;;5009:1;5002:8;;;;;4973:37;5053:11;5047:1;5033:11;:15;5028:1;:21;5027:37;;;;;;;4655:416;-1:-1:-1;;;;;4655:416:0:o;9352:624:25:-;9441:12;9594:17;;9642:13;9638:64;;9682:5;9675:12;;;;;9638:64;9352:624;9772:4;-1:-1:-1;;;;;9772:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9772:23:25;;9804:4;9772:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9768:86;;-1:-1:-1;9838:5:25;9831:12;;9768:86;9867:4;-1:-1:-1;;;;;9867:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9867:23:25;;9899:4;9867:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9863:86;;-1:-1:-1;9933:5:25;9926:12;;9863:86;-1:-1:-1;9965:4:25;9352:624;;;:::o;15225:654:42:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:42;14838:2;14936:13;14930:20;;14301:688::o;1401:322:48:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:48;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:48;-1:-1:-1;;;;;;1589:127:48;;;;;;;;;;;-1:-1:-1;1401:322:48;;;;;:::o;1531:170:47:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1334:378:45;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1941:753::-;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2151:114;-1:-1;2337:4;2350:14;;;;2325:17;;;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;2337:4;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;3853:705;;3979:3;3972:4;3964:6;3960:17;3956:27;3946:2;;-1:-1;;3987:12;3946:2;4034:6;4021:20;4056:89;4071:73;4137:6;4071:73;:::i;4056:89::-;4173:21;;;4047:98;-1:-1;4217:4;4230:14;;;;4205:17;;;4325:1;4310:242;4335:6;4332:1;4329:13;4310:242;;;4442:46;4484:3;4217:4;4418:3;4405:17;4209:6;4393:30;;4442:46;:::i;:::-;4430:59;;4503:14;;;;4531;;;;4357:1;4350:9;4310:242;;4600:779;;4741:3;4734:4;4726:6;4722:17;4718:27;4708:2;;-1:-1;;4749:12;4708:2;4796:6;4783:20;4818:104;4833:88;4914:6;4833:88;:::i;4818:104::-;4950:21;;;4809:113;-1:-1;4994:4;5007:14;;;;4982:17;;;5096;;;5087:27;;;;5084:36;-1:-1;5081:2;;;5133:1;;5123:12;5081:2;5158:1;5143:230;5168:6;5165:1;5162:13;5143:230;;;11895:6;11882:20;11907:57;11958:5;11907:57;:::i;:::-;5236:74;;5324:14;;;;5352;;;;5190:1;5183:9;5143:230;;7742:788;;7886:3;7879:4;7871:6;7867:17;7863:27;7853:2;;-1:-1;;7894:12;7853:2;7941:6;7928:20;7963:107;7978:91;8062:6;7978:91;:::i;7963:107::-;8098:21;;;7954:116;-1:-1;8142:4;8155:14;;;;8130:17;;;8256:4;8244:17;;;8235:27;;;;8232:36;-1:-1;8229:2;;;8281:1;;8271:12;8229:2;8306:1;8291:233;8316:6;8313:1;8310:13;8291:233;;;8396:64;8456:3;8444:10;8396:64;:::i;:::-;8384:77;;8475:14;;;;8503;;;;8338:1;8331:9;8291:233;;;8295:14;;;;;;7846:684;;;;:::o;8556:707::-;;8673:3;8666:4;8658:6;8654:17;8650:27;8640:2;;-1:-1;;8681:12;8640:2;8728:6;8715:20;8750:80;8765:64;8822:6;8765:64;:::i;8750:80::-;8858:21;;;8741:89;-1:-1;8902:4;8915:14;;;;8890:17;;;9004;;;8995:27;;;;8992:36;-1:-1;8989:2;;;9041:1;;9031:12;8989:2;9066:1;9051:206;9076:6;9073:1;9070:13;9051:206;;;27930:20;;9144:50;;9208:14;;;;9236;;;;9098:1;9091:9;9051:206;;9289:722;;9417:3;9410:4;9402:6;9398:17;9394:27;9384:2;;-1:-1;;9425:12;9384:2;9465:6;9459:13;9487:80;9502:64;9559:6;9502:64;:::i;9487:80::-;9595:21;;;9478:89;-1:-1;9639:4;9652:14;;;;9627:17;;;9741;;;9732:27;;;;9729:36;-1:-1;9726:2;;;9778:1;;9768:12;9726:2;9803:1;9788:217;9813:6;9810:1;9807:13;9788:217;;;28078:13;;9881:61;;9956:14;;;;9984;;;;9835:1;9828:9;9788:217;;10707:440;;10808:3;10801:4;10793:6;10789:17;10785:27;10775:2;;-1:-1;;10816:12;10775:2;10863:6;10850:20;10885:64;10900:48;10941:6;10900:48;:::i;10885:64::-;10876:73;;10969:6;10962:5;10955:21;11073:3;11005:4;11064:6;10997;11055:16;;11052:25;11049:2;;;11090:1;;11080:12;11049:2;129628:6;11005:4;10997:6;10993:17;11005:4;11031:5;11027:16;129605:30;129684:1;129666:16;;;11005:4;129666:16;129659:27;11031:5;10768:379;-1:-1;;10768:379::o;11156:442::-;;11268:3;11261:4;11253:6;11249:17;11245:27;11235:2;;-1:-1;;11276:12;11235:2;11316:6;11310:13;11338:64;11353:48;11394:6;11353:48;:::i;11338:64::-;11329:73;;11422:6;11415:5;11408:21;11526:3;11458:4;11517:6;11450;11508:16;;11505:25;11502:2;;;11543:1;;11533:12;11502:2;11553:39;11585:6;11458:4;11484:5;11480:16;11458:4;11450:6;11446:17;11553:39;:::i;13078:174::-;13176:13;;132531:1;132521:12;;132511:2;;132547:1;;132537:12;15563:659;;15679:4;15667:9;15662:3;15658:19;15654:30;15651:2;;;-1:-1;;15687:12;15651:2;15715:20;15679:4;15715:20;:::i;:::-;15706:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15799:75;;15956:2;16009:22;;10498:20;10523:32;10498:20;10523:32;:::i;:::-;15956:2;15971:16;;15964:74;16119:2;16172:22;;10498:20;10523:32;10498:20;10523:32;:::i;:::-;16119:2;16134:16;;16127:74;16138:5;15645:577;-1:-1;;15645:577::o;16265:703::-;;16392:4;16380:9;16375:3;16371:19;16367:30;16364:2;;;-1:-1;;16400:12;16364:2;16428:20;16392:4;16428:20;:::i;:::-;16419:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;16512:86;;16680:2;16744:22;;10644:13;10662:32;10644:13;10662:32;:::i;:::-;16680:2;16695:16;;16688:85;16854:2;16918:22;;10644:13;10662:32;10644:13;10662:32;:::i;17016:481::-;;17138:4;17126:9;17121:3;17117:19;17113:30;17110:2;;;-1:-1;;17146:12;17110:2;17174:20;17138:4;17174:20;:::i;:::-;17165:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;17255:75;;17393:2;17447:22;;72:20;97:33;72:20;97:33;:::i;:::-;17393:2;17408:16;;17401:75;17412:5;17104:393;-1:-1;;17104:393::o;18979:1028::-;;19102:4;19090:9;19085:3;19081:19;19077:30;19074:2;;;-1:-1;;19110:12;19074:2;19138:20;19102:4;19138:20;:::i;:::-;19129:29;;27943:6;27930:20;19231:16;19224:75;19367:2;19425:9;19421:22;72:20;97:33;124:5;97:33;:::i;:::-;19367:2;19382:16;;19375:75;19519:2;19573:22;;72:20;97:33;72:20;97:33;:::i;:::-;19519:2;19534:16;;19527:75;19663:2;19717:22;;72:20;97:33;72:20;97:33;:::i;:::-;19663:2;19678:16;;19671:75;19835:3;19820:19;;19807:33;-1:-1;;;;;19849:30;;19846:2;;;-1:-1;;19882:12;19846:2;19927:58;19981:3;19972:6;19961:9;19957:22;19927:58;:::i;:::-;19835:3;19913:5;19909:16;19902:84;;19068:939;;;;:::o;21705:2032::-;;21822:6;;21810:9;21805:3;21801:19;21797:32;21794:2;;;-1:-1;;21832:12;21794:2;21860:22;21822:6;21860:22;:::i;:::-;21851:31;;;21970:73;22039:3;22015:22;21970:73;:::i;:::-;21952:16;21945:99;22144:73;22213:3;22111:2;22193:9;22189:22;22144:73;:::i;:::-;22111:2;22130:5;22126:16;22119:99;22319:49;22364:3;22286:2;22344:9;22340:22;22319:49;:::i;:::-;22286:2;22305:5;22301:16;22294:75;22470:49;22515:3;22437:2;22495:9;22491:22;22470:49;:::i;:::-;22437:2;22456:5;22452:16;22445:75;22630:49;22675:3;22596;22655:9;22651:22;22630:49;:::i;:::-;22596:3;22616:5;22612:16;22605:75;22776:49;22821:3;22742;22801:9;22797:22;22776:49;:::i;:::-;22742:3;22762:5;22758:16;22751:75;22922:49;22967:3;22888;22947:9;22943:22;22922:49;:::i;:::-;22888:3;22908:5;22904:16;22897:75;23069:49;23114:3;23035;23094:9;23090:22;23069:49;:::i;:::-;23035:3;23055:5;23051:16;23044:75;23188:3;23224:49;23269:3;23188;23249:9;23245:22;23224:49;:::i;:::-;23204:18;;;23197:77;23335:3;23392:22;;;10221:20;23351:18;;;23344:77;23484:3;23520:48;23564:3;23540:22;;;23520:48;:::i;:::-;23484:3;23504:5;23500:18;23493:76;;23630:3;;23691:9;23687:22;27930:20;23630:3;23650:5;23646:18;23639:77;;21788:1949;;;;:::o;25206:773::-;;25322:4;25310:9;25305:3;25301:19;25297:30;25294:2;;;-1:-1;;25330:12;25294:2;25358:20;25322:4;25358:20;:::i;:::-;25349:29;;13357:6;13344:20;132650:1;132643:5;132640:12;132630:2;;-1:-1;;132656:12;132630:2;25444:93;;25595:2;25647:22;;28341:20;127063:4;127052:16;;133475:33;;133465:2;;-1:-1;;133512:12;133465:2;25628:47;25595:2;25614:5;25610:16;25603:73;;25734:2;25792:9;25788:22;10221:20;25734:2;25753:5;25749:16;25742:75;25875:2;25933:9;25929:22;10221:20;25875:2;25894:5;25890:16;25883:75;25288:691;;;;:::o;27446:130::-;27513:20;;27538:33;27513:20;27538:33;:::i;28141:128::-;28207:20;;-1:-1;;;;;126950:30;;133354:34;;133344:2;;133402:1;;133392:12;28409:241;;28513:2;28501:9;28492:7;28488:23;28484:32;28481:2;;;-1:-1;;28519:12;28481:2;85:6;72:20;97:33;124:5;97:33;:::i;28657:263::-;;28772:2;28760:9;28751:7;28747:23;28743:32;28740:2;;;-1:-1;;28778:12;28740:2;226:6;220:13;238:33;265:5;238:33;:::i;29213:431::-;;;29361:2;29349:9;29340:7;29336:23;29332:32;29329:2;;;-1:-1;;29367:12;29329:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;29538:2;29596:22;;369:13;29419:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;29546:82;;;;29323:321;;;;;:::o;29651:736::-;;;;;29849:3;29837:9;29828:7;29824:23;29820:33;29817:2;;;-1:-1;;29856:12;29817:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;30027:2;30085:22;;369:13;29908:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;30154:2;30212:22;;369:13;30035:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;30281:2;30339:22;;369:13;30162:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;29811:576;;;;-1:-1;29811:576;;-1:-1;;29811:576::o;30394:561::-;;;;30556:2;30544:9;30535:7;30531:23;30527:32;30524:2;;;-1:-1;;30562:12;30524:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;30733:2;30791:22;;369:13;30614:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;30860:2;30907:22;;10094:13;30741:82;;-1:-1;124546:13;;124539:21;130993:32;;130983:2;;-1:-1;;131029:12;130983:2;30868:71;;;;30518:437;;;;;:::o;30962:562::-;;;31136:2;31124:9;31115:7;31111:23;31107:32;31104:2;;;-1:-1;;31142:12;31104:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;31334:2;31319:18;;31313:25;31194:82;;-1:-1;;;;;;31347:30;;;31344:2;;;-1:-1;;31380:12;31344:2;31476:22;;;;20191:4;20170:19;;;20166:30;20163:2;;;-1:-1;;20199:12;20163:2;20227:20;20191:4;20227:20;:::i;:::-;20370:22;28078:13;20320:16;20313:86;20500:60;20556:3;31334:2;20536:9;20532:22;20500:60;:::i;:::-;31334:2;20486:5;20482:16;20475:86;20663:60;20719:3;31136:2;20699:9;20695:22;20663:60;:::i;:::-;31136:2;20649:5;20645:16;20638:86;20818:60;20874:3;20785:2;20854:9;20850:22;20818:60;:::i;:::-;20785:2;20804:5;20800:16;20793:86;20961:3;20950:9;20946:19;20940:26;31358:18;20978:6;20975:30;20972:2;;;-1:-1;;21008:12;20972:2;21053:69;21118:3;21109:6;21098:9;21094:22;21053:69;:::i;:::-;20961:3;21039:5;21035:16;21028:95;;31400:108;;;;;;31098:426;;;;;:::o;31531:879::-;;;;;;31728:3;31716:9;31707:7;31703:23;31699:33;31696:2;;;-1:-1;;31735:12;31696:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31787:63;-1:-1;31887:2;31926:22;;72:20;97:33;72:20;97:33;:::i;:::-;31895:63;-1:-1;31995:2;32034:22;;72:20;97:33;72:20;97:33;:::i;:::-;32003:63;-1:-1;32103:2;32142:22;;72:20;97:33;72:20;97:33;:::i;:::-;32111:63;-1:-1;32239:3;32224:19;;32211:33;-1:-1;;;;;32253:30;;32250:2;;;-1:-1;;32286:12;32250:2;32316:78;32386:7;32377:6;32366:9;32362:22;32316:78;:::i;:::-;32306:88;;;31690:720;;;;;;;;:::o;32417:753::-;;;;;32597:3;32585:9;32576:7;32572:23;32568:33;32565:2;;;-1:-1;;32604:12;32565:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32656:63;-1:-1;32756:2;32795:22;;72:20;97:33;72:20;97:33;:::i;:::-;32764:63;-1:-1;32864:2;32903:22;;72:20;97:33;72:20;97:33;:::i;:::-;32872:63;-1:-1;33000:2;32985:18;;32972:32;-1:-1;;;;;33013:30;;33010:2;;;-1:-1;;33046:12;33010:2;33076:78;33146:7;33137:6;33126:9;33122:22;33076:78;:::i;:::-;33066:88;;;32559:611;;;;;;;:::o;33177:617::-;;;;;33332:3;33320:9;33311:7;33307:23;33303:33;33300:2;;;-1:-1;;33339:12;33300:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;33391:63;-1:-1;33491:2;33530:22;;72:20;97:33;72:20;97:33;:::i;:::-;33499:63;-1:-1;33599:2;33638:22;;72:20;97:33;72:20;97:33;:::i;:::-;33294:500;;;;-1:-1;33607:63;;33707:2;33746:22;27930:20;;-1:-1;;33294:500::o;33801:763::-;;;;33989:2;33977:9;33968:7;33964:23;33960:32;33957:2;;;-1:-1;;33995:12;33957:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;34047:63;-1:-1;34175:2;34160:18;;34147:32;-1:-1;;;;;34188:30;;;34185:2;;;-1:-1;;34221:12;34185:2;34251:78;34321:7;34312:6;34301:9;34297:22;34251:78;:::i;:::-;34241:88;;34394:2;34383:9;34379:18;34366:32;34352:46;;34199:18;34410:6;34407:30;34404:2;;;-1:-1;;34440:12;34404:2;;34470:78;34540:7;34531:6;34520:9;34516:22;34470:78;:::i;:::-;34460:88;;;33951:613;;;;;:::o;34571:879::-;;;;;;34768:3;34756:9;34747:7;34743:23;34739:33;34736:2;;;-1:-1;;34775:12;34736:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;34827:63;-1:-1;34927:2;34966:22;;27930:20;;-1:-1;35035:2;35074:22;;72:20;97:33;72:20;97:33;:::i;35457:392::-;;35597:2;;35585:9;35576:7;35572:23;35568:32;35565:2;;;-1:-1;;35603:12;35565:2;35654:17;35648:24;-1:-1;;;;;35684:6;35681:30;35678:2;;;-1:-1;;35714:12;35678:2;35801:22;;1312:4;1300:17;;1296:27;-1:-1;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;-1:-1;35734:99;35559:290;-1:-1;;;;;;;35559:290::o;35856:833::-;;;;36075:2;36063:9;36054:7;36050:23;36046:32;36043:2;;;-1:-1;;36081:12;36043:2;36132:17;36126:24;-1:-1;;;;;36170:18;36162:6;36159:30;36156:2;;;-1:-1;;36192:12;36156:2;36294:6;36283:9;36279:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;10369:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;36354:18;;36348:25;36212:99;;-1:-1;36348:25;-1:-1;;;36382:30;;;36379:2;;;-1:-1;;36415:12;36379:2;;36445:89;36526:7;36517:6;36506:9;36502:22;36445:89;:::i;:::-;36435:99;;;36589:84;36665:7;36571:2;36645:9;36641:22;36589:84;:::i;:::-;36579:94;;36037:652;;;;;:::o;36696:419::-;;;36846:2;36834:9;36825:7;36821:23;36817:32;36814:2;;;-1:-1;;36852:12;36814:2;36910:17;36897:31;-1:-1;;;;;36948:18;36940:6;36937:30;36934:2;;;-1:-1;;36970:12;36934:2;37082:6;37071:9;37067:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;36948:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;36846:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;36846;3739:17;;;;;36990:109;;-1:-1;36808:307;;-1:-1;;;;36808:307::o;37122:799::-;;;;37328:2;37316:9;37307:7;37303:23;37299:32;37296:2;;;-1:-1;;37334:12;37296:2;37392:17;37379:31;-1:-1;;;;;37430:18;37422:6;37419:30;37416:2;;;-1:-1;;37452:12;37416:2;37482:87;37561:7;37552:6;37541:9;37537:22;37482:87;:::i;:::-;37472:97;;37634:2;37623:9;37619:18;37606:32;37592:46;;37430:18;37650:6;37647:30;37644:2;;;-1:-1;;37680:12;37644:2;;37710:87;37789:7;37780:6;37769:9;37765:22;37710:87;:::i;:::-;37700:97;;;37834:2;37877:9;37873:22;27930:20;37842:63;;37290:631;;;;;:::o;37928:425::-;;38081:2;38069:9;38060:7;38056:23;38052:32;38049:2;;;-1:-1;;38087:12;38049:2;38145:17;38132:31;-1:-1;;;;;38175:6;38172:30;38169:2;;;-1:-1;;38205:12;38169:2;38235:102;38329:7;38320:6;38309:9;38305:22;38235:102;:::i;38360:550::-;;;38530:2;38518:9;38509:7;38505:23;38501:32;38498:2;;;-1:-1;;38536:12;38498:2;38594:17;38581:31;-1:-1;;;;;38624:6;38621:30;38618:2;;;-1:-1;;38654:12;38618:2;38684:102;38778:7;38769:6;38758:9;38754:22;38684:102;:::i;:::-;38674:112;;;38823:2;38866:9;38862:22;72:20;97:33;124:5;97:33;:::i;38917:675::-;;;;39104:2;39092:9;39083:7;39079:23;39075:32;39072:2;;;-1:-1;;39110:12;39072:2;39168:17;39155:31;-1:-1;;;;;39198:6;39195:30;39192:2;;;-1:-1;;39228:12;39192:2;39258:102;39352:7;39343:6;39332:9;39328:22;39258:102;:::i;:::-;39248:112;;;39397:2;39440:9;39436:22;72:20;97:33;124:5;97:33;:::i;:::-;39405:63;-1:-1;39505:2;39544:22;;72:20;97:33;72:20;97:33;:::i;39599:390::-;;39738:2;;39726:9;39717:7;39713:23;39709:32;39706:2;;;-1:-1;;39744:12;39706:2;39795:17;39789:24;-1:-1;;;;;39825:6;39822:30;39819:2;;;-1:-1;;39855:12;39819:2;39941:22;;5524:4;5512:17;;5508:27;-1:-1;5498:2;;-1:-1;;5539:12;5498:2;5579:6;5573:13;5601:79;5616:63;5672:6;5616:63;:::i;5601:79::-;5708:21;;;5765:14;;;;5740:17;;;5854;;;5845:27;;;;5842:36;-1:-1;5839:2;;;-1:-1;;5881:12;5839:2;-1:-1;5907:10;;5901:216;5926:6;5923:1;5920:13;5901:216;;;13783:13;;5994:60;;5948:1;5941:9;;;;;6068:14;;;;6096;;5901:216;;39996:909;;;;40257:2;40245:9;40236:7;40232:23;40228:32;40225:2;;;-1:-1;;40263:12;40225:2;40321:17;40308:31;-1:-1;;;;;40359:18;40351:6;40348:30;40345:2;;;-1:-1;;40381:12;40345:2;40500:6;40489:9;40485:22;;;7047:3;7040:4;7032:6;7028:17;7024:27;7014:2;;-1:-1;;7055:12;7014:2;7102:6;7089:20;7124:108;7139:92;7224:6;7139:92;:::i;7124:108::-;7238:16;7274:6;7267:5;7260:21;7304:4;;7321:3;7317:14;7310:21;;7304:4;7296:6;7292:17;7418:6;7428:3;7304:4;7418:6;7410;7406:19;7296:6;7397:29;;7394:38;7391:2;;;-1:-1;;7435:12;7391:2;-1:-1;7461:10;;7455:236;7480:6;7477:1;7474:13;7455:236;;;7560:65;7621:3;7609:10;7560:65;:::i;:::-;7548:78;;7502:1;7495:9;;;;;7640:14;;;;7668:16;;;;7455:236;;;-1:-1;40401:116;;-1:-1;40567:18;;40554:32;;-1:-1;;;;40595:30;;;40592:2;;;-1:-1;;40628:12;40592:2;;40658:105;40755:7;40746:6;40735:9;40731:22;40658:105;:::i;:::-;40648:115;;;40818:71;40881:7;40800:2;40861:9;40857:22;40818:71;:::i;40912:392::-;;41052:2;41040:9;41031:7;41027:23;41023:32;41020:2;;;-1:-1;;41058:12;41020:2;41109:17;41103:24;-1:-1;;;;;41139:6;41136:30;41133:2;;;-1:-1;;41169:12;41133:2;41199:89;41280:7;41271:6;41260:9;41256:22;41199:89;:::i;41311:257::-;;41423:2;41411:9;41402:7;41398:23;41394:32;41391:2;;;-1:-1;;41429:12;41391:2;10100:6;10094:13;10112:30;10136:5;10112:30;:::i;41575:263::-;;41690:2;41678:9;41669:7;41665:23;41661:32;41658:2;;;-1:-1;;41696:12;41658:2;-1:-1;10369:13;;41652:186;-1:-1;41652:186::o;41845:360::-;;41969:2;41957:9;41948:7;41944:23;41940:32;41937:2;;;-1:-1;;41975:12;41937:2;42026:17;42020:24;-1:-1;;;;;42056:6;42053:30;42050:2;;;-1:-1;;42086:12;42050:2;42116:73;42181:7;42172:6;42161:9;42157:22;42116:73;:::i;43168:861::-;;;;43405:2;43393:9;43384:7;43380:23;43376:32;43373:2;;;-1:-1;;43411:12;43373:2;12823:6;12810:20;12835:58;12887:5;12835:58;:::i;:::-;43463:88;-1:-1;43616:2;43601:18;;43588:32;-1:-1;;;;;43629:30;;;43626:2;;;-1:-1;;43662:12;43626:2;43692:102;43786:7;43777:6;43766:9;43762:22;43692:102;:::i;44036:261::-;;44150:2;44138:9;44129:7;44125:23;44121:32;44118:2;;;-1:-1;;44156:12;44118:2;13650:6;13644:13;13662:32;13688:5;13662:32;:::i;44304:452::-;;;44462:3;44450:9;44441:7;44437:23;44433:33;44430:2;;;-1:-1;;44469:12;44430:2;13650:6;13644:13;13662:32;13688:5;13662:32;:::i;:::-;44521:73;-1:-1;44649:91;44732:7;44631:2;44708:22;;44649:91;:::i;:::-;44639:101;;44424:332;;;;;:::o;45226:824::-;;;;;45429:9;45420:7;45416:23;45441:3;45416:23;45412:33;45409:2;;;-1:-1;;45448:12;45409:2;14470:4;14449:19;14445:30;14442:2;;;-1:-1;;14478:12;14442:2;;14506:20;14470:4;14506:20;:::i;:::-;10234:6;10221:20;14592:16;14585:75;14722:2;14780:9;14776:22;72:20;97:33;124:5;97:33;:::i;:::-;14722:2;14737:16;;14730:75;14741:5;-1:-1;14470:4;45674:22;;72:20;97:33;72:20;97:33;:::i;:::-;45643:63;-1:-1;45743:2;45782:22;;72:20;97:33;72:20;97:33;:::i;:::-;45751:63;-1:-1;45879:3;45864:19;;45851:33;-1:-1;;;;;45893:30;;45890:2;;;-1:-1;;45926:12;46057:909;;;;;46272:3;46260:9;46251:7;46247:23;46243:33;46240:2;;;-1:-1;;46279:12;46240:2;46337:17;46324:31;-1:-1;;;;;46375:18;46367:6;46364:30;46361:2;;;-1:-1;;46397:12;46361:2;46483:22;;;;15002:4;14981:19;;;14977:30;14974:2;;;-1:-1;;15010:12;14974:2;15038:20;15002:4;15038:20;:::i;:::-;15144:73;15213:3;15189:22;15144:73;:::i;:::-;15126:16;15119:99;15308:2;15297:9;15293:18;15280:32;46375:18;15324:6;15321:30;15318:2;;;-1:-1;;15354:12;15318:2;15399:99;15494:3;15485:6;15474:9;15470:22;15399:99;:::i;:::-;15308:2;15385:5;15381:16;15374:125;;46417:98;;;;46570:53;46615:7;15308:2;46595:9;46591:22;46570:53;:::i;:::-;46560:63;;46678:53;46723:7;15002:4;46703:9;46699:22;46678:53;:::i;:::-;46668:63;;46796:2;46785:9;46781:18;46768:32;46754:46;;46375:18;46812:6;46809:30;46806:2;;;-1:-1;;46842:12;46806:2;;46872:78;46942:7;46933:6;46922:9;46918:22;46872:78;:::i;46973:805::-;;;;;47178:3;47166:9;47157:7;47153:23;47149:33;47146:2;;;-1:-1;;47185:12;47146:2;47247:80;47319:7;47295:22;47247:80;:::i;:::-;47237:90;;47364:2;47406:9;47402:22;13498:20;13523:32;13549:5;13523:32;:::i;:::-;47372:62;-1:-1;47471:3;47510:22;;13498:20;13523:32;13498:20;13523:32;:::i;:::-;47480:62;-1:-1;47607:3;47592:19;;47579:33;-1:-1;;;;;47621:30;;47618:2;;;-1:-1;;47654:12;47785:820;;;;;47998:3;47986:9;47977:7;47973:23;47969:33;47966:2;;;-1:-1;;48005:12;47966:2;48067:86;48145:7;48121:22;48067:86;:::i;:::-;48057:96;;48190:2;48233:9;48229:22;72:20;97:33;124:5;97:33;:::i;48612:383::-;;48744:2;48732:9;48723:7;48719:23;48715:32;48712:2;;;-1:-1;;48750:12;48712:2;48808:17;48795:31;-1:-1;;;;;48846:18;48838:6;48835:30;48832:2;;;-1:-1;;48868:12;48832:2;48947:22;;;;17663:4;17642:19;;;17638:30;17635:2;;;-1:-1;;17671:12;17635:2;17699:20;17663:4;17699:20;:::i;:::-;17803:49;17848:3;17824:22;17803:49;:::i;:::-;17785:16;17778:75;48744:2;17931:9;17927:18;17914:32;48846:18;17958:6;17955:30;17952:2;;;-1:-1;;17988:12;17952:2;18033:74;18103:3;18094:6;18083:9;18079:22;18033:74;:::i;:::-;48744:2;18019:5;18015:16;18008:100;;18201:2;18190:9;18186:18;18173:32;48846:18;18217:6;18214:30;18211:2;;;-1:-1;;18247:12;18211:2;18292:84;18372:3;18363:6;18352:9;18348:22;18292:84;:::i;:::-;18201:2;18278:5;18274:16;18267:110;;18478:2;18467:9;18463:18;18450:32;48846:18;18494:6;18491:30;18488:2;;;-1:-1;;18524:12;18488:2;18569:74;18639:3;18630:6;18619:9;18615:22;18569:74;:::i;:::-;18478:2;18555:5;18551:16;18544:100;;18741:3;18730:9;18726:19;18713:33;48846:18;18758:6;18755:30;18752:2;;;-1:-1;;18788:12;18752:2;18833:74;18903:3;18894:6;18883:9;18879:22;18833:74;:::i;:::-;18741:3;18815:16;;18808:100;-1:-1;18819:5;48706:289;-1:-1;;;;;48706:289::o;49002:907::-;;;;;49216:3;49204:9;49195:7;49191:23;49187:33;49184:2;;;-1:-1;;49223:12;49184:2;49281:17;49268:31;-1:-1;;;;;49319:18;49311:6;49308:30;49305:2;;;-1:-1;;49341:12;49305:2;49371:87;49450:7;49441:6;49430:9;49426:22;49371:87;:::i;:::-;49361:97;;49495:2;49538:9;49534:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;49503:63;;-1:-1;49603:2;49642:22;;72:20;;97:33;72:20;97:33;:::i;:::-;49611:63;;-1:-1;49739:2;49724:18;;49711:32;;49752:30;;;49749:2;;;-1:-1;;49785:12;49916:771;;;;;50105:3;50093:9;50084:7;50080:23;50076:33;50073:2;;;-1:-1;;50112:12;50073:2;50170:17;50157:31;-1:-1;;;;;50200:6;50197:30;50194:2;;;-1:-1;;50230:12;50194:2;50260:87;50339:7;50330:6;50319:9;50315:22;50260:87;:::i;:::-;50250:97;;;50384:2;50427:9;50423:22;72:20;97:33;124:5;97:33;:::i;50694:771::-;;;;;50883:3;50871:9;50862:7;50858:23;50854:33;50851:2;;;-1:-1;;50890:12;50851:2;50948:17;50935:31;-1:-1;;;;;50978:6;50975:30;50972:2;;;-1:-1;;51008:12;50972:2;51038:87;51117:7;51108:6;51097:9;51093:22;51038:87;:::i;:::-;51028:97;;;51162:2;51205:9;51201:22;10221:20;51170:63;;51270:2;51313:9;51309:22;72:20;97:33;124:5;97:33;:::i;:::-;51278:63;-1:-1;51378:2;51417:22;;72:20;97:33;72:20;97:33;:::i;52285:640::-;;;;52496:3;52484:9;52475:7;52471:23;52467:33;52464:2;;;-1:-1;;52503:12;52464:2;52565:81;52638:7;52614:22;52565:81;:::i;:::-;52555:91;;52702:80;52774:7;52683:3;52754:9;52750:22;52702:80;:::i;:::-;52692:90;;52819:3;52881:9;52877:22;12250:20;12275:51;12320:5;12275:51;:::i;52932:815::-;;;;;53130:9;53121:7;53117:23;53142:3;53117:23;53113:33;53110:2;;;-1:-1;;53149:12;53110:2;23905:4;23884:19;23880:30;23877:2;;;-1:-1;;23913:12;23877:2;;23941:20;23905:4;23941:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;24024:75;;24169:2;24223:22;;;10221:20;24184:16;;;24177:75;24324:2;24378:22;;72:20;97:33;72:20;97:33;:::i;:::-;24324:2;24339:16;;24332:75;24343:5;-1:-1;23905:4;53370:22;;72:20;97:33;72:20;97:33;:::i;:::-;53339:63;-1:-1;53439:3;53479:22;;72:20;97:33;72:20;97:33;:::i;53754:585::-;;;;53915:9;53906:7;53902:23;53927:3;53902:23;53898:33;53895:2;;;-1:-1;;53934:12;53895:2;24595:4;24574:19;24570:30;24567:2;;;-1:-1;;24603:12;24567:2;;24631:20;24595:4;24631:20;:::i;:::-;24770:22;10369:13;24720:16;24713:86;24862:2;24947:9;24943:22;12999:13;132410:1;132403:5;132400:12;132390:2;;-1:-1;;132416:12;132390:2;24862;24877:16;;24870:102;25051:2;25116:22;;27661:13;27679:33;27661:13;27679:33;:::i;:::-;25051:2;25066:16;;25059:86;24595:4;54174:22;;27661:13;25070:5;;-1:-1;27679:33;27661:13;27679:33;:::i;:::-;54243:3;54291:22;;10094:13;54132:74;;-1:-1;10112:30;10094:13;10112:30;:::i;55162:261::-;;55276:2;55264:9;55255:7;55251:23;55247:32;55244:2;;;-1:-1;;55282:12;55244:2;27807:6;27801:13;126789:8;133135:5;126778:20;133111:5;133108:34;133098:2;;-1:-1;;133146:12;55700:399;;;55832:2;55820:9;55811:7;55807:23;55803:32;55800:2;;;-1:-1;;55838:12;55800:2;-1:-1;;28078:13;;56001:2;56051:22;;;28078:13;;;;;-1:-1;55794:305::o;56106:672::-;;;;;56272:3;56260:9;56251:7;56247:23;56243:33;56240:2;;;-1:-1;;56279:12;56240:2;-1:-1;;28078:13;;56442:2;56492:22;;28078:13;56561:2;56611:22;;28078:13;56680:2;56730:22;;;28078:13;;;;;-1:-1;28078:13;;-1:-1;56234:544;-1:-1;56234:544::o;56785:809::-;;;;;;56968:3;56956:9;56947:7;56943:23;56939:33;56936:2;;;-1:-1;;56975:12;56936:2;-1:-1;;28078:13;;57138:2;57188:22;;28078:13;57257:2;57307:22;;28078:13;57376:2;57426:22;;28078:13;57495:3;57546:22;;;28078:13;;;;;-1:-1;28078:13;;-1:-1;28078:13;;-1:-1;56930:664;-1:-1;56930:664::o;59466:127::-;-1:-1;;;;;126651:54;59543:45;;59537:56::o;59861:690::-;;60054:5;119660:12;122201:6;122196:3;122189:19;122238:4;;122233:3;122229:14;60066:93;;122238:4;60230:5;118316:14;-1:-1;60269:260;60294:6;60291:1;60288:13;60269:260;;;60355:13;;-1:-1;;;;;126651:54;59543:45;;57755:14;;;;121147;;;;19860:18;60309:9;60269:260;;;-1:-1;60535:10;;59985:566;-1:-1;;;;;59985:566::o;60590:690::-;;60783:5;119660:12;122201:6;122196:3;122189:19;122238:4;;122233:3;122229:14;60795:93;;122238:4;60959:5;118316:14;-1:-1;60998:260;61023:6;61020:1;61017:13;60998:260;;;61084:13;;67383:37;;57937:14;;;;121147;;;;61045:1;61038:9;60998:260;;68000:323;;68132:5;119660:12;122201:6;122196:3;122189:19;68215:52;68260:6;122238:4;122233:3;122229:14;122238:4;68241:5;68237:16;68215:52;:::i;:::-;130061:7;130045:14;-1:-1;;130041:28;68279:39;;;;122238:4;68279:39;;68080:243;-1:-1;;68080:243::o;73220:1056::-;;73445:16;73439:23;67390:3;67383:37;73618:4;73611:5;73607:16;73601:23;73618:4;73682:3;73678:14;67383:37;73781:4;73774:5;73770:16;73764:23;73781:4;73845:3;73841:14;67383:37;73937:4;73930:5;73926:16;73920:23;73937:4;74001:3;73997:14;67383:37;74095:4;74088:5;74084:16;74078:23;73371:4;74095;74125:3;74121:14;74114:38;74167:71;73371:4;73366:3;73362:14;74219:12;74167:71;:::i;75008:678::-;75228:23;;-1:-1;;;;;126651:54;59543:45;;75420:4;75409:16;;;75403:23;-1:-1;;;;;;124712:78;;;75478:14;;;67611:36;;;;75592:4;75581:16;;;75575:23;124712:78;75650:14;;67611:36;75128:558::o;75780:835::-;76003:23;;-1:-1;;;;;126651:54;;;59543:45;;76189:4;76178:16;;;76172:23;124546:13;124539:21;76243:14;;;67165:34;76342:4;76331:16;;;76325:23;126651:54;;;76418:14;;;59543:45;76525:4;76514:16;;;76508:23;124546:13;124539:21;76579:14;;67165:34;75908:707::o;76689:582::-;;76919:16;76913:23;67390:3;67383:37;77090:4;77083:5;77079:16;77073:23;76840:4;77090;77120:3;77116:14;77109:38;77162:71;76840:4;76835:3;76831:14;77214:12;77162:71;:::i;77361:1073::-;;77611:16;77605:23;67390:3;67383:37;77783:4;77776:5;77772:16;77766:23;19860:18;;126662:42;;;;124356:5;126651:54;77783:4;77847:3;77843:14;59543:45;126662:42;77945:4;77938:5;77934:16;77928:23;126651:54;77945:4;78009:3;78005:14;59543:45;126662:42;78099:4;78092:5;78088:16;78082:23;126651:54;78099:4;78163:3;78159:14;59543:45;;;78253:4;78246:5;78242:16;78236:23;77530:4;78253;78283:3;78279:14;78272:38;78325:71;77530:4;77525:3;77521:14;78377:12;78325:71;:::i;78506:2141::-;78758:87;78830:14;78735:16;78729:23;78758:87;:::i;:::-;78930:4;78923:5;78919:16;78913:23;78942:87;78930:4;79018:3;79014:14;79000:12;78942:87;:::i;:::-;;79115:4;79108:5;79104:16;79098:23;79127:63;79115:4;79179:3;79175:14;79161:12;79127:63;:::i;:::-;;79276:4;79269:5;79265:16;79259:23;79288:63;79276:4;79340:3;79336:14;79322:12;79288:63;:::i;:::-;;79445:4;79438:5;79434:16;79428:23;79457:63;79445:4;79509:3;79505:14;79491:12;79457:63;:::i;:::-;;79600:4;79593:5;79589:16;79583:23;79612:63;79600:4;79664:3;79660:14;79646:12;79612:63;:::i;:::-;;79755:4;79748:5;79744:16;79738:23;79767:63;79755:4;79819:3;79815:14;79801:12;79767:63;:::i;:::-;;79911:4;79904:5;79900:16;79894:23;79923:63;79911:4;79975:3;79971:14;79957:12;79923:63;:::i;:::-;;80073:6;;80066:5;80062:18;80056:25;80087:65;80073:6;80139:3;80135:16;80121:12;80087:65;:::i;:::-;-1:-1;;80231:6;80220:18;;;80214:25;80293:16;;;67383:37;80391:6;80380:18;;;80374:25;80405:63;80451:16;;;80374:25;80405:63;:::i;:::-;-1:-1;;80547:6;80536:18;;;80530:25;80609:16;;67383:37;78628:2019::o;80717:800::-;80945:16;80939:23;125619:54;125667:5;125619:54;:::i;:::-;70335:66;;81123:4;81112:16;;;81106:23;127063:4;127052:16;81179:14;;;82911:35;81270:4;81259:16;;;81253:23;81330:14;;;67383:37;81421:4;81410:16;;;81404:23;81481:14;;67383:37;80837:680::o;82290:103::-;-1:-1;;;;;126531:46;82351:37;;82345:48::o;82747:100::-;-1:-1;;;;;126950:30;82806:36;;82800:47::o;82958:291::-;;129628:6;129623:3;129618;129605:30;129666:16;;129659:27;;;129666:16;83102:147;-1:-1;83102:147::o;83256:271::-;;68840:5;119660:12;68951:52;68996:6;68991:3;68984:4;68977:5;68973:16;68951:52;:::i;:::-;69015:16;;;;;83390:137;-1:-1;;83390:137::o;83534:222::-;-1:-1;;;;;126651:54;;;;59543:45;;83661:2;83646:18;;83632:124::o;83763:349::-;-1:-1;;;;;126651:54;;;;59396:58;;84098:2;84083:18;;67383:37;83926:2;83911:18;;83897:215::o;84119:333::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;84438:2;84423:18;;59543:45;84274:2;84259:18;;84245:207::o;84459:556::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;;84835:2;84820:18;;59543:45;126651:54;;;84918:2;84903:18;;59543:45;126651:54;;;85001:2;84986:18;;59543:45;84670:3;84655:19;;84641:374::o;85022:704::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;;85448:2;85433:18;;59543:45;126651:54;;85531:2;85516:18;;59543:45;85283:3;85568:2;85553:18;;85546:48;;;85022:704;;85608:108;;85268:19;;85702:6;85608:108;:::i;85733:556::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;;86109:2;86094:18;;59543:45;126651:54;;86192:2;86177:18;;59543:45;86275:2;86260:18;;67383:37;;;;85944:3;85929:19;;85915:374::o;86296:432::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;;;86637:2;86622:18;;59543:45;124546:13;;124539:21;86714:2;86699:18;;67165:34;86473:2;86458:18;;86444:284::o;86735:628::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;87123:2;87108:18;;59543:45;124546:13;;124539:21;87200:2;87185:18;;67165:34;86958:3;87237:2;87222:18;;87215:48;;;86735:628;;87277:76;;86943:19;;87339:6;87277:76;:::i;87370:444::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;;;87717:2;87702:18;;59543:45;87800:2;87785:18;;67383:37;;;;87553:2;87538:18;;87524:290::o;87821:768::-;-1:-1;;;;;126651:54;;;59543:45;;126651:54;;88251:2;88236:18;;59543:45;88334:2;88319:18;;67383:37;;;88425:2;88410:18;;70919:58;;;126662:42;88462:3;88447:19;;88440:49;;;87821:768;;88503:76;;88071:19;;88565:6;88503:76;:::i;:::-;88495:84;88057:532;-1:-1;;;;;;;88057:532::o;88596:740::-;-1:-1;;;;;126651:54;;59543:45;;88879:2;88997;88982:18;;88975:48;;;88596:740;;89037:108;;88864:18;;89131:6;89037:108;:::i;:::-;89193:9;89187:4;89183:20;89178:2;89167:9;89163:18;89156:48;89218:108;89321:4;89312:6;89218:108;:::i;89343:876::-;-1:-1;;;;;126651:54;;59543:45;;89343:876;125619:54;125667:5;125619:54;:::i;:::-;129130:38;89843:2;89832:9;89828:18;70649:62;89666:3;89880:2;89869:9;89865:18;89858:48;89920:108;89666:3;89655:9;89651:19;90014:6;89920:108;:::i;:::-;90076:9;90070:4;90066:20;90061:2;90050:9;90046:18;90039:48;90101:108;90204:4;90195:6;90101:108;:::i;90226:1644::-;-1:-1;;;;;126651:54;;;59543:45;;90226:1644;;90773:3;;125619:54;125667:5;125619:54;:::i;:::-;129130:38;90950:2;90939:9;90935:18;70649:62;90773:3;90987:2;90976:9;90972:18;90965:48;91027:108;90773:3;90762:9;90758:19;91121:6;91027:108;:::i;:::-;91019:116;;91183:9;91177:4;91173:20;91168:2;91157:9;91153:18;91146:48;91208:108;91311:4;91302:6;91208:108;:::i;:::-;126651:54;;;91395:3;91380:19;;59543:45;91200:116;-1:-1;125619:54;125667:5;125619:54;:::i;:::-;129130:38;91491:3;91480:9;91476:19;70649:62;91545:9;91539:4;91535:20;91529:3;91518:9;91514:19;91507:49;91570:108;91673:4;91664:6;91570:108;:::i;:::-;91562:116;;91727:9;91721:4;91717:20;91711:3;91700:9;91696:19;91689:49;91752:108;91855:4;91846:6;91752:108;:::i;:::-;91744:116;90744:1126;-1:-1;;;;;;;;;;;90744:1126::o;91877:517::-;-1:-1;;;;;126651:54;;59543:45;;92100:2;92218;92203:18;;92196:48;;;91877:517;;92258:126;;92085:18;;92370:6;92258:126;:::i;92741:629::-;;92996:2;93017:17;93010:47;93071:108;92996:2;92985:9;92981:18;93165:6;93071:108;:::i;:::-;93227:9;93221:4;93217:20;93212:2;93201:9;93197:18;93190:48;93252:108;93355:4;93346:6;93252:108;:::i;93377:481::-;;93582:2;93603:17;93596:47;93657:108;93582:2;93571:9;93567:18;93751:6;93657:108;:::i;:::-;93649:116;;67413:5;93844:2;93833:9;93829:18;67383:37;93553:305;;;;;:::o;93865:665::-;;94138:2;94127:9;94123:18;94138:2;94159:17;94152:47;94213:126;61535:5;119660:12;122201:6;122196:3;122189:19;122229:14;94127:9;122229:14;61547:102;;122238:4;;;122229:14;122238:4;61706:6;61702:17;94127:9;61693:27;;122238:4;61800:5;118316:14;-1:-1;61839:357;61864:6;61861:1;61858:13;61839:357;;;61916:20;;94127:9;61920:4;61916:20;;61911:3;61904:33;58085:64;58145:3;61971:6;61965:13;58085:64;:::i;:::-;62175:14;;;;61985:90;-1:-1;121147:14;;;;61886:1;61879:9;61839:357;;;61843:14;;94387:9;94381:4;94377:20;122238:4;94361:9;94357:18;94350:48;94412:108;94515:4;94506:6;94412:108;:::i;94537:486::-;94772:2;94786:47;;;119660:12;;94757:18;;;122189:19;;;94537:486;;94772:2;122229:14;;;;;;65760:17;;;65751:27;;;;118316:14;;;94537:486;65917:417;65942:6;65939:1;65936:13;65917:417;;;65994:20;;;-1:-1;;65994:20;65982:33;;66043:13;;74583:23;;74619:38;;;74672:71;74508:14;;;74583:23;74672:71;:::i;:::-;74820:16;;;74814:23;124546:13;124539:21;74885:14;;;67165:34;;;;66313:14;;;;74664:79;-1:-1;121147:14;;;;65964:1;65957:9;65917:417;;;-1:-1;94839:174;;94743:280;-1:-1;;;;;;;;94743:280::o;95030:370::-;;95207:2;95228:17;95221:47;95282:108;95207:2;95196:9;95192:18;95376:6;95282:108;:::i;95407:210::-;124546:13;;124539:21;67165:34;;95528:2;95513:18;;95499:118::o;95624:580::-;124546:13;;124539:21;67165:34;;-1:-1;;;;;126651:54;;96009:2;95994:18;;59543:45;95851:2;96046;96031:18;;96024:48;;;95624:580;;96086:108;;95836:18;;96180:6;96086:108;:::i;96211:222::-;67383:37;;;96338:2;96323:18;;96309:124::o;96440:676::-;;67413:5;67390:3;67383:37;96691:2;96809;96798:9;96794:18;96787:48;96849:76;96691:2;96680:9;96676:18;96911:6;96849:76;:::i;97123:306::-;;97268:2;97289:17;97282:47;97343:76;97268:2;97257:9;97253:18;97405:6;97343:76;:::i;97436:417::-;;97609:2;97630:17;97623:47;97684:76;97609:2;97598:9;97594:18;97746:6;97684:76;:::i;97860:536::-;-1:-1;;;;;126651:54;;;69118:64;;126651:54;;;;98301:2;98286:18;;69118:64;126789:8;126778:20;;;98382:2;98367:18;;82469:36;98089:2;98074:18;;98060:336::o;98950:519::-;-1:-1;;;;;126651:54;;69118:64;;99174:2;99311;99296:18;;99289:48;;;98950:519;;99351:108;;99159:18;;99445:6;99351:108;:::i;99476:482::-;99678:2;99663:18;;125619:54;125667:5;125619:54;:::i;:::-;69976:69;;;99861:2;99846:18;;67383:37;;;;99944:2;99929:18;;;67383:37;99649:309;:::o;99965:512::-;100182:2;100167:18;;130306:1;130296:12;;130286:2;;130312:9;100484:1144;;100941:3;100930:9;100926:19;130532:1;130525:5;130522:12;130512:2;;130538:9;130512:2;128991:36;70501:3;70494:60;101070:2;100941:3;101070:2;101059:9;101055:18;101048:48;101110:168;64389:5;119660:12;122201:6;122196:3;122189:19;122229:14;;;;100930:9;122229:14;64401:123;;122229:14;101070:2;64581:6;64577:17;100930:9;64568:27;;64556:39;;101070:2;64696:5;118316:14;-1:-1;64735:420;64760:6;64757:1;64754:13;64735:420;;;64812:20;;100930:9;64816:4;64812:20;;64807:3;64800:33;58737:106;58839:3;64867:6;64861:13;58737:106;:::i;:::-;64881:132;-1:-1;65134:14;;;;121147;;;;64782:1;64775:9;64735:420;;;64739:14;;;;;101326:9;101320:4;101316:20;101311:2;101300:9;101296:18;101289:48;101351:122;101468:4;101459:6;101351:122;:::i;:::-;101343:130;;;101484:134;101614:2;101603:9;101599:18;101590:6;101484:134;:::i;101635:436::-;126369:2;126358:21;;;70792:36;;126358:21;;;;101974:2;101959:18;;70792:36;102057:2;102042:18;;67383:37;;;;101814:2;101799:18;;101785:286::o;102078:438::-;126369:2;126358:21;;;70792:36;;102285:3;102270:19;;102380:126;102502:2;102487:18;;102478:6;102380:126;:::i;102976:416::-;103176:2;103190:47;;;71548:2;103161:18;;;122189:19;71584:34;122229:14;;;71564:55;-1:-1;;;71639:12;;;71632:28;71679:12;;;103147:245::o;103399:416::-;103599:2;103613:47;;;71930:2;103584:18;;;122189:19;71966:34;122229:14;;;71946:55;-1:-1;;;72021:12;;;72014:29;72062:12;;;103570:245::o;103822:416::-;104022:2;104036:47;;;72313:2;104007:18;;;122189:19;72349:34;122229:14;;;72329:55;-1:-1;;;72404:12;;;72397:29;72445:12;;;103993:245::o;104245:416::-;104445:2;104459:47;;;72696:2;104430:18;;;122189:19;-1:-1;;;122229:14;;;72712:39;72770:12;;;104416:245::o;104668:416::-;104868:2;104882:47;;;73021:2;104853:18;;;122189:19;73057:32;122229:14;;;73037:53;73109:12;;;104839:245::o;105091:806::-;;105417:125;105524:17;105515:6;105417:125;:::i;:::-;70821:5;126369:2;126358:21;105619:2;105608:9;105604:18;70792:36;70821:5;126369:2;126358:21;105700:3;105689:9;105685:19;70792:36;105402:3;105738;105727:9;105723:19;105716:49;105779:108;105402:3;105391:9;105387:19;105873:6;105779:108;:::i;105904:740::-;;106187:2;106208:17;106201:47;106262:108;106187:2;106176:9;106172:18;106356:6;106262:108;:::i;:::-;106418:9;106412:4;106408:20;106403:2;106392:9;106388:18;106381:48;106443:108;106546:4;106537:6;106443:108;:::i;:::-;106435:116;;;67413:5;106630:2;106619:9;106615:18;67383:37;106158:486;;;;;;:::o;106651:740::-;;106930:3;106952:17;106945:47;107006:126;106930:3;106919:9;106915:19;107118:6;107006:126;:::i;:::-;-1:-1;;;;;126651:54;;;107211:2;107196:18;;59543:45;126651:54;;;;107294:2;107279:18;;59543:45;107377:2;107362:18;67383:37;106998:134;106901:490;-1:-1;;106901:490::o;107398:740::-;;107677:3;107699:17;107692:47;107753:126;107677:3;107666:9;107662:19;107865:6;107753:126;:::i;:::-;107958:2;107943:18;;67383:37;;;;-1:-1;;;;;;126651:54;;;108041:2;108026:18;;59543:45;126651:54;;108124:2;108109:18;;;59543:45;107745:134;107648:490;-1:-1;107648:490::o;108145:555::-;108410:3;108395:19;;108425:127;108399:9;108525:6;108425:127;:::i;:::-;108563;108685:3;108674:9;108670:19;108661:6;108563:127;:::i;108707:703::-;109018:3;109003:19;;109033:127;109007:9;109133:6;109033:127;:::i;:::-;109171;109293:3;109282:9;109278:19;109269:6;109171:127;:::i;:::-;-1:-1;;;;;126651:54;;;;109395:3;109380:19;;;;69118:64;108989:421;;-1:-1;;108989:421::o;110467:481::-;;67413:5;67390:3;67383:37;110672:2;110790;110779:9;110775:18;110768:48;110830:108;110672:2;110661:9;110657:18;110924:6;110830:108;:::i;110955:740::-;;67413:5;67390:3;67383:37;111238:2;111356;111345:9;111341:18;111334:48;111396:108;111238:2;111227:9;111223:18;111490:6;111396:108;:::i;:::-;111552:9;111546:4;111542:20;111537:2;111526:9;111522:18;111515:48;111577:108;111680:4;111671:6;111577:108;:::i;111702:1040::-;;67413:5;67390:3;67383:37;112202:2;112083:3;112202:2;112191:9;112187:18;112180:48;112242:108;112083:3;112072:9;112068:19;112336:6;112242:108;:::i;:::-;112388:20;;;112383:2;112368:18;;112361:48;119660:12;;122189:19;;;122229:14;;;;63470:17;;;63461:27;;;;118316:14;;;-1:-1;63608:360;63633:6;63630:1;63627:13;63608:360;;;130061:7;;122233:3;63689:4;63685:20;;63680:3;63673:33;58495:66;58557:3;63740:6;63734:13;58495:66;:::i;:::-;63947:14;;;;63754:92;-1:-1;121147:14;;;;63655:1;63648:9;63608:360;;;63612:14;;112599:9;112593:4;112589:20;112584:2;112573:9;112569:18;112562:48;112624:108;112727:4;112718:6;112624:108;:::i;112749:780::-;67383:37;;;113181:2;113166:18;;67383:37;;;;113264:2;113249:18;;67383:37;;;;113347:2;113332:18;;67383:37;113430:3;113415:19;;67383:37;113514:3;113499:19;;67383:37;113016:3;113001:19;;112987:542::o;113536:506::-;;;113671:11;113658:25;113722:48;;113746:8;113730:14;113726:29;113722:48;113702:18;113698:73;113688:2;;-1:-1;;113775:12;113688:2;113802:33;;113856:18;;;-1:-1;;;;;;113883:30;;113880:2;;;-1:-1;;113916:12;113880:2;113761:4;113944:13;;-1:-1;113730:14;113976:38;;;113966:49;;113963:2;;;114028:1;;114018:12;113963:2;113626:416;;;;;:::o;114049:256::-;114111:2;114105:9;114137:17;;;-1:-1;;;;;114197:34;;114233:22;;;114194:62;114191:2;;;114269:1;;114259:12;114191:2;114111;114278:22;114089:216;;-1:-1;114089:216::o;114312:304::-;;-1:-1;;;;;114463:6;114460:30;114457:2;;;-1:-1;;114493:12;114457:2;-1:-1;114538:4;114526:17;;;114591:15;;114394:222::o;117544:321::-;;-1:-1;;;;;117679:6;117676:30;117673:2;;;-1:-1;;117709:12;117673:2;-1:-1;130061:7;117763:17;-1:-1;;117759:33;117850:4;117840:15;;117610:255::o;129701:268::-;129766:1;129773:101;129787:6;129784:1;129781:13;129773:101;;;129854:11;;;129848:18;129835:11;;;129828:39;129809:2;129802:10;129773:101;;;129889:6;129886:1;129883:13;129880:2;;;129766:1;129945:6;129940:3;129936:16;129929:27;129880:2;;129750:219;;;:::o;130082:112::-;130172:1;130165:5;130162:12;130152:2;;130178:9;130152:2;130146:48;:::o;130673:117::-;-1:-1;;;;;126651:54;;130732:35;;130722:2;;130781:1;;130771:12;130937:111;131018:5;124546:13;124539:21;130996:5;130993:32;130983:2;;131039:1;;131029:12;131179:115;-1:-1;;;;;;124712:78;;131237:34;;131227:2;;131285:1;;131275:12;132682:115;132767:5;126369:2;126358:21;132743:5;132740:34;132730:2;;132788:1;;132778:12;132926:117;-1:-1;;;;;133013:5;126531:46;132988:5;132985:35;132975:2;;133034:1;;133024:12"
            }
        }
    },
    "sourceTreeHashHex": "0xd77ffc76ebee48b13978a0dfe1943f7254cae47a5c504f9cb8f8e7dc06bdef50",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\nimport \"./AutoRouteSampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler,\n    AutoRouteSampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "./Eth2DaiSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "./LidoSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "./MultiBridgeSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "./SmoothySampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ISmoothy.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 26,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
        },
        "./AutoRouteSampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IAutoRoute{\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] memory paths,\n        string[] memory poolType, \n        address[] memory dmmPoolAddresses\n    )\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsOut(\n        uint256 amountIn, \n        address[] memory paths, \n        string[] memory poolType, \n        address[] memory dmmPoolAddresses\n    )\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract AutoRouteSampler\n{\n    /// @dev Gas limit for auto route calls.\n    uint256 constant private AUTO_ROUTE_CALL_GAS = 150e3; // 150k\n\n    struct ExtraParams {\n        address router;\n        address[] path;\n        string[] poolType;\n        address[] dmmPoolAddresses;\n        uint256[] amountTokens;\n    }\n\n    function sampleSellsFromAutoRoute(\n        ExtraParams memory params\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = params.amountTokens.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        {\n            for (uint256 i = 0; i < numSamples; i++) {\n                try\n                    IAutoRoute(params.router).getAmountsOut\n                        // {gas: AUTO_ROUTE_CALL_GAS}\n                        (params.amountTokens[i], params.path, params.poolType, params.dmmPoolAddresses)\n                    returns (uint256[] memory amounts)\n                {\n                    makerTokenAmounts[i] = amounts[params.path.length - 1];\n                    // Break early if there are 0 amounts\n                    if (makerTokenAmounts[i] == 0) {\n                        break;\n                    }\n                } catch (bytes memory) {\n                    // Swallow failures, leaving all results as zero.\n                    break;\n                }\n            }\n        }\n    }\n\n    function sampleBuysFromAutoRoute(\n        ExtraParams memory params\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = params.amountTokens.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        {\n            for (uint256 i = 0; i < numSamples; i++) {\n                try\n                    IAutoRoute(params.router).getAmountsIn\n                        // {gas: AUTO_ROUTE_CALL_GAS}\n                        (params.amountTokens[i], params.path, params.poolType, params.dmmPoolAddresses)\n                    returns (uint256[] memory amounts)\n                {\n                    takerTokenAmounts[i] = amounts[0];\n                    // Break early if there are 0 amounts\n                    if (takerTokenAmounts[i] == 0) {\n                        break;\n                    }\n                } catch (bytes memory) {\n                    // takerTokenAmounts[i] = 0;\n                    revert(\"1999999999999999\");\n                    // Swallow failures, leaving all results as zero.\n                    break;\n                }\n            }\n        }\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\nimport \"./AutoRouteSampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler,\n    AutoRouteSampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "./LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}",
        "./AutoRouteSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IAutoRoute{\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] memory paths,\n        string[] memory poolType, \n        address[] memory dmmPoolAddresses\n    )\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsOut(\n        uint256 amountIn, \n        address[] memory paths, \n        string[] memory poolType, \n        address[] memory dmmPoolAddresses\n    )\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract AutoRouteSampler\n{\n    /// @dev Gas limit for auto route calls.\n    uint256 constant private AUTO_ROUTE_CALL_GAS = 150e3; // 150k\n\n    struct ExtraParams {\n        address router;\n        address[] path;\n        string[] poolType;\n        address[] dmmPoolAddresses;\n        uint256[] amountTokens;\n    }\n\n    function sampleSellsFromAutoRoute(\n        ExtraParams memory params\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = params.amountTokens.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        {\n            for (uint256 i = 0; i < numSamples; i++) {\n                try\n                    IAutoRoute(params.router).getAmountsOut\n                        // {gas: AUTO_ROUTE_CALL_GAS}\n                        (params.amountTokens[i], params.path, params.poolType, params.dmmPoolAddresses)\n                    returns (uint256[] memory amounts)\n                {\n                    makerTokenAmounts[i] = amounts[params.path.length - 1];\n                    // Break early if there are 0 amounts\n                    if (makerTokenAmounts[i] == 0) {\n                        break;\n                    }\n                } catch (bytes memory) {\n                    // Swallow failures, leaving all results as zero.\n                    break;\n                }\n            }\n        }\n    }\n\n    function sampleBuysFromAutoRoute(\n        ExtraParams memory params\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = params.amountTokens.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        {\n            for (uint256 i = 0; i < numSamples; i++) {\n                try\n                    IAutoRoute(params.router).getAmountsIn\n                        // {gas: AUTO_ROUTE_CALL_GAS}\n                        (params.amountTokens[i], params.path, params.poolType, params.dmmPoolAddresses)\n                    returns (uint256[] memory amounts)\n                {\n                    takerTokenAmounts[i] = amounts[0];\n                    // Break early if there are 0 amounts\n                    if (takerTokenAmounts[i] == 0) {\n                        break;\n                    }\n                } catch (bytes memory) {\n                    // takerTokenAmounts[i] = 0;\n                    revert(\"1999999999999999\");\n                    // Swallow failures, leaving all results as zero.\n                    break;\n                }\n            }\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/home/sotatek/Desktop/Workspace/Sotatek/evry-finance/fcxv2-0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/home/sotatek/Desktop/Workspace/Sotatek/evry-finance/fcxv2-0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-zero-ex=/home/sotatek/Desktop/Workspace/Sotatek/evry-finance/fcxv2-0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
